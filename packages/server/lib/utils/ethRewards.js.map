{"version":3,"sources":["../../src/utils/ethRewards.js"],"names":["queue","require","IS_TEST","process","env","NODE_ENV","q","concurrency","debug","computingRewards","exports","rewards","Error","rewardPool","allocateRewards","oldRewards","getOldRewards","rewardFund","console","log","err","communities","Community","find","inactive","$ne","stakedTokens","Earnings","totalBalance","reduce","a","c","forEach","community","push","cb","computeCommunityRewards","updatedPosts","postPayouts","postRewards","payouts","distributedRewards","distributeUserRewards","res","slug","payoutData","Promise","resolve","reject","results","on","start","totalDistributedRewards","Object","values","result","value","now","Date","updateMany","payoutTime","$lte","status","multi","treasury","Treasury","findOne","unAllocatedRewards","save","updateRewardAllocation","cancelPendingTx","Eth","mintRewardTokens","getParam","noConvert","communityId","_id","reward","communityRewardShare","communityBalance","rewardShare","posts","PostData","eligibleForReward","paidOut","pendingPayouts","$gt","decay","getTime","lastRewardFundUpdate","SHARE_DECAY","currentShares","Math","min","topPostShares","postCount","post","pagerank","MINIMUM_RANK","computePostPayout","pendingPosts","updatePendingEarnings","map","p","title","payout","payoutShare","rank","communityRewardFund","average","all","_community","updatedUsers","votes","Invest","totalShares","v","shares","curationReward","updatedVotes","vote","amount","user","User","investor","curationWeight","curationPayout","floor","max","earning","updateRewardsRecord","earned","prevBalance","balance","endBalance","legacyAirdrop","referralTokens","airdropTokens","unlockTokens","lockedTokens","findOneAndUpdate","$inc","new","name","sendNotification","type","postData","props","s","action","numbers","abbreviateNumber","text","alertText","Notification","createNotification","forUser","coin","coinType","postObj","Post","data","payload","toUser","noteType","estimatedPostPayout","TOKEN_DECIMALS","aggregate","$match","$group","$sum"],"mappings":"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","sourcesContent":["/* eslint no-console: 0 */\nimport { sendNotification as sendPushNotification } from 'server/notifications';\nimport Notification from 'server/api/notification/notification.model';\nimport Post from 'server/api/post/post.model';\nimport { sendAdminAlert } from 'server/utils/mail';\nimport Treasury from 'server/api/treasury/treasury.model';\nimport computePageRank from 'server/pagerank/pagerankCompute';\nimport * as numbers from 'app/utils/numbers';\nimport User from '../api/user/user.model';\nimport Invest from '../api/invest/invest.model';\nimport Earnings from '../api/earnings/earnings.model';\nimport Community from '../api/community/community.model';\nimport * as Eth from './ethereum';\nimport { SHARE_DECAY, MINIMUM_RANK, TOKEN_DECIMALS } from '../config/globalConstants';\nimport PostData from '../api/post/postData.model';\nimport { runAudit } from './tokenAudit';\n\nconst queue = require('queue');\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\n\nconst q = queue({ concurrency: 1 });\n// const debug = process.env.NODE_ENV === 'test';\nconst debug = false;\n\nlet computingRewards = false;\n\nexports.rewards = async () => {\n  // safeguard\n  if (computingRewards) throw new Error('computing rewards is already in progress!');\n  computingRewards = true;\n\n  let rewardPool;\n  try {\n    rewardPool = await allocateRewards();\n    const oldRewards = await getOldRewards();\n    rewardPool -= oldRewards[0].rewardFund;\n    console.log('rewardPool', rewardPool); // eslint-disable;\n    if (rewardPool < 0) throw new Error(`not enough funds in reward pool ${rewardPool}`);\n  } catch (err) {\n    console.log(err);\n    await sendAdminAlert(err);\n    throw err;\n  }\n\n  try {\n    const communities = await Community.find({ inactive: { $ne: true } });\n\n    const stakedTokens = await Earnings.stakedTokens();\n    console.log('stakedTokens', stakedTokens);\n\n    const totalBalance = stakedTokens.reduce((a, c) => c.stakedTokens + a, 0);\n    if (totalBalance === 0) return (computingRewards = false);\n\n    communities.forEach(community =>\n      q.push(async cb => {\n        community = await computeCommunityRewards(community, rewardPool, stakedTokens);\n        const { updatedPosts, postPayouts } = await postRewards(community);\n        const { payouts, distributedRewards } = await distributeUserRewards(\n          updatedPosts,\n          community\n        );\n\n        const res = {\n          community: community.slug,\n          payouts,\n          distributedRewards,\n          postPayouts\n        };\n\n        return cb(null, res);\n      })\n    );\n\n    const payoutData = await new Promise((resolve, reject) => {\n      const results = {};\n      q.on('success', res => (results[res.community] = res));\n      q.start(err => (err ? reject(err) : resolve(results)));\n    });\n\n    const totalDistributedRewards = Object.values(payoutData).reduce(\n      (result, value) => result + value.distributedRewards,\n      0\n    );\n\n    // TODO do we need these checks?\n    // const remainingRewards = await Eth.getParam('rewardPool', { noConvert: true });\n    // const distPool = await Eth.getParam('distributedRewards', { noConvert: true });\n    // console.log('distributedRewards Pool', distPool);\n    // console.log('Finished distributing rewards, remaining reward fund: ', remainingRewards);\n    const now = new Date();\n    await Earnings.updateMany(\n      { payoutTime: { $lte: now }, status: 'pending' },\n      { status: 'expired' },\n      { multi: true }\n    );\n\n    computingRewards = false;\n    await runAudit();\n\n    const treasury = await Treasury.findOne({ community: 'global' });\n    treasury.unAllocatedRewards += totalDistributedRewards;\n    await treasury.save();\n\n    if (treasury.unAllocatedRewards) await updateRewardAllocation();\n\n    return { payoutData, totalDistributedRewards };\n  } catch (err) {\n    console.log('rewards error', err);\n    computingRewards = false;\n    await sendAdminAlert(err);\n    // return null;\n    throw err;\n  }\n};\n\nasync function updateRewardAllocation() {\n  let treasury = await Treasury.findOne({ community: 'global' });\n  if (!treasury) {\n    treasury = new Treasury({ community: 'global' });\n    treasury = await treasury.save();\n  }\n  const { unAllocatedRewards } = treasury || {};\n  if (unAllocatedRewards) {\n    console.log('unAllocated Rewards', allocateRewards);\n    const cancelPendingTx = true;\n    await Eth.allocateRewards(unAllocatedRewards, cancelPendingTx);\n    treasury.unAllocatedRewards = 0;\n    await treasury.save();\n  }\n}\n\nasync function allocateRewards() {\n  await updateRewardAllocation();\n  const cancelPendingTx = true;\n  await Eth.mintRewardTokens(cancelPendingTx);\n  const rewardPool = await Eth.getParam('rewardFund', { noConvert: true });\n  return rewardPool;\n}\n\nasync function computeCommunityRewards(community, rewardPool, stakedTokens) {\n  await computePageRank({ communityId: community._id, community: community.slug, debug });\n  const reward = await communityRewardShare({ community, stakedTokens, rewardPool });\n\n  community.rewardFund += reward;\n  community = await community.save();\n  return community;\n}\n\nfunction communityRewardShare({ community, stakedTokens, rewardPool }) {\n  const totalBalance = stakedTokens.reduce((a, c) => c.stakedTokens + a, 0);\n  let communityBalance = stakedTokens.find(c => c._id === community.slug);\n  if (!communityBalance || !communityBalance.stakedTokens) return 0;\n  communityBalance = communityBalance.stakedTokens;\n\n  // compute portion of reward pool allocated to community\n  const rewardShare = communityBalance / totalBalance;\n  const rewards = rewardPool * rewardShare;\n\n  console.log('\\x1b[32m', 'Reward share of', community.slug, rewardShare);\n  console.log('\\x1b[32m', 'Rewards for', community.slug, rewards);\n  console.log('\\x1b[0m');\n\n  return rewards;\n}\n\nasync function postRewards(community) {\n  const now = new Date();\n\n  // use postData as post\n  const posts = await PostData.find({\n    eligibleForReward: true,\n    paidOut: false,\n    payoutTime: { $lte: now },\n    communityId: community._id\n  });\n\n  const pendingPayouts = await PostData.find({\n    eligibleForReward: true,\n    paidOut: false,\n    payoutTime: { $gt: now },\n    communityId: community._id\n  });\n\n  // decay current reward shares\n  const decay = IS_TEST\n    ? 0\n    : (now.getTime() - community.lastRewardFundUpdate.getTime()) / SHARE_DECAY;\n\n  community.currentShares *= 1 - Math.min(1, decay);\n  community.topPostShares *= 1 - Math.min(1, decay);\n  community.postCount *= 1 - Math.min(1, decay);\n\n  // add post relevance to treasury\n  posts.forEach(post => {\n    // cut off low-ranking posts\n    if (post.pagerank > MINIMUM_RANK) {\n      community.currentShares += post.pagerank;\n      community.postCount += 1;\n      if (post.pagerank >= community.currentShares / (community.postCount || 1)) {\n        community.topPostShares += post.pagerank;\n      }\n    }\n    post.paidOut = true;\n  });\n\n  community.lastRewardFundUpdate = now;\n  community = await community.save();\n\n  const updatedPosts = await computePostPayout({ posts, community });\n  // estimates post payout\n  const pendingPosts = await computePostPayout({ posts: pendingPayouts, community });\n  await updatePendingEarnings(pendingPosts);\n\n  const postPayouts = updatedPosts.map(p => ({\n    title: p.post,\n    payout: p.payout,\n    payoutShare: p.payoutShare,\n    rank: p.pagerank\n  }));\n  console.log('\\x1b[32m', 'distributed rewards to posts', postPayouts);\n  console.log('\\x1b[0m');\n\n  return { updatedPosts, postPayouts };\n}\n\n// ANALYSIS — attack scenario community with low-quality posts to bring down the average?\nasync function computePostPayout({ posts, community }) {\n  // let posts = await Post.find({ paidOut: false, payoutTime: { $lt: now } });\n  const communityRewardFund = community.rewardFund;\n  let updatedPosts = posts.map(async post => {\n    const average = community.currentShares / (community.postCount || 1);\n\n    // only reward above-average posts\n    console.log('rank vs average', post.pagerank, average);\n    if (post.pagerank < average) {\n      post.payout = 0;\n      return post.save();\n    }\n    // linear reward curve\n\n    // cap rewards share at 1/20th of the fund - especially for the first rewards?\n    post.payoutShare = Math.min(0.05, post.pagerank / (community.topPostShares || 1));\n    const payout = communityRewardFund * post.payoutShare;\n    community.rewardFund -= payout;\n    post.payout = payout;\n    return post.save();\n  });\n  updatedPosts = await Promise.all(updatedPosts);\n  await community.save();\n  return updatedPosts;\n}\n\nasync function distributeUserRewards(posts, _community) {\n  const { slug: community, _id: communityId } = _community;\n  const payouts = {};\n  let distributedRewards = 0;\n\n  const updatedUsers = posts.map(async post => {\n    const votes = await Invest.find({ post: post.post, communityId: post.communityId });\n\n    // compute total vote shares\n    const totalShares = votes.reduce((a, v) => a + v.shares, 0);\n\n    if (totalShares !== post.shares) {\n      console.log('post:', post.post);\n      console.log(\n        'ERROR: shares mismatch, investShares:',\n        totalShares,\n        'postShares:',\n        post.shares\n      );\n    }\n\n    if (totalShares === 0) return null;\n\n    const curationReward = post.payout;\n\n    //  ---------- Curation rewards ------------\n\n    const updatedVotes = votes.map(async vote => {\n      // don't count downvotes\n      if (vote.amount < 0) return null;\n\n      let user = await User.findOne(\n        { _id: vote.investor },\n        'name balance deviceTokens badge lockedTokens legacyAirdrop referralTokens airdropTokens'\n      );\n\n      const curationWeight = vote.shares / totalShares;\n      const curationPayout = Math.floor(curationWeight * curationReward);\n\n      distributedRewards += curationPayout;\n\n      payouts[user._id] = payouts[user._id]\n        ? payouts[user._id] + curationPayout\n        : curationPayout;\n\n      // TODO diff decimal?\n      const reward = Math.max(curationPayout, 0) / 10 ** 18;\n\n      const earning = await Earnings.updateRewardsRecord({\n        user: user._id,\n        post: post.post,\n        earned: reward,\n        status: curationPayout ? 'paidout' : 'expired',\n        prevBalance: user.balance,\n        endBalance: user.balance + reward,\n        legacyAirdrop: user.legacyAirdrop,\n        referralTokens: user.referralTokens,\n        airdropTokens: user.airdropTokens,\n        community,\n        communityId\n      });\n\n      const unlockTokens = Math.min(user.lockedTokens, earning.stakedTokens);\n\n      user = await User.findOneAndUpdate(\n        { _id: user._id },\n        { $inc: { balance: reward, lockedTokens: -unlockTokens } },\n        { new: true }\n      );\n\n      if (curationPayout === 0) return null;\n\n      console.log('Awarded', user.name, reward, 'tokens for', post.post);\n      return sendNotification({\n        user,\n        reward,\n        post: post.post,\n        type: 'vote',\n        community,\n        communityId,\n        postData: post\n      });\n    });\n    return Promise.all(updatedVotes);\n  });\n\n  await Promise.all(updatedUsers);\n\n  // transfer amounts to distributed rewards\n  console.log('total distributed rewards for', community, distributedRewards);\n  console.log('\\x1b[32m', payouts);\n  console.log('\\x1b[0m');\n  return { payouts, distributedRewards };\n}\n\nasync function sendNotification(props) {\n  const { user, reward, post, community, communityId, type, postData } = props;\n  const s = reward === 1 ? '' : 's';\n  const action = type === 'vote' ? 'upvoting ' : '';\n\n  const amount = numbers.abbreviateNumber(reward);\n  const text = `You earned ${amount} coin${s} from ${action}this post`;\n  const alertText = `You earned ${amount} coin${s} from ${action}a post`;\n\n  await Notification.createNotification({\n    post,\n    forUser: user._id,\n    type: 'reward',\n    coin: reward,\n    text,\n    coinType: 'eth',\n    community,\n    communityId\n  });\n\n  const postObj = await Post.findOne({ _id: post });\n  postObj.data = postData;\n\n  const payload = {\n    toUser: user,\n    post: postObj,\n    action: alertText,\n    noteType: 'reward'\n  };\n\n  sendPushNotification(user, alertText, payload);\n  return user;\n}\n\nasync function updatePendingEarnings(posts) {\n  posts = await posts.map(post =>\n    Earnings.updateMany(\n      { post: post.post },\n      { estimatedPostPayout: post.payout / TOKEN_DECIMALS },\n      { multi: true }\n    )\n  );\n  return Promise.all(posts);\n}\n\nasync function getOldRewards() {\n  return Community.aggregate([\n    { $match: {} },\n    {\n      $group: {\n        _id: 0,\n        rewardFund: { $sum: '$rewardFund' }\n      }\n    }\n  ]);\n}\n"],"file":"ethRewards.js"}