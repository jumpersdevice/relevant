{"version":3,"sources":["../../src/utils/mail.js"],"names":["SYS_ADMIN_EMAIL","RELEVANT_ENV","process","env","IS_PRODUCTION","ML","MailerLite","MAILER_LITE_KEY","ML_CONST","TEST_ID","REGISTERED_USERS","NO_DIGEST","LISTS","general","mailgun","ml","nodigest","dummyKey","apiKey","MAILGUN_API_KEY","domain","MAILGUN_DOMAIN","test","data","from","to","subject","text","exports","send","sendEmail","htmlToText","fromString","html","NODE_ENV","Promise","resolve","messages","catch","err","sendAdminAlert","message","stack","addUserToEmailList","user","_list","ensureEmail","listParams","addSubscriber","email","name","handle","list","lists","u","mailgunUser","handleRes","params","members","create","handleErr","updateUserEmail","previousAddress","deleteSubscriber","er","update","removeFromEmailList","delete","ensureParam","twitterEmail","subscribed","address","trim","console","log","fn","reject","getMLUser","Subscribers","getDetails"],"mappings":"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","sourcesContent":["import htmlToText from 'html-to-text';\nimport MailGun from 'mailgun-js';\nimport MailerLite from 'mailerlite-mailerlite';\nimport { shouldSkip } from 'server/utils/skipErrors';\n\nconst { SYS_ADMIN_EMAIL, RELEVANT_ENV } = process.env;\nconst IS_PRODUCTION = RELEVANT_ENV === 'production';\n\nconst ML = new MailerLite(process.env.MAILER_LITE_KEY, 2);\nconst ML_CONST = 'Groups';\n\nconst TEST_ID = '69351596';\nconst REGISTERED_USERS = '11298808';\nconst NO_DIGEST = '11349218';\n\nconst LISTS = {\n  general: {\n    mailgun: IS_PRODUCTION ? 'currentUsers' : 'test',\n    ml: IS_PRODUCTION ? REGISTERED_USERS : TEST_ID\n  },\n  nodigest: {\n    mailgun: IS_PRODUCTION ? 'nodigest' : 'test',\n    ml: IS_PRODUCTION ? NO_DIGEST : TEST_ID\n  }\n};\n\nconst dummyKey = 'XXXXXXXXXXXXXXXXXXXXXXX';\n\nexport const mailgun = MailGun({\n  apiKey: process.env.MAILGUN_API_KEY || dummyKey,\n  domain: process.env.MAILGUN_DOMAIN || dummyKey\n});\n\nexport const test = () => {\n  const data = {\n    from: 'Relevant <noreply@mail.relevant.community>',\n    to: 'slava@4real.io',\n    subject: 'Message from relevant',\n    text: 'Test message from relevant!'\n  };\n  exports.send(data);\n};\n\nexport const sendEmail = data => {\n  const text = htmlToText.fromString(data.html);\n  data = { ...data, text };\n  // console.log('env ', process.env.NODE_ENV)\n  if (process.env.NODE_ENV === 'test') {\n    return Promise.resolve();\n  }\n  return mailgun\n    .messages()\n    .send(data)\n    .catch(err => {\n      // console.log('mail error ', err);\n      throw err;\n    });\n};\n\nexport async function sendAdminAlert(err) {\n  if (!SYS_ADMIN_EMAIL) return null;\n  if (shouldSkip(err.message)) return null;\n  const data = {\n    from: 'Relevant <info@relevant.community>',\n    to: SYS_ADMIN_EMAIL,\n    subject: `Error: ${err.message}`,\n    html: `\n      message: ${err.message}\n      <br /><br />\n      stack:\n      <br />\n      ${err.stack}\n      <br />\n      `\n  };\n  return sendEmail(data);\n}\n\nexport async function addUserToEmailList(user, _list) {\n  user = await ensureEmail(user);\n  const listParams = LISTS[_list || 'general'];\n  try {\n    await ML[ML_CONST].addSubscriber(listParams.ml, user.email, {\n      name: '@' + user.handle\n    });\n  } catch (err) {\n    // console.log('mailer lite err', er);\n  }\n\n  try {\n    const list = mailgun.lists(listParams.mailgun + '@mail.relevant.community');\n\n    const u = mailgunUser(user);\n    if (!u) return null;\n\n    return await handleRes(params => list.members().create(u, params));\n  } catch (err) {\n    return handleErr(err);\n  }\n}\n\nexport async function updateUserEmail(user, previousAddress, _list) {\n  user = await ensureEmail(user);\n  const listParams = LISTS[_list || 'general'];\n  try {\n    await ML[ML_CONST].deleteSubscriber(listParams.ml, previousAddress);\n    await ML[ML_CONST].addSubscriber(listParams.ml, user.email, {\n      name: '@' + user.handle\n    });\n  } catch (er) {\n    // console.log('ml err', er);\n  }\n\n  try {\n    const list = mailgun.lists(listParams.mailgun + '@mail.relevant.community');\n\n    const u = mailgunUser(user);\n    if (!u) return null;\n\n    return await handleRes(params => list.members(previousAddress).update(u, params));\n  } catch (err) {\n    return handleErr(err);\n  }\n}\n\nexport async function removeFromEmailList(user, _list) {\n  user = await ensureEmail(user);\n  const listParams = LISTS[_list || 'general'];\n  try {\n    await ML[ML_CONST].deleteSubscriber(listParams.ml, user.email);\n  } catch (er) {\n    // console.log('ml err', er);\n  }\n\n  try {\n    const list = mailgun.lists(listParams.mailgun + '@mail.relevant.community');\n    return await handleRes(params => list.members(user.email).delete(params));\n  } catch (err) {\n    return handleErr(err);\n  }\n}\n\nasync function ensureEmail(user) {\n  if (!user.email && user.ensureParam) return user.ensureParam('email');\n  return user;\n}\n\nfunction mailgunUser(user) {\n  const email = user.email || user.twitterEmail;\n  if (!email) return null;\n  return {\n    subscribed: true,\n    address: email.trim(),\n    name: '@' + user.handle\n  };\n}\n\nfunction handleErr(err) {\n  console.log(err); // eslint-disable-line\n  sendAdminAlert(err);\n  return null;\n}\n\nfunction handleRes(fn) {\n  return new Promise((resolve, reject) =>\n    fn((err, data) => {\n      if (err) return reject(err);\n      return resolve(data);\n    })\n  );\n}\n\nexport async function getMLUser(email) {\n  return ML.Subscribers.getDetails(email);\n}\n\nexport default {\n  send: sendEmail\n};\n"],"file":"mail.js"}