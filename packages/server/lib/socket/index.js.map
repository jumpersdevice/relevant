{"version":3,"sources":["../../src/socket/index.js"],"names":["REDIS_URL","REDIS_KEY","process","env","clients","server","redisAdapter","key","io","origins","sendHeartbeat","setTimeout","sockets","emit","beat","registerEvents","adapter","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","log","data","console","nsp","name","onConnect","currentUser","type","payload","id","action","addClient","removeClient","of","customHook","cb","emitToUser","userSockets","Object","keys","length","User","findOneAndUpdate","_id","online","exec","catch","err","createListener","customRequest","forEach","eventListener","socketEvent","listener","JSON","stringify"],"mappings":"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","sourcesContent":["/* eslint no-console: 0 */\nimport socketIO from 'socket.io';\nimport User from 'server/api/user/user.model';\nimport socketRedis from 'socket.io-redis';\nimport socketEvent from './socketEvent';\n\nconst { REDIS_URL, REDIS_KEY = 'socketio' } = process.env;\n\n// TODO store list of clients in Mongo;\nconst clients = {};\n\nexport default function(server) {\n  const redisAdapter = socketRedis(REDIS_URL, { key: REDIS_KEY });\n\n  const io = socketIO(server);\n  io.origins(['*:*']);\n\n  function sendHeartbeat() {\n    setTimeout(sendHeartbeat, 30000);\n    io.sockets.emit('pingKeepAlive', { beat: 1 });\n  }\n  setTimeout(sendHeartbeat, 30000);\n\n  registerEvents(io);\n\n  io.adapter(redisAdapter).on('connection', socket => {\n    socket.address =\n      socket.request.connection.remoteAddress +\n      ':' +\n      socket.request.connection.remotePort;\n\n    socket.connectedAt = new Date();\n\n    socket.log = (...data) => {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    onConnect(socket, io);\n\n    let currentUser = null;\n    socket.emit('action', { type: 'socketId', payload: socket.id });\n\n    socket.on('pingResponse', () => {});\n\n    socket.on('action', action => {\n      if (action.type === 'server/storeUser') {\n        currentUser = action.payload;\n        addClient(io, socket, currentUser);\n      }\n      if (action.type === 'server/logout') {\n        currentUser = action.payload;\n        removeClient(io, socket, currentUser);\n      }\n    });\n\n    socket.on('disconnect', () => {\n      removeClient(io, socket, currentUser);\n    });\n  });\n\n  io.of('/').adapter.customHook = (data, cb) => {\n    emitToUser(data);\n    cb();\n  };\n}\n\nfunction removeClient(io, socket, currentUser) {\n  if (!currentUser || !clients[currentUser]) return;\n\n  const userSockets = clients[currentUser];\n  delete userSockets[socket.id];\n\n  if (Object.keys(userSockets).length === 0) {\n    delete clients[currentUser];\n\n    User.findOneAndUpdate({ _id: currentUser }, { online: false })\n      .exec()\n      .catch(err => console.log(err));\n  }\n  console.log('socket disconnected');\n}\n\nfunction addClient(io, socket, currentUser) {\n  console.log('user connected ', currentUser);\n  clients[currentUser] = clients[currentUser] || {};\n  clients[currentUser][socket.id] = socket;\n\n  const userSockets = clients[currentUser];\n\n  // update online status and send socket\n  if (Object.keys(userSockets).length === 1) {\n    User.findOneAndUpdate({ _id: currentUser }, { online: true })\n      .exec()\n      .catch(err => console.log(err));\n  }\n}\n\nfunction createListener(io) {\n  return data => {\n    if (data._id) {\n      emitToUser(data);\n      io.of('/').adapter.customRequest(data, err => {\n        if (err) console.log(err);\n      });\n    } else {\n      console.log('emit to all ', data.type);\n      io.emit('action', data);\n    }\n  };\n}\n\nfunction emitToUser(data) {\n  const sockets = clients[data._id];\n  if (!sockets) return;\n  Object.keys(sockets).forEach(id => {\n    const socket = sockets[id];\n    console.log('emit to ', data._id, ' ', data.type);\n    socket.emit('action', data);\n  });\n}\n\nfunction registerEvents(io) {\n  const eventListener = socketEvent;\n  const listener = createListener(io);\n  eventListener.on('socketEvent', listener);\n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n}\n"],"file":"index.js"}