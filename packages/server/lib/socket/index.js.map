{"version":3,"sources":["../../src/socket/index.js"],"names":["clients","server","io","origins","attach","registerEvents","sendHeartbeat","setTimeout","sockets","emit","beat","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","log","data","console","nsp","name","onConnect","currentUser","type","payload","id","action","addClient","removeClient","userSockets","Object","keys","length","User","findOneAndUpdate","_id","online","exec","catch","err","createListener","forEach","eventListener","socketEvent","listener","JSON","stringify"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAHA;AAKA;AACA,IAAMA,OAAO,GAAG,EAAhB;;AAEe,kBAASC,MAAT,EAAiB;AAC9B,MAAMC,EAAE,GAAG,sBAAX;AACAA,EAAAA,EAAE,CAACC,OAAH,CAAW,CAAC,KAAD,CAAX;AACAD,EAAAA,EAAE,CAACE,MAAH,CAAUH,MAAV;AAEAI,EAAAA,cAAc,CAACH,EAAD,CAAd;;AAEA,WAASI,aAAT,GAAyB;AACvBC,IAAAA,UAAU,CAACD,aAAD,EAAgB,KAAhB,CAAV;AACAJ,IAAAA,EAAE,CAACM,OAAH,CAAWC,IAAX,CAAgB,eAAhB,EAAiC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAjC;AACD;;AACDH,EAAAA,UAAU,CAACD,aAAD,EAAgB,KAAhB,CAAV;AAEAJ,EAAAA,EAAE,CAACS,EAAH,CAAM,YAAN,EAAoBC,MAAM,IAAI;AAC5BA,IAAAA,MAAM,CAACC,OAAP,GACED,MAAM,CAACE,OAAP,CAAeC,UAAf,CAA0BC,aAA1B,GACA,GADA,GAEAJ,MAAM,CAACE,OAAP,CAAeC,UAAf,CAA0BE,UAH5B;AAKAL,IAAAA,MAAM,CAACM,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAP,IAAAA,MAAM,CAACQ,GAAP,GAAa,YAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AACxBC,MAAAA,OAAO,CAACF,GAAR,oBAAwBR,MAAM,CAACW,GAAP,CAAWC,IAAnC,eAA4CZ,MAAM,CAACC,OAAnD,QAA+D,GAAGQ,IAAlE;AACD,KAFD;;AAIAI,IAAAA,SAAS,CAACb,MAAD,EAASV,EAAT,CAAT;AAEA,QAAIwB,WAAW,GAAG,IAAlB;AACAd,IAAAA,MAAM,CAACH,IAAP,CAAY,QAAZ,EAAsB;AAAEkB,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAEhB,MAAM,CAACiB;AAApC,KAAtB;AAEAjB,IAAAA,MAAM,CAACD,EAAP,CAAU,cAAV,EAA0B,MAAM,CAC9B;AACD,KAFD;AAIAC,IAAAA,MAAM,CAACD,EAAP,CAAU,QAAV,EAAoBmB,MAAM,IAAI;AAC5B,UAAIA,MAAM,CAACH,IAAP,KAAgB,kBAApB,EAAwC;AACtCD,QAAAA,WAAW,GAAGI,MAAM,CAACF,OAArB;AACAG,QAAAA,SAAS,CAACnB,MAAD,EAASc,WAAT,CAAT;AACD;;AACD,UAAII,MAAM,CAACH,IAAP,KAAgB,eAApB,EAAqC;AACnCD,QAAAA,WAAW,GAAGI,MAAM,CAACF,OAArB;AACAI,QAAAA,YAAY,CAACpB,MAAD,EAASc,WAAT,CAAZ;AACD;AACF,KATD;AAWAd,IAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BqB,MAAAA,YAAY,CAACpB,MAAD,EAASc,WAAT,CAAZ;AACD,KAFD;AAGD,GAnCD;AAoCD;;AAED,SAASM,YAAT,CAAsBpB,MAAtB,EAA8Bc,WAA9B,EAA2C;AACzC,MAAI,CAACA,WAAD,IAAgB,CAAC1B,OAAO,CAAC0B,WAAD,CAA5B,EAA2C;AAE3C,MAAMO,WAAW,GAAGjC,OAAO,CAAC0B,WAAD,CAA3B;AACA,SAAOO,WAAW,CAACrB,MAAM,CAACiB,EAAR,CAAlB;;AAEA,MAAIK,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,KAAoC,CAAxC,EAA2C;AACzC,WAAOpC,OAAO,CAAC0B,WAAD,CAAd;;AAEAW,kBAAKC,gBAAL,CAAsB;AAAEC,MAAAA,GAAG,EAAEb;AAAP,KAAtB,EAA4C;AAAEc,MAAAA,MAAM,EAAE;AAAV,KAA5C,EACGC,IADH,GAEGC,KAFH,CAESC,GAAG,IAAIrB,OAAO,CAACF,GAAR,CAAYuB,GAAZ,CAFhB;AAGD;;AACDrB,EAAAA,OAAO,CAACF,GAAR,CAAY,qBAAZ;AACD;;AAED,SAASW,SAAT,CAAmBnB,MAAnB,EAA2Bc,WAA3B,EAAwC;AACtCJ,EAAAA,OAAO,CAACF,GAAR,CAAY,iBAAZ,EAA+BM,WAA/B;AACA1B,EAAAA,OAAO,CAAC0B,WAAD,CAAP,GAAuB1B,OAAO,CAAC0B,WAAD,CAAP,IAAwB,EAA/C;AACA1B,EAAAA,OAAO,CAAC0B,WAAD,CAAP,CAAqBd,MAAM,CAACiB,EAA5B,IAAkCjB,MAAlC;AAEA,MAAMqB,WAAW,GAAGjC,OAAO,CAAC0B,WAAD,CAA3B,CALsC,CAOtC;;AACA,MAAIQ,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,KAAoC,CAAxC,EAA2C;AACzCC,kBAAKC,gBAAL,CAAsB;AAAEC,MAAAA,GAAG,EAAEb;AAAP,KAAtB,EAA4C;AAAEc,MAAAA,MAAM,EAAE;AAAV,KAA5C,EACGC,IADH,GAEGC,KAFH,CAESC,GAAG,IAAIrB,OAAO,CAACF,GAAR,CAAYuB,GAAZ,CAFhB;AAGD;AACF;;AAED,SAASC,cAAT,CAAwB1C,EAAxB,EAA4B;AAC1B,SAAOmB,IAAI,IAAI;AACb,QAAIA,IAAI,CAACkB,GAAT,EAAc;AACZ,UAAM/B,OAAO,GAAGR,OAAO,CAACqB,IAAI,CAACkB,GAAN,CAAvB;AACA,UAAI,CAAC/B,OAAL,EAAc;AACd0B,MAAAA,MAAM,CAACC,IAAP,CAAY3B,OAAZ,EAAqBqC,OAArB,CAA6BhB,EAAE,IAAI;AACjC,YAAMjB,MAAM,GAAGJ,OAAO,CAACqB,EAAD,CAAtB;AACAP,QAAAA,OAAO,CAACF,GAAR,CAAY,UAAZ,EAAwBC,IAAI,CAACkB,GAA7B,EAAkC,GAAlC,EAAuClB,IAAI,CAACM,IAA5C;AACAf,QAAAA,MAAM,CAACH,IAAP,CAAY,QAAZ,EAAsBY,IAAtB;AACD,OAJD;AAKD,KARD,MAQO;AACLC,MAAAA,OAAO,CAACF,GAAR,CAAY,cAAZ,EAA4BC,IAAI,CAACM,IAAjC;AACAzB,MAAAA,EAAE,CAACO,IAAH,CAAQ,QAAR,EAAkBY,IAAlB;AACD;AACF,GAbD;AAcD;;AAED,SAAShB,cAAT,CAAwBH,EAAxB,EAA4B;AAC1B,MAAM4C,aAAa,GAAGC,oBAAtB;AACA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC1C,EAAD,CAA/B;AACA4C,EAAAA,aAAa,CAACnC,EAAd,CAAiB,aAAjB,EAAgCqC,QAAhC;AACD,C,CAED;;;AACA,SAASvB,SAAT,CAAmBb,MAAnB,EAA2B;AACzB;AACAA,EAAAA,MAAM,CAACD,EAAP,CAAU,MAAV,EAAkBU,IAAI,IAAI;AACxBT,IAAAA,MAAM,CAACQ,GAAP,CAAW6B,IAAI,CAACC,SAAL,CAAe7B,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;AAGD","sourcesContent":["/* eslint no-console: 0 */\nimport socketIo from 'socket.io';\nimport User from 'server/api/user/user.model';\nimport socketEvent from './socketEvent';\n\n// TODO store list of clients in Mongo;\nconst clients = {};\n\nexport default function(server) {\n  const io = socketIo();\n  io.origins(['*:*']);\n  io.attach(server);\n\n  registerEvents(io);\n\n  function sendHeartbeat() {\n    setTimeout(sendHeartbeat, 30000);\n    io.sockets.emit('pingKeepAlive', { beat: 1 });\n  }\n  setTimeout(sendHeartbeat, 30000);\n\n  io.on('connection', socket => {\n    socket.address =\n      socket.request.connection.remoteAddress +\n      ':' +\n      socket.request.connection.remotePort;\n\n    socket.connectedAt = new Date();\n\n    socket.log = (...data) => {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    onConnect(socket, io);\n\n    let currentUser = null;\n    socket.emit('action', { type: 'socketId', payload: socket.id });\n\n    socket.on('pingResponse', () => {\n      // console.log('Pong received from client');\n    });\n\n    socket.on('action', action => {\n      if (action.type === 'server/storeUser') {\n        currentUser = action.payload;\n        addClient(socket, currentUser);\n      }\n      if (action.type === 'server/logout') {\n        currentUser = action.payload;\n        removeClient(socket, currentUser);\n      }\n    });\n\n    socket.on('disconnect', () => {\n      removeClient(socket, currentUser);\n    });\n  });\n}\n\nfunction removeClient(socket, currentUser) {\n  if (!currentUser || !clients[currentUser]) return;\n\n  const userSockets = clients[currentUser];\n  delete userSockets[socket.id];\n\n  if (Object.keys(userSockets).length === 0) {\n    delete clients[currentUser];\n\n    User.findOneAndUpdate({ _id: currentUser }, { online: false })\n      .exec()\n      .catch(err => console.log(err));\n  }\n  console.log('socket disconnected');\n}\n\nfunction addClient(socket, currentUser) {\n  console.log('user connected ', currentUser);\n  clients[currentUser] = clients[currentUser] || {};\n  clients[currentUser][socket.id] = socket;\n\n  const userSockets = clients[currentUser];\n\n  // update online status and send socket\n  if (Object.keys(userSockets).length === 1) {\n    User.findOneAndUpdate({ _id: currentUser }, { online: true })\n      .exec()\n      .catch(err => console.log(err));\n  }\n}\n\nfunction createListener(io) {\n  return data => {\n    if (data._id) {\n      const sockets = clients[data._id];\n      if (!sockets) return;\n      Object.keys(sockets).forEach(id => {\n        const socket = sockets[id];\n        console.log('emit to ', data._id, ' ', data.type);\n        socket.emit('action', data);\n      });\n    } else {\n      console.log('emit to all ', data.type);\n      io.emit('action', data);\n    }\n  };\n}\n\nfunction registerEvents(io) {\n  const eventListener = socketEvent;\n  const listener = createListener(io);\n  eventListener.on('socketEvent', listener);\n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n}\n"],"file":"index.js"}