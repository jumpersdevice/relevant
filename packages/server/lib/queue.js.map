{"version":3,"sources":["../src/queue.js"],"names":["queue","require","relevantEnv","process","env","RELEVANT_ENV","q","concurrency","on","next","job","console","log","toString","replace","updateUserStats","repuatations","CommunityMember","find","forEach","rel","push","cb","date","Date","hour","getHours","day","setUTCHours","endTime","query","user","communityId","set","pagerank","update","$set","$inc","aggregateRelevance","totalSamples","Stats","findOneAndUpdate","new","upsert","setDefaultsOnInsert","Promise","resolve","reject","start","err","updateRepChange","rep","userRep","updateRelevanceRecord","save","community","Community","findOne","slug","_id","debug","updateRewards","ethRewards","rewards","now","getUTCHours","NODE_ENV","exit","module","exports"],"mappings":"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","sourcesContent":["import CommunityMember from 'server/api/community/community.member.model';\nimport computePageRank from 'server/pagerank/pagerankCompute';\nimport Stats from './api/statistics/statistics.model';\nimport Community from './api/community/community.model';\nimport ethRewards from './utils/ethRewards';\n\nconst queue = require('queue');\n\n/* eslint no-console: 0 */\nconst relevantEnv = process.env.RELEVANT_ENV;\n\nconst q = queue({ concurrency: 5 });\n\nq.on('timeout', (next, job) => {\n  console.log('job timed out:', job.toString().replace(/\\n/g, ''));\n  next();\n});\n\nasync function updateUserStats() {\n  const repuatations = await CommunityMember.find({});\n  repuatations.forEach(rel => {\n    q.push(async cb => {\n      const date = new Date();\n      const hour = date.getHours();\n      const day = date.setUTCHours(0, 0, 0, 0);\n      const endTime = day + 24 * 60 * 60 * 1000;\n      const query = {\n        user: rel.user,\n        date: day,\n        endTime,\n        communityId: rel.communityId\n      };\n      const set = {};\n      set['hours.' + hour] = rel.pagerank || 0;\n      const update = {\n        $set: set,\n        $inc: { aggregateRelevance: rel.pagerank, totalSamples: 1 }\n      };\n      await Stats.findOneAndUpdate(query, update, {\n        new: true,\n        upsert: true,\n        setDefaultsOnInsert: true\n      });\n      cb();\n    });\n  });\n\n  return new Promise((resolve, reject) => {\n    q.start(err => (err ? reject(err) : resolve()));\n  });\n}\n\nasync function updateRepChange() {\n  const rep = await CommunityMember.find();\n\n  rep.forEach(userRep =>\n    q.push(async cb => {\n      try {\n        if (userRep.user) {\n          // updates % stats\n          await userRep.updateRelevanceRecord();\n          await userRep.save();\n        }\n      } catch (err) {\n        console.log('error updating topic relevance income ', err);\n      }\n      cb();\n    })\n  );\n\n  return new Promise((resolve, reject) => {\n    q.start(err => (err ? reject(err) : resolve()));\n  });\n}\n\n// eslint-disable-next-line\nasync function pagerank(community) {\n  const communityId = (await Community.findOne({ slug: community }))._id;\n  await computePageRank({ communityId, community, debug: true });\n}\n\nasync function updateRewards() {\n  try {\n    await ethRewards.rewards();\n    console.log('done updating rewards');\n  } catch (err) {\n    console.log(err);\n  }\n\n  try {\n    await updateUserStats();\n    console.log('done updating stats');\n\n    const now = new Date();\n    if (now.getUTCHours() === 14) {\n      await updateRepChange();\n      console.log('done updating rep stats: ');\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  if (relevantEnv === 'staging' || process.env.NODE_ENV === 'native') {\n    return;\n  }\n  process.exit();\n}\n\nif (process.env.NODE_ENV === 'production') {\n  updateRewards();\n}\n\nmodule.exports = {\n  updateUserStats,\n  updateRepChange\n};\n"],"file":"queue.js"}