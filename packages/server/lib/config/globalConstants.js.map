{"version":3,"sources":["../../src/config/globalConstants.js"],"names":["HOURS","DAYS","PAYOUT_FREQUENCY","PAYOUT_FREQUENCY_FRACTION","YEARLY_INFLATION","INTERVAL_INFLAITION","INIT_COIN","SHARE_DECAY","TWITTER_DECAY","PAYOUT_TIME","VOTE_COST_RATIO","SLOPE","EXPONENT","POWER_REGEN_INTERVAL","RELEVANCE_DECAY","RELEVANCE_DECAY_POSTS","REP_CUTOFF","REP_CUTOFF_POSTS","MINIMUM_RANK","PUBLIC_LINK_REWARD","REFERRAL_REWARD","TWITTER_REWARD","EMAIL_REWARD","CASHOUT_LIMIT","CASHOUT_MAX","REDDIT_REWARD","TOKEN_DECIMALS","totalAllowedInvites","pagerank","MAX_AIRDROP","getRewardForType","type","newUserCoins","user","reward","email","confirmed","twitterId","BANNED_COMMUNITY_SLUGS","BANNED_USER_HANDLES","userVotePower","Math","round","sqrt"],"mappings":";;;;;;AAAO,IAAMA,KAAK,GAAG,KAAK,EAAL,GAAU,IAAxB;;AACA,IAAMC,IAAI,GAAGD,KAAK,GAAG,EAArB;;AACA,IAAME,gBAAgB,GAAG,IAAIF,KAA7B,C,CAAoC;;;AACpC,IAAMG,yBAAyB,GAAG,KAAK,MAAM,EAAX,CAAlC,C,CAAkD;;;AAClD,IAAMC,gBAAgB,GAAG,GAAzB,C,CAA8B;;;AAC9B,IAAMC,mBAAmB,GAC9B,CAAC,IAAID,gBAAL,KAA0BD,yBAA1B,GAAsD,CADjD;;AAEA,IAAMG,SAAS,GAAG,OAAlB;;AACA,IAAMC,WAAW,GAAG,IAAIN,IAAxB,C,CAA8B;;;AAE9B,IAAMO,aAAa,GAAG,KAAKR,KAA3B,C,CAAkC;;;AAElC,IAAMS,WAAW,GAAG,IAAIR,IAAxB,C,CAA8B;;;AAC9B,IAAMS,eAAe,GAAG,GAAxB,C,CAA6B;AACpC;;;AAEO,IAAMC,KAAK,GAAG,IAAI,CAAlB,C,CAAqB;;;AACrB,IAAMC,QAAQ,GAAG,CAAjB,C,CAAoB;;;AACpB,IAAMC,oBAAoB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA5C,C,CAAkD;;;AAElD,IAAMC,eAAe,GAAG,KAAKb,IAA7B,C,CAAmC;;;AACnC,IAAMc,qBAAqB,GAAG,KAAKd,IAAnC,C,CAAyC;;;AACzC,IAAMe,UAAU,GAAG,CAAnB,C,CAAsB;;;AACtB,IAAMC,gBAAgB,GAAG,KAAKhB,IAA9B,C,CAAoC;;;AAEpC,IAAMiB,YAAY,GAAG,CAArB,C,CAAwB;;;AAExB,IAAMC,kBAAkB,GAAG,CAA3B,C,CAA8B;;;AAC9B,IAAMC,eAAe,GAAG,EAAxB,C,CAA4B;;;AAC5B,IAAMC,cAAc,GAAG,EAAvB,C,CAA2B;;;AAC3B,IAAMC,YAAY,GAAG,EAArB,C,CAAyB;AAEhC;;;AACO,IAAMC,aAAa,GAAG,CAAtB,C,CAAyB;;;AACzB,IAAMC,WAAW,GAAG,IAApB;;AAEA,IAAMC,aAAa,GAAG,CAAtB;;AACA,IAAMC,cAAc,GAAG,IAAvB;;;AAEA,IAAMC,mBAAmB,GAAGC,QAAQ,IAAI;AAC7C,MAAIA,QAAQ,GAAG,CAAf,EAAkB,OAAO,CAAP;AAClB,MAAIA,QAAQ,GAAG,CAAf,EAAkB,OAAO,CAAP;AAClB,MAAIA,QAAQ,GAAG,CAAf,EAAkB,OAAO,CAAP;AAClB,MAAIA,QAAQ,GAAG,EAAf,EAAmB,OAAO,CAAP;AACnB,MAAIA,QAAQ,GAAG,EAAf,EAAmB,OAAO,CAAP;AACnB,MAAIA,QAAQ,GAAG,EAAf,EAAmB,OAAO,EAAP;AACnB,MAAIA,QAAQ,GAAG,EAAf,EAAmB,OAAO,EAAP;AACnB,MAAIA,QAAQ,GAAG,EAAf,EAAmB,OAAO,EAAP;AACnB,SAAO,GAAP;AACD,CAVM;;;AAYA,IAAMC,WAAW,GAAG,GAApB;;;AAEA,IAAMC,gBAAgB,GAAGC,IAAI,IAAI;AACtC,UAAQA,IAAR;AACE,SAAK,QAAL;AACE,aAAON,aAAP;;AACF,SAAK,OAAL;AACE,aAAOH,YAAP;;AACF,SAAK,SAAL;AACE,aAAOD,cAAP;;AACF,SAAK,UAAL;AACE,aAAOD,eAAP;;AACF,SAAK,YAAL;AACE,aAAOA,eAAP;;AACF,SAAK,YAAL;AACA,SAAK,cAAL;AACE,aAAOD,kBAAP;;AACF;AACE,aAAO,CAAP;AAfJ;AAiBD,CAlBM;;;;AAoBA,IAAMa,YAAY,GAAGC,IAAI,IAAI;AAClC,MAAIC,MAAM,GAAG,CAAb;AACA,MAAID,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,SAAvB,EAAkCF,MAAM,GAAGZ,YAAT;AAClC,MAAIW,IAAI,CAACI,SAAT,EAAoBH,MAAM,GAAGZ,YAAY,GAAGD,cAAxB;AACpB,SAAOa,MAAP;AACD,CALM;;;AAOA,IAAMI,sBAAsB,GAAG,CACpC,OADoC,EAEpC,MAFoC,EAGpC,SAHoC,EAIpC,MAJoC,EAKpC,MALoC,EAMpC,SANoC,EAOpC,aAPoC,EAQpC,eARoC,EASpC,SAToC,CAA/B;;AAYA,IAAMC,mBAAmB,GAAG,CACjC,GAAGD,sBAD8B,EAEjC,UAFiC,EAGjC,OAHiC,EAIjC,KAJiC,EAKjC,QALiC,CAA5B;;;AAQA,IAAME,aAAa,GAAGZ,QAAQ,IAAIa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAU,IAAIf,QAAQ,GAAG,CAAzB,CAAX,CAAlC","sourcesContent":["export const HOURS = 60 * 60 * 1000;\nexport const DAYS = HOURS * 24;\nexport const PAYOUT_FREQUENCY = 1 * HOURS; // how often we compute payouts\nexport const PAYOUT_FREQUENCY_FRACTION = 1 / (365 * 24); // fraction of year\nexport const YEARLY_INFLATION = 0.1; // 10%\nexport const INTERVAL_INFLAITION =\n  (1 + YEARLY_INFLATION) ** PAYOUT_FREQUENCY_FRACTION - 1;\nexport const INIT_COIN = 1000000;\nexport const SHARE_DECAY = 6 * DAYS; // time it takes to decay payout post shares\n\nexport const TWITTER_DECAY = 12 * HOURS; // time it takes to decay payout post shares\n\nexport const PAYOUT_TIME = 3 * DAYS; // time it takes for post to pay out\nexport const VOTE_COST_RATIO = 0.1; // votes cost 10% of user balance\n// export const NEW_USER_COINS = 20; // amount of coins new users get\n\nexport const SLOPE = 1 / 1; // slope of bonding curve for posts\nexport const EXPONENT = 1; // exponent for bonding curve price formula\nexport const POWER_REGEN_INTERVAL = 24 * 60 * 60 * 1000; // 1 day to fully regenerate vote power\n\nexport const RELEVANCE_DECAY = 90 * DAYS; // half life of relevance\nexport const RELEVANCE_DECAY_POSTS = 90 * DAYS; // half life of relevance\nexport const REP_CUTOFF = 2; // number of years before we ignore votes for users\nexport const REP_CUTOFF_POSTS = 90 * DAYS; // time before we ignore votes for posts\n\nexport const MINIMUM_RANK = 1; // minimum rank to be considered for rewards\n\nexport const PUBLIC_LINK_REWARD = 5; // amount of tokens you get for public referral\nexport const REFERRAL_REWARD = 20; // amount of tokens awarded both the referrer and referee\nexport const TWITTER_REWARD = 20; // amount of tokens awarded for connecting twitter\nexport const EMAIL_REWARD = 20; // amount of tokens awarded for connecting email\n\n// TODO: Deprecate CASHOUT_LIMIT\nexport const CASHOUT_LIMIT = 0; // amount of tokens one needs to earn to cash out\nexport const CASHOUT_MAX = 1000;\n\nexport const REDDIT_REWARD = 5;\nexport const TOKEN_DECIMALS = 1e18;\n\nexport const totalAllowedInvites = pagerank => {\n  if (pagerank < 1) return 0;\n  if (pagerank < 3) return 1;\n  if (pagerank < 5) return 2;\n  if (pagerank < 10) return 3;\n  if (pagerank < 20) return 8;\n  if (pagerank < 40) return 13;\n  if (pagerank < 60) return 23;\n  if (pagerank < 80) return 33;\n  return 100;\n};\n\nexport const MAX_AIRDROP = 300;\n\nexport const getRewardForType = type => {\n  switch (type) {\n    case 'reddit':\n      return REDDIT_REWARD;\n    case 'email':\n      return EMAIL_REWARD;\n    case 'twitter':\n      return TWITTER_REWARD;\n    case 'referral':\n      return REFERRAL_REWARD;\n    case 'referredBy':\n      return REFERRAL_REWARD;\n    case 'publicLink':\n    case 'publicInvite':\n      return PUBLIC_LINK_REWARD;\n    default:\n      return 0;\n  }\n};\n\nexport const newUserCoins = user => {\n  let reward = 0;\n  if (user.email && user.confirmed) reward = EMAIL_REWARD;\n  if (user.twitterId) reward = EMAIL_REWARD + TWITTER_REWARD;\n  return reward;\n};\n\nexport const BANNED_COMMUNITY_SLUGS = [\n  'admin',\n  'user',\n  'channel',\n  'home',\n  'auth',\n  'profile',\n  'communities',\n  'subscriptions',\n  'graphql'\n];\n\nexport const BANNED_USER_HANDLES = [\n  ...BANNED_COMMUNITY_SLUGS,\n  'everyone',\n  'group',\n  'all',\n  'invite'\n];\n\nexport const userVotePower = pagerank => Math.round(Math.sqrt(1 + pagerank * 4));\n"],"file":"globalConstants.js"}