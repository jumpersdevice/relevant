{"version":3,"sources":["../../src/notifications/emailPushNotifications.js"],"names":["sendEmail","require","inlineCss","notificationStyle","User","getUrls","handleEmailNotifications","params","toUser","ensureUserEamil","emailNotificationIsEnabled","html","subject","getHtml","data","from","to","email","err","console","log","urls","noteType","getNewPostHtml","getRewardHtml","getDefaultEmailHtml","user","notificationSettings","findOne","_id","Error","isPersonal","personal","general","fromUser","post","action","userUrl","postUrl","settingsUrl","noteHtml","name","isReplyOrMention","body","title","url","community","fromHtml","postHtml","walletUrl","process","env","API_SERVER","toLowerCase","replace"],"mappings":";;;;;;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,iBAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAwBF,OAAO,uBAArC;;AACA,MAAMG,IAAI,GAAGH,OAAO,0BAApB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAcJ,OAAO,wBAA3B;;AAEO,eAAeK,wBAAf,CAAwCC,MAAxC,EAAgD;AACrD,MAAI;AACFA,IAAAA,MAAM,CAACC,MAAP,GAAgB,MAAMC,eAAe,CAACF,MAAM,CAACC,MAAR,CAArC;AACA,QAAI,CAACD,MAAM,CAACC,MAAZ,EAAoB,OAAO,IAAP;AACpB,QAAI,CAACE,0BAA0B,CAACH,MAAD,CAA/B,EAAyC,OAAO,IAAP;AAEzC,UAAM;AAAEI,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoB,MAAMC,OAAO,CAACN,MAAD,CAAvC;AAEA,UAAMO,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAE,oCADK;AAEXC,MAAAA,EAAE,EAAET,MAAM,CAACC,MAAP,CAAcS,KAFP;AAGXL,MAAAA,OAHW;AAIXD,MAAAA;AAJW,KAAb;AAMA,WAAOX,SAAS,CAACc,IAAD,CAAhB;AACD,GAdD,CAcE,OAAOI,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAP,CADY,CACa;AAC1B;AACF;;AAED,eAAeL,OAAf,CAAuBN,MAAvB,EAA+B;AAC7BA,EAAAA,MAAM,CAACc,IAAP,GAAchB,OAAO,CAACE,MAAD,CAArB;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAef,MAArB;;AACA,UAAQe,QAAR;AACE,SAAK,SAAL;AACE,aAAOC,cAAc,CAAChB,MAAD,CAArB;;AACF,SAAK,QAAL;AACE,aAAOiB,aAAa,CAACjB,MAAD,CAApB;;AACF;AACE,aAAOkB,mBAAmB,CAAClB,MAAD,CAA1B;AANJ;AAQD;;AAED,eAAeE,eAAf,CAA+BiB,IAA/B,EAAqC;AACnC,MAAIA,IAAI,CAACT,KAAL,IAAcS,IAAI,CAACC,oBAAvB,EAA6C,OAAOD,IAAP;AAC7CA,EAAAA,IAAI,GAAG,MAAMtB,IAAI,CAACwB,OAAL,CAAa;AAAEC,IAAAA,GAAG,EAAEH,IAAI,CAACG;AAAZ,GAAb,EAAgC,QAAhC,CAAb;AACA,MAAI,CAACH,IAAI,CAACT,KAAV,EAAiB,MAAM,IAAIa,KAAJ,CAAU,uBAAV,CAAN;AACjB,SAAOJ,IAAP;AACD;;AAED,SAAShB,0BAAT,CAAoC;AAAEY,EAAAA,QAAF;AAAYd,EAAAA;AAAZ,CAApC,EAA0D;AACxD,QAAMuB,UAAU,GACdT,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,OAAtC,IAAiDA,QAAQ,KAAK,SADhE;;AAEA,MAAIS,UAAU,IAAIvB,MAAM,CAACmB,oBAAP,CAA4BV,KAA5B,CAAkCe,QAApD,EAA8D;AAC5D,WAAO,IAAP;AACD;;AACD,MAAI,CAACD,UAAD,IAAevB,MAAM,CAACmB,oBAAP,CAA4BV,KAA5B,CAAkCgB,OAArD,EAA8D;AAC5D,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAED,eAAeR,mBAAf,CAAmC;AAAEJ,EAAAA,IAAF;AAAQa,EAAAA,QAAR;AAAkBC,EAAAA,IAAlB;AAAwB3B,EAAAA,MAAxB;AAAgC4B,EAAAA,MAAhC;AAAwCd,EAAAA;AAAxC,CAAnC,EAAuF;AACrF,QAAM;AAAEe,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAoClB,IAA1C;AAEA,QAAMmB,QAAQ,GAAGN,QAAQ,GACpB,YAAWG,OAAQ,KAAIH,QAAQ,CAACO,IAAK,QAAOL,MAAO,EAD/B,GAErBA,MAFJ;AAGA,QAAMxB,OAAO,GAAGsB,QAAQ,GAAI,GAAEA,QAAQ,CAACO,IAAK,IAAGL,MAAO,EAA9B,GAAkCA,MAA1D;AAEA,QAAMM,gBAAgB,GAAGpB,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,SAA9D;AAEA,MAAIX,IAAI,GAAI;;MAERH,MAAM,CAACiC,IAAK,KAAIC,gBAAgB,GAAG,6BAAH,GAAmCF,QAAS;;;;QAI1EE,gBAAgB,GAAG,uBAAuBF,QAAvB,GAAkC,QAArC,GAAgD,EAAG;8BAC7CF,OAAQ;UAC5BH,IAAI,CAACQ,IAAL,IAAaR,IAAI,CAACS,KAAM;;;;;iFAK+CL,WAAY;KAb3F;AAgBA5B,EAAAA,IAAI,GAAG,MAAMT,SAAS,CAACC,iBAAiB,GAAGQ,IAArB,EAA2B;AAAEkC,IAAAA,GAAG,EAAE;AAAP,GAA3B,CAAtB;AAEA,SAAO;AAAElC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD;;AAED,eAAeW,cAAf,CAA8B;AAAEF,EAAAA,IAAF;AAAQa,EAAAA,QAAR;AAAkB1B,EAAAA,MAAlB;AAA0B4B,EAAAA,MAA1B;AAAkCU,EAAAA;AAAlC,CAA9B,EAA6E;AAC3E,QAAM;AAAET,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAoClB,IAA1C;AAEA,QAAM0B,QAAQ,GAAI,YAAWV,OAAQ,KAAIH,QAAQ,CAACO,IAAK,MAAvD;AACA,QAAMO,QAAQ,GAAI,YAAWV,OAAQ,YAArC;AAEA,QAAME,QAAQ,GAAI,kBAAiBQ,QAAS,SAAQD,QAAS,WAAUD,SAAU,YAAjF;AACA,QAAMlC,OAAO,GAAGwB,MAAhB;AAEA,MAAIzB,IAAI,GAAI;;MAERH,MAAM,CAACiC,IAAK,KAAID,QAAS;;;iFAGkDD,WAAY;KAL3F;AAQA5B,EAAAA,IAAI,GAAG,MAAMT,SAAS,CAACC,iBAAiB,GAAGQ,IAArB,EAA2B;AAAEkC,IAAAA,GAAG,EAAE;AAAP,GAA3B,CAAtB;AACA,SAAO;AAAElC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD;;AAED,eAAeY,aAAf,CAA6B;AAAEH,EAAAA,IAAF;AAAQb,EAAAA,MAAR;AAAgB4B,EAAAA;AAAhB,CAA7B,EAAuD;AACrD,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BlB,IAAjC;AAEA,QAAM4B,SAAS,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,cAA5C;AAEA,QAAMJ,QAAQ,GAAI,YAAWV,OAAQ,YAArC;AACA,QAAME,QAAQ,GAAGJ,MAAM,CAACiB,WAAP,GAAqBC,OAArB,CAA6B,MAA7B,EAAqCN,QAArC,CAAjB;AACA,QAAMpC,OAAO,GAAGwB,MAAhB;AAEA,MAAIzB,IAAI,GAAI;;MAERH,MAAM,CAACiC,IAAK,KAAID,QAAS;;;wDAGyBS,SAAU;;;iFAGeV,WAAY;KAR3F;AAWA5B,EAAAA,IAAI,GAAG,MAAMT,SAAS,CAACC,iBAAiB,GAAGQ,IAArB,EAA2B;AAAEkC,IAAAA,GAAG,EAAE;AAAP,GAA3B,CAAtB;AACA,SAAO;AAAElC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD","sourcesContent":["const { sendEmail } = require('server/utils/mail');\nconst inlineCss = require('inline-css');\nconst { notificationStyle } = require('server/utils/emailStyle');\nconst User = require('server/api/user/user.model');\nconst { getUrls } = require('./notificationHelper');\n\nexport async function handleEmailNotifications(params) {\n  try {\n    params.toUser = await ensureUserEamil(params.toUser);\n    if (!params.toUser) return null;\n    if (!emailNotificationIsEnabled(params)) return null;\n\n    const { html, subject } = await getHtml(params);\n\n    const data = {\n      from: 'Relevant <info@relevant.community>',\n      to: params.toUser.email,\n      subject,\n      html\n    };\n    return sendEmail(data);\n  } catch (err) {\n    return console.log(err); // eslint-disable-line\n  }\n}\n\nasync function getHtml(params) {\n  params.urls = getUrls(params);\n  const { noteType } = params;\n  switch (noteType) {\n    case 'newPost':\n      return getNewPostHtml(params);\n    case 'reward':\n      return getRewardHtml(params);\n    default:\n      return getDefaultEmailHtml(params);\n  }\n}\n\nasync function ensureUserEamil(user) {\n  if (user.email && user.notificationSettings) return user;\n  user = await User.findOne({ _id: user._id }, '+email');\n  if (!user.email) throw new Error('user is missing email');\n  return user;\n}\n\nfunction emailNotificationIsEnabled({ noteType, toUser }) {\n  const isPersonal =\n    noteType === 'reward' || noteType === 'reply' || noteType === 'mention';\n  if (isPersonal && toUser.notificationSettings.email.personal) {\n    return true;\n  }\n  if (!isPersonal && toUser.notificationSettings.email.general) {\n    return true;\n  }\n  return false;\n}\n\nasync function getDefaultEmailHtml({ urls, fromUser, post, toUser, action, noteType }) {\n  const { userUrl, postUrl, settingsUrl } = urls;\n\n  const noteHtml = fromUser\n    ? `<a href=\"${userUrl}\">${fromUser.name}</a> ${action}`\n    : action;\n  const subject = fromUser ? `${fromUser.name} ${action}` : action;\n\n  const isReplyOrMention = noteType === 'reply' || noteType === 'mention';\n\n  let html = `\n    <br/>\n    ${toUser.name}, ${isReplyOrMention ? 'you have a new notification' : noteHtml}:\n    <br />\n    <br />\n    <div class=\"post\" />\n      ${isReplyOrMention ? '<div class=\"head\">' + noteHtml + '</div>' : ''}\n      <a class=\"body\" href=\"${postUrl}\">\n        ${post.body || post.title}\n      </a>\n    </div>\n    <br />\n    <br />\n    <p class='footer'>You can adjust your email notification settings <a href=\"${settingsUrl}\">here</a></p>\n    `;\n\n  html = await inlineCss(notificationStyle + html, { url: 'https://relevant.community' });\n\n  return { html, subject };\n}\n\nasync function getNewPostHtml({ urls, fromUser, toUser, action, community }) {\n  const { userUrl, postUrl, settingsUrl } = urls;\n\n  const fromHtml = `<a href=\"${userUrl}\">${fromUser.name}</a>`;\n  const postHtml = `<a href=\"${postUrl}\">post</a>`;\n\n  const noteHtml = `there is a new ${postHtml} from ${fromHtml} in the ${community} community`;\n  const subject = action;\n\n  let html = `\n    <br/>\n    ${toUser.name}, ${noteHtml}\n    <br />\n    <br />\n    <p class='footer'>You can adjust your email notification settings <a href=\"${settingsUrl}\">here</a></p>\n    `;\n\n  html = await inlineCss(notificationStyle + html, { url: 'https://relevant.community' });\n  return { html, subject };\n}\n\nasync function getRewardHtml({ urls, toUser, action }) {\n  const { postUrl, settingsUrl } = urls;\n\n  const walletUrl = `${process.env.API_SERVER}/user/wallet`;\n\n  const postHtml = `<a href=\"${postUrl}\">post</a>`;\n  const noteHtml = action.toLowerCase().replace('post', postHtml);\n  const subject = action;\n\n  let html = `\n    <br/>\n    ${toUser.name}, ${noteHtml}\n    <br />\n    <br />\n    You can see all of your earnings in your <a href=\"${walletUrl}\">wallet</a>.\n    <br />\n    <br />\n    <p class='footer'>You can adjust your email notification settings <a href=\"${settingsUrl}\">here</a></p>\n    `;\n\n  html = await inlineCss(notificationStyle + html, { url: 'https://relevant.community' });\n  return { html, subject };\n}\n"],"file":"emailPushNotifications.js"}