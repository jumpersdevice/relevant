{"version":3,"sources":["../../src/notifications/webPushNotifications.js"],"names":["User","require","webPush","getUrls","process","env","NODE_ENV","initWebPush","setVapidDetails","VAPID_PUBLIC_KEY","VAPID_PRIVATE_KEY","err","exports","handleWebNotifications","params","toUser","user","userObj","toObject","notificationSettings","desktopSubscriptions","findOne","_id","desktop","all","length","postUrl","payload","title","alert","url","icon","body","post","options","processed","map","subscription","sendNotification","JSON","stringify","Promise","console","log"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,0BAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcF,OAAO,wBAA3B;;AAEA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCC,EAAAA,WAAW;AACZ;;AAED,SAASA,WAAT,GAAuB;AACrB,MAAI;AACFL,IAAAA,OAAO,CAACM,eAAR,CACE,6BADF,EAEEJ,OAAO,CAACC,GAAR,CAAYI,gBAFd,EAGEL,OAAO,CAACC,GAAR,CAAYK,iBAHd;AAKD,GAND,CAME,OAAOC,GAAP,EAAY,CACZ;AACD;AACF;;AAEDC,OAAO,CAACC,sBAAR,GAAiC,MAAMC,MAAN,IAAgB;AAC/C,MAAI;AACF,QAAI;AAAEC,MAAAA,MAAM,EAAEC;AAAV,QAAmBF,MAAvB;AAEA,UAAMG,OAAO,GAAGD,IAAI,CAACE,QAAL,EAAhB;;AACA,QAAI,CAACD,OAAO,CAACE,oBAAT,IAAiC,CAACF,OAAO,CAACG,oBAA9C,EAAoE;AAClEJ,MAAAA,IAAI,GAAG,MAAMhB,IAAI,CAACqB,OAAL,CACX;AAAEC,QAAAA,GAAG,EAAEN,IAAI,CAACM;AAAZ,OADW,EAEX,2CAFW,CAAb;AAID;;AACD,QACE,CAACN,IAAI,CAACG,oBAAL,CAA0BI,OAA1B,CAAkCC,GAAnC,IACA,CAACR,IAAI,CAACI,oBADN,IAEA,CAACJ,IAAI,CAACI,oBAAL,CAA0BK,MAH7B,EAIE;AACA;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAcvB,OAAO,CAACW,MAAD,CAA3B;AAEA,UAAMa,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAEd,MAAM,CAACe,KADA;AAEdC,MAAAA,GAAG,EAAEJ,OAFS;AAGdK,MAAAA,IAAI,EAAE,4BAHQ;AAIdC,MAAAA,IAAI,EAAElB,MAAM,CAACmB,IAAP,GAAcnB,MAAM,CAACmB,IAAP,CAAYD,IAAZ,IAAoBlB,MAAM,CAACmB,IAAP,CAAYL,KAA9C,GAAsD;AAJ9C,KAAhB;AAOA,UAAMM,OAAO,GAAG,EAAhB;AACA,UAAMC,SAAS,GAAGnB,IAAI,CAACI,oBAAL,CAA0BgB,GAA1B,CAA8BC,YAAY,IAC1DnC,OAAO,CAACoC,gBAAR,CAAyBD,YAAzB,EAAuCE,IAAI,CAACC,SAAL,CAAeb,OAAf,CAAvC,EAAgEO,OAAhE,CADgB,CAAlB;AAGA,UAAMO,OAAO,CAACjB,GAAR,CAAYW,SAAZ,CAAN;AACD,GAhCD,CAgCE,OAAOxB,GAAP,EAAY;AACZ;AACA+B,IAAAA,OAAO,CAACC,GAAR,CAAYhC,GAAZ,EAFY,CAEM;AACnB;AACF,CArCD","sourcesContent":["const User = require('server/api/user/user.model');\nconst webPush = require('web-push');\nconst { getUrls } = require('./notificationHelper');\n\nif (process.env.NODE_ENV !== 'test') {\n  initWebPush();\n}\n\nfunction initWebPush() {\n  try {\n    webPush.setVapidDetails(\n      'https://relevant.community/',\n      process.env.VAPID_PUBLIC_KEY,\n      process.env.VAPID_PRIVATE_KEY\n    );\n  } catch (err) {\n    // console.log(err); // eslint-disable-line\n  }\n}\n\nexports.handleWebNotifications = async params => {\n  try {\n    let { toUser: user } = params;\n\n    const userObj = user.toObject();\n    if (!userObj.notificationSettings || !userObj.desktopSubscriptions) {\n      user = await User.findOne(\n        { _id: user._id },\n        'notificationSettings desktopSubscriptions'\n      );\n    }\n    if (\n      !user.notificationSettings.desktop.all ||\n      !user.desktopSubscriptions ||\n      !user.desktopSubscriptions.length\n    ) {\n      return;\n    }\n\n    const { postUrl } = getUrls(params);\n\n    const payload = {\n      title: params.alert,\n      url: postUrl,\n      icon: '/img/default_community.png',\n      body: params.post ? params.post.body || params.post.title : null\n    };\n\n    const options = {};\n    const processed = user.desktopSubscriptions.map(subscription =>\n      webPush.sendNotification(subscription, JSON.stringify(payload), options)\n    );\n    await Promise.all(processed);\n  } catch (err) {\n    // TODO remove failed or expired notifications\n    console.log(err); // eslint-disable-line\n  }\n};\n"],"file":"webPushNotifications.js"}