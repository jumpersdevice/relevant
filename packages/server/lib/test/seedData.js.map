{"version":3,"sources":["../../src/test/seedData.js"],"names":["userInstances","communityInstances","postInstances","getUsers","getPosts","getCommunities","setupTestData","setupCommunities","setupUsers","setupMembers","setupPosts","setupVotes","link1","Post","linkPost1","save","addPostData","altCommunity","insertIntoFeed","communityId","link2","linkPost2","link3","linkPost3","link4","linkPost4","link5","linkPost5","post1","link","postI1","addToFeed","map","p","upsertMetaPost","undefined","toObject","Promise","all","users","allUsers","_user","relevance","user","User","alice","find","u","handle","bob","carol","communities","allCommunities","_community","community","Community","relevant","c","slug","crypto","join","_id","votes","Invest","investor","author","amount","ownPost","v"],"mappings":"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","sourcesContent":["import Post from 'server/api/post/post.model'; // eslint-disable-line\nimport PostData from 'server/api/post/postData.model'; // eslint-disable-line\nimport CommunityMember from 'server/api/community/community.member.model'; // eslint-disable-line\nimport Earnings from 'server/api/earnings/earnings.model'; // eslint-disable-line\nimport CommunityFeed from 'server/api/communityFeed/communityFeed.model'; // eslint-disable-line\nimport Treasury from 'server/api/treasury/treasury.model'; // eslint-disable-line\nimport Link from 'server/api/post/link.model'; // eslint-disable-line\n\nimport Invest from 'server/api/invest/invest.model';\nimport Community from 'server/api/community/community.model';\nimport User from 'server/api/user/user.model';\n\nimport {\n  post1,\n  linkPost1,\n  linkPost2,\n  linkPost3,\n  linkPost4,\n  linkPost5\n} from 'app/mockdata/post';\nimport { allUsers } from 'app/mockdata/user';\nimport { allCommunities } from 'app/mockdata/community';\n\nlet userInstances = {};\nlet communityInstances = {};\nlet postInstances = {};\n\nexport function getUsers() {\n  return userInstances;\n}\nexport function getPosts() {\n  return postInstances;\n}\nexport function getCommunities() {\n  return communityInstances;\n}\n\nexport async function setupTestData() {\n  await setupCommunities();\n  await setupUsers();\n  await setupMembers();\n  await setupPosts();\n  await setupVotes();\n}\n\nasync function setupPosts() {\n  let link1 = new Post(linkPost1);\n  await link1.save();\n  link1 = await link1.addPostData();\n\n  // cross-post link1 to crypto community\n  await link1.addPostData({ ...linkPost1, ...linkPost1.altCommunity });\n  link1.insertIntoFeed(linkPost1.communityId);\n\n  let link2 = new Post(linkPost2);\n  await link2.save();\n  link2 = await link2.addPostData();\n\n  let link3 = new Post(linkPost3);\n  await link3.save();\n  link3 = await link3.addPostData();\n\n  let link4 = new Post(linkPost4);\n  await link4.save();\n  link4 = await link4.addPostData();\n\n  let link5 = new Post(linkPost5);\n  await link5.save();\n  link5 = await link5.addPostData();\n\n  delete post1.link;\n  let postI1 = new Post(post1);\n  await postI1.save();\n  postI1 = await postI1.addPostData();\n\n  const addToFeed = [link1, link2, link3, link4, link5].map(async p => {\n    await p.upsertMetaPost(undefined, p.toObject());\n    return p.insertIntoFeed(p.communityId);\n  });\n\n  await Promise.all(addToFeed);\n\n  postInstances = { postI1, link1, link2, link3, link4, link5 };\n}\n\nasync function setupUsers() {\n  let users = allUsers.map(async _user => {\n    delete _user.relevance;\n    const user = new User(_user);\n    return user.save();\n  });\n  users = await Promise.all(users);\n  const alice = users.find(u => u.handle === 'alice');\n  const bob = users.find(u => u.handle === 'bob');\n  const carol = users.find(u => u.handle === 'carol');\n  return (userInstances = { alice, bob, carol });\n}\n\nasync function setupCommunities() {\n  let communities = allCommunities.map(async _community => {\n    const community = new Community(_community);\n    return community.save();\n  });\n  communities = await Promise.all(communities);\n  const relevant = communities.find(c => c.slug === 'relevant');\n  const crypto = communities.find(c => c.slug === 'crypto');\n  return (communityInstances = { relevant, crypto });\n}\n\nasync function setupMembers() {\n  const { relevant, crypto } = communityInstances;\n  const { alice, bob, carol } = userInstances;\n\n  await relevant.join(alice._id, 'admin');\n  await relevant.join(bob._id);\n  await relevant.join(carol._id);\n\n  await crypto.join(alice._id, 'admin');\n  await crypto.join(bob._id);\n}\n\nexport async function setupVotes() {\n  const { relevant, crypto } = communityInstances;\n  const { alice, bob, carol } = userInstances;\n  const votes = [];\n  votes[0] = new Invest({\n    investor: alice._id,\n    author: bob._id,\n    amount: 1,\n    ownPost: false,\n    communityId: relevant._id,\n    community: relevant.slug\n  });\n\n  votes[1] = new Invest({\n    investor: alice._id,\n    author: bob._id,\n    amount: 1,\n    ownPost: false,\n    communityId: crypto._id,\n    community: crypto.slug\n  });\n\n  votes[2] = new Invest({\n    investor: alice._id,\n    author: carol._id,\n    amount: 1,\n    ownPost: false,\n    communityId: relevant._id,\n    community: relevant.slug\n  });\n\n  votes[3] = new Invest({\n    investor: alice._id,\n    author: bob._id,\n    amount: 1,\n    ownPost: false,\n    communityId: crypto._id,\n    community: crypto.slug\n  });\n\n  return Promise.all(votes.map(v => v.save()));\n}\n"],"file":"seedData.js"}