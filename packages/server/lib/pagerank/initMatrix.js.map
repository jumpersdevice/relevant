{"version":3,"sources":["../../src/pagerank/initMatrix.js"],"names":["ADMIN_MAX_POWER_VOTES","initMatrix","nodes","params","nodeIds","Object","keys","dictionary","forEach","key","i","N","length","g","danglingNodes","degreeStore","personalization","nodeId","node","degree","push","customWeight","adminWeight","Math","E","inputs","id","w","d","danglingInputs","dNode","danglingId","danglingConsumer","debug","console","log","heapUsed","process","memoryUsage","mb","round"],"mappings":"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","sourcesContent":["const ADMIN_MAX_POWER_VOTES = 50;\n\nexport default function initMatrix(nodes, params) {\n  const nodeIds = Object.keys(nodes);\n\n  const dictionary = {};\n  nodeIds.forEach((key, i) => (dictionary[key] = i));\n  const N = nodeIds.length;\n  const g = {};\n  const danglingNodes = [];\n  const degreeStore = {};\n  const personalization = {};\n\n  nodeIds.forEach((nodeId, i) => {\n    const node = nodes[nodeId];\n\n    if (!node.degree) danglingNodes.push(i);\n\n    const { degree } = node;\n    degreeStore[nodeId] = degree;\n\n    if (params.personalization[nodeId]) {\n      // this is usually 1 but can be adjusted via custom params\n      const customWeight = params.personalization[nodeId];\n      const adminWeight =\n        customWeight / (1 + Math.E ** (6 - (degree * 10) / ADMIN_MAX_POWER_VOTES));\n      personalization[nodeId] = adminWeight;\n    }\n\n    g[i] = g[i] || { inputs: {} };\n\n    // compute incoming weights for edge targets of el\n    Object.keys(node.inputs).forEach(id => {\n      if (!nodes[id]) return;\n      const w = node.inputs[id];\n      const { degree: d } = nodes[id];\n      // normalize\n      g[i].inputs = g[i].inputs || {};\n      g[i].inputs[dictionary[id]] = w / d;\n    });\n  });\n\n  // add Hypothetical Nodes\n  // Hypothetical Nodes that consumes dangling nodes\n  const danglingInputs = {};\n  danglingNodes.forEach(dNode => (danglingInputs[dNode] = 1));\n\n  const danglingId = dictionary.danglingConsumer;\n  if (g[danglingId]) {\n    g[danglingId].inputs = {\n      [danglingId]: 1,\n      ...danglingInputs\n    };\n  }\n\n  if (params.debug) {\n    console.log('number of nodes', N); // eslint-disable-line\n    const { heapUsed } = process.memoryUsage();\n    const mb = Math.round((100 * heapUsed) / 1048576) / 100;\n    console.log('Matrix - program is using', mb, 'MB of Heap.'); // eslint-disable-line\n  }\n\n  return {\n    g,\n    N,\n    dictionary,\n    danglingNodes,\n    degreeStore,\n    personalization\n  };\n}\n"],"file":"initMatrix.js"}