{"version":3,"sources":["../../src/pagerank/pagerankCompute.js"],"names":["computePageRank","params","debug","communityId","community","Error","heapUsed","process","memoryUsage","mb","Math","round","console","log","now","Date","admins","CommunityMember","find","role","usersWithDefaultWeight","defaultWeight","$gt","comObj","Community","findOne","_id","votes","getVotes","personalization","tranformedAdmins","map","a","userId","embeddedUser","customAdminWeight","relevance","nodes","postNodes","Graph","usersWithDefault","u","getTime","scores","timeLimit","setFullYear","getFullYear","REP_CUTOFF","Invest","createdAt","ownPost","$ne","investor","$exists","populate","path","select","match"],"mappings":"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","sourcesContent":["import Invest from 'server/api/invest/invest.model';\nimport CommunityMember from 'server/api/community/community.member.model';\nimport Community from 'server/api/community/community.model';\nimport { REP_CUTOFF } from 'server/config/globalConstants';\nimport pagerank from './pagerank';\nimport Graph from './graph';\nimport { handleResults } from './handleResults';\n\n/* eslint no-console: 0 */\n\nexport default async function computePageRank(params) {\n  const { debug, communityId, community } = params;\n\n  if (!community) throw new Error('missing community name');\n\n  let { heapUsed } = process.memoryUsage();\n  let mb = Math.round((100 * heapUsed) / 1048576) / 100;\n  debug && console.log('Init PR is using ' + mb + 'MB of Heap.');\n\n  const now = new Date();\n\n  const admins = await CommunityMember.find(\n    { role: 'admin', communityId },\n    'embeddedUser defaultWeight customAdminWeight pagerank pagerankRaw pagerankRawNeg'\n  );\n\n  const usersWithDefaultWeight = await CommunityMember.find(\n    { role: 'user', communityId, defaultWeight: { $gt: 0 } },\n    'embeddedUser customAdminWeight defaultWeight pagerank pagerankRaw pagerankRawNeg'\n  );\n\n  const comObj = await Community.findOne(\n    { _id: communityId },\n    'danglingConsumer negConsumer'\n  );\n\n  const votes = await getVotes(communityId);\n\n  const personalization = {};\n\n  const tranformedAdmins = admins.map(a => {\n    const userId = a.embeddedUser._id;\n    personalization[userId] = a.customAdminWeight || 1;\n    return { ...a.embeddedUser, relevance: a };\n  });\n\n  const { nodes, postNodes } = new Graph({\n    votes,\n    admins: tranformedAdmins,\n    community: comObj,\n    usersWithDefault: usersWithDefaultWeight.map(u => ({\n      ...u.embeddedUser,\n      relevance: u\n    }))\n  });\n\n  if (debug) {\n    heapUsed = process.memoryUsage().heapUsed;\n    mb = Math.round((100 * heapUsed) / 1048576) / 100;\n    console.log('Before PR - using ' + mb + 'MB of Heap.');\n    console.log('user query time ', (new Date().getTime() - now) / 1000 + 's');\n  }\n\n  const scores = pagerank(nodes, {\n    personalization,\n    debug\n  });\n\n  if (debug) {\n    heapUsed = process.memoryUsage().heapUsed;\n    mb = Math.round((100 * heapUsed) / 1048576) / 100;\n    debug && console.log('After PR is using ' + mb + 'MB of Heap.');\n  }\n  await handleResults({ scores, nodes, communityId, debug, postNodes });\n}\n\nasync function getVotes(communityId) {\n  // only look at votes up to a REP_CUTOFF years ago\n  const timeLimit = new Date().setFullYear(new Date().getFullYear() - REP_CUTOFF);\n\n  return Invest.find({\n    communityId,\n    createdAt: { $gt: timeLimit },\n    ownPost: { $ne: true },\n    investor: { $exists: true }\n  })\n    .populate({\n      path: 'investor',\n      select: 'handle',\n      populate: {\n        path: 'relevance',\n        match: { communityId },\n        select: 'pagerank pagerankRaw pagerankRawNeg'\n      }\n    })\n    .populate({\n      path: 'author',\n      select: 'handle',\n      populate: {\n        path: 'relevance',\n        match: { communityId },\n        select: 'pagerank pagerankRaw pagerankRawNeg'\n      }\n    })\n    .populate({\n      path: 'post',\n      select: 'title',\n      populate: {\n        path: 'data',\n        select: 'pagerank pagerankRaw pagerankRawNeg body needsRankUpdate'\n      }\n    });\n}\n"],"file":"pagerankCompute.js"}