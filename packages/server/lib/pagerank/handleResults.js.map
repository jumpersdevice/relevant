{"version":3,"sources":["../../src/pagerank/handleResults.js"],"names":["q","concurrency","IS_TEST","process","env","NODE_ENV","handleResults","scores","nodes","communityId","debug","postNodes","max","secondMax","min","maxPost","minPost","Object","keys","forEach","id","node","isPost","type","isUser","score","Math","rank","degree","adjustedDegree","values","postNode","inputs","inputId","inputNode","d","postDegree","negPosRatio","prevNeg","negDegree","N","length","Community","findOneAndUpdate","_id","maxPostRank","maxUserRank","numberOfElements","danglingConsumer","negConsumer","mergeNegativeNodes","sortedNodes","filter","n","negativeNode","sort","a","b","rankNeg","push","cb","updateItemRank","Promise","resolve","reject","start","err","newNodes","posNode","replace","props","userRank","log","userRankNeg","postRank","postRankNeg","voteWeight","uRank","toFixed","console","handle","title","Number","isNaN","user","CommunityMember","reputation","pagerank","pagerankNeg","pagerankRaw","pagerankRawNeg","new","upsert","post","Post","fields","postData","PostData","needsRankUpdate","data","updateRank"],"mappings":"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","sourcesContent":["import queue from 'queue';\nimport CommunityMember from 'server/api/community/community.member.model';\nimport Post from 'server/api/post/post.model';\nimport PostData from 'server/api/post/postData.model';\nimport Community from 'server/api/community/community.model';\n\nconst q = queue({ concurrency: 10 });\n\nconst IS_TEST = process.env.NODE_ENV === 'test';\n\n/* eslint no-console: 0 */\n\nexport async function handleResults({ scores, nodes, communityId, debug, postNodes }) {\n  let max = 0;\n  let secondMax = 0;\n  const min = 0;\n  let maxPost = 0;\n  const minPost = 0;\n\n  Object.keys(scores).forEach(id => {\n    const node = nodes[id];\n    const isPost = node.type === 'post';\n    const isUser = node.type === 'user';\n\n    const score = scores[id] || 0;\n    if (isPost) maxPost = Math.max(score.rank, maxPost);\n    if (isUser) {\n      secondMax = Math.max(secondMax, Math.min(score.rank, max));\n      max = Math.max(score.rank, max);\n    }\n\n    node.rank = score.rank;\n    node.degree = score.degree; // or node.degree note = for score degree we replace 0\n    node.adjustedDegree = score.degree;\n  });\n\n  Object.values(postNodes).forEach(postNode => {\n    Object.keys(postNode.inputs).forEach(inputId => {\n      const inputNode = nodes[inputId];\n      if (!inputNode) return;\n      if (!inputNode.rank) return;\n      const d = inputNode.degree + inputNode.postDegree;\n\n      // increase degree if a node has any negative rank\n      const negPosRatio = inputNode.prevNeg / inputNode.rank;\n      const negDegree = inputNode.degree * negPosRatio;\n\n      postNode.rank += inputNode.rank / (d + negDegree);\n\n      inputNode.adjustedDegree = d + negDegree;\n      maxPost = Math.max(postNode.rank, maxPost);\n    });\n  });\n\n  const N = Object.keys(nodes).length;\n\n  await Community.findOneAndUpdate(\n    { _id: communityId },\n    {\n      maxPostRank: maxPost || 50,\n      maxUserRank: secondMax || 50,\n      numberOfElements: N,\n      danglingConsumer: nodes.danglingConsumer ? nodes.danglingConsumer.rank : 0,\n      negConsumer: nodes.negConsumer ? nodes.negConsumer.rank : 0\n    }\n  );\n\n  postNodes = mergeNegativeNodes(postNodes);\n  nodes = mergeNegativeNodes(nodes);\n\n  const sortedNodes = [...Object.values(postNodes), ...Object.values(nodes)]\n    .filter(n => !n.negativeNode)\n    .sort((a, b) => a.rank - a.rankNeg - (b.rank - b.rankNeg));\n\n  sortedNodes.forEach(async node => {\n    q.push(async cb => {\n      await updateItemRank({\n        min,\n        max,\n        secondMax,\n        minPost,\n        maxPost,\n        node,\n        N,\n        debug,\n        communityId\n      });\n      cb();\n    });\n  });\n\n  return new Promise((resolve, reject) =>\n    q.start(err => {\n      if (err) reject(err);\n      resolve();\n    })\n  );\n}\n\nfunction mergeNegativeNodes(nodes) {\n  const newNodes = {};\n  Object.values(nodes).forEach(node => {\n    if (node.negativeNode) {\n      const posNode = nodes[node._id.replace('__neg', '')];\n      if (posNode) return;\n      const _id = node._id.replace('__neg', '');\n      newNodes[_id] = {\n        _id,\n        rank: 0,\n        type: 'user',\n        rankNeg: node.rank\n      };\n      return;\n    }\n    const negativeNode = nodes[node._id + '__neg'];\n    node.rankNeg = negativeNode ? negativeNode.rank : 0;\n  });\n\n  return { ...nodes, ...newNodes };\n}\n\nasync function updateItemRank(props) {\n  const { secondMax, maxPost, node, N, debug, communityId } = props;\n  let { min, minPost } = props;\n  min = 0;\n  minPost = 0;\n  let rank;\n  const userRank =\n    Math.min(\n      99,\n      (100 * Math.log(N * (node.rank - min) + 1)) / Math.log(N * (secondMax - min) + 1)\n    ) || 0;\n\n  const userRankNeg =\n    (100 * Math.log(N * (node.rankNeg - min) + 1)) /\n      Math.log(N * (secondMax - min) + 1) || 0;\n\n  const postRank =\n    (100 * Math.log(N * (node.rank - minPost) + 1)) /\n      Math.log(N * (maxPost - minPost) + 1) || 0;\n\n  const postRankNeg =\n    (100 * Math.log(N * (node.rankNeg - minPost) + 1)) /\n      Math.log(N * (maxPost - minPost) + 1) || 0;\n\n  if (node.type === 'post') {\n    rank = postRank - postRankNeg;\n  }\n\n  const voteWeight =\n    (100 * Math.log(N * (node.rank / (1 + node.adjustedDegree) - min) + 1)) /\n      Math.log(N * (secondMax - min) + 1) || 0;\n\n  if (debug) {\n    const uRank = (userRank - userRankNeg).toFixed(2);\n    console.log('name: ', node.handle || node.title || node._id, node._id);\n    console.log(\n      'PageRank',\n      uRank,\n      'pRank',\n      userRank,\n      'pRankNeg',\n      userRankNeg,\n      'weight',\n      voteWeight,\n      'degree',\n      node.adjustedDegree\n    );\n    console.log('-----');\n  }\n\n  if (node.type === 'user') {\n    if (Number.isNaN(rank)) return null;\n    const user = await CommunityMember.findOneAndUpdate(\n      { user: node._id, communityId },\n      {\n        reputation: rank,\n        degree: node.degree,\n        postDegree: node.postDegree,\n        pagerank: userRank,\n        pagerankNeg: userRankNeg,\n        pagerankRaw: node.rank,\n        pagerankRawNeg: node.rankNeg\n      },\n      {\n        new: true,\n        upsert: true\n      }\n    );\n    return user;\n  }\n  if (node.type === 'post') {\n    if (Number.isNaN(rank)) return null;\n    let post = await Post.findOneAndUpdate(\n      { _id: node._id },\n      { pagerank: rank },\n      {\n        new: true,\n        fields: 'pagerank title rank relevance parentPost communityId postDate'\n      }\n    );\n\n    const postData = await PostData.findOneAndUpdate(\n      { post: node._id, communityId },\n      {\n        pagerank: IS_TEST ? rank.toFixed(2) : rank,\n        pagerankRaw: node.rank,\n        pagerankRawNeg: node.rankNeg\n      },\n      {\n        new: true,\n        fields:\n          'pagerank pagerankRaw pagerankRawNeg post rank relevance postDate communityId needsRankUpdate'\n      }\n    );\n\n    if (postData && postData.needsRankUpdate) {\n      postData.needsRankUpdate = false;\n      post.data = postData;\n      post = await post.updateRank({ communityId });\n    }\n\n    return post.data || postData;\n  }\n  return null;\n}\n"],"file":"handleResults.js"}