{"version":3,"sources":["../../../src/api/community/community.model.js"],"names":["Schema","mongoose","CommunitySchema","name","String","slug","type","unique","required","description","channels","topics","ref","image","currentPosts","Number","default","rewardFund","currentShares","topPostShares","postCount","lastRewardFundUpdate","Date","avgTwitterScore","twitterCount","lastTwitterUpdate","maxUserRank","maxPostRank","danglingConsumer","negConsumer","numberOfElements","memberCount","inactive","Boolean","private","hidden","betEnabled","defaultPost","customParams","timestamps","toJSON","virtuals","toObject","virtual","localField","foreignField","index","path","validate","NAME_PATTERN","test","pre","remove","next","members","model","find","community","deleteMany","exec","leave","map","m","user","Promise","all","methods","updateMemeberCount","countDocuments","communityId","_id","save","userId","deleteOne","join","role","dontUpdateCount","superAdmin","findOne","Error","member","embeddedUser","reputation","memberEvent","payload","socketEvent","emit","setCustomParams","params"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { NAME_PATTERN } from 'app/utils/text';\nimport socketEvent from 'server/socket/socketEvent';\n\nconst { Schema } = mongoose;\n\nconst CommunitySchema = new Schema(\n  {\n    name: String,\n    slug: { type: String, unique: true, required: true },\n    description: String,\n    channels: [{ type: String }],\n    topics: [{ type: String, ref: 'Tags' }],\n    image: String,\n    currentPosts: { type: Number, default: 0 },\n\n    rewardFund: { type: Number, default: 0 },\n    currentShares: { type: Number, default: 0 },\n    topPostShares: { type: Number, default: 0 },\n\n    postCount: { type: Number, default: 0 },\n    lastRewardFundUpdate: { type: Date, default: new Date() },\n\n    // TODO - start using this for twitter?\n    avgTwitterScore: { type: Number, default: 0 },\n    twitterCount: { type: Number, default: 0 },\n    lastTwitterUpdate: { type: Date },\n    maxUserRank: { type: Number },\n    maxPostRank: { type: Number },\n    danglingConsumer: { type: Number, default: 0 },\n    negConsumer: { type: Number, default: 0 },\n    numberOfElements: { type: Number },\n    memberCount: { type: Number },\n    inactive: Boolean,\n    private: { type: Boolean, default: false },\n    hidden: { type: Boolean, default: false },\n    betEnabled: { type: Boolean, default: true },\n    defaultPost: { type: String, default: 'link' },\n\n    customParams: {}\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n);\n\nCommunitySchema.virtual('admins', {\n  ref: 'CommunityMember',\n  localField: 'slug',\n  foreignField: 'community'\n});\n\nCommunitySchema.virtual('superAdmins', {\n  ref: 'CommunityMember',\n  localField: 'slug',\n  foreignField: 'community'\n});\n\nCommunitySchema.virtual('members', {\n  ref: 'CommunityMember',\n  localField: 'slug',\n  foreignField: 'community'\n});\n\nCommunitySchema.index({ slug: 1 });\n\n// Validate _id\nCommunitySchema.path('slug').validate(\n  slug => NAME_PATTERN.test(slug),\n  'Username can only contain letters, numbers, dashes and underscores'\n);\n\nCommunitySchema.pre('remove', async function remove(next) {\n  const members = await this.model('CommunityMember').find({ community: this.slug });\n  await this.model('CommunityMember')\n    .deleteMany({ community: this.slug })\n    .exec();\n  // THIS IS TRICKY BECAUSE OF LEAVE RACE CONDITIONS\n  const leave = members.map(async m => this.leave(m.user));\n  if (leave) await Promise.all(leave);\n  next();\n});\n\nCommunitySchema.methods.updateMemeberCount = async function updateMemeberCount() {\n  this.memberCount = await this.model('CommunityMember').countDocuments({\n    communityId: this._id\n  });\n  return this.save();\n};\n\nCommunitySchema.methods.leave = async function leave(userId) {\n  await this.model('CommunityMember').deleteOne({ user: userId, communityId: this._id });\n  await this.updateMemeberCount();\n};\n\nCommunitySchema.methods.join = async function join(userId, role, dontUpdateCount) {\n  const superAdmin = role === 'superAdmin';\n\n  const { _id: communityId, slug: community } = this;\n  const user = await this.model('User').findOne({ _id: userId }, 'name image handle');\n  if (!user) throw new Error('missing user');\n\n  let member = await this.model('CommunityMember').findOne({\n    user: user._id,\n    communityId\n  });\n\n  if (member && role === 'admin') {\n    member.role = 'admin';\n    return member.save();\n  }\n\n  if (member && superAdmin) {\n    member.superAdmin = true;\n    return member.save();\n  }\n\n  if (member) return member;\n\n  member = {\n    user: userId,\n    embeddedUser: user,\n    communityId,\n    community,\n    reputation: 0,\n    superAdmin,\n    role: superAdmin ? 'admin' : role || 'user'\n  };\n\n  member = new (this.model('CommunityMember'))(member);\n  await member.save();\n\n  if (!dontUpdateCount) {\n    await this.updateMemeberCount();\n  }\n\n  const memberEvent = {\n    _id: user._id,\n    type: 'ADD_USER_MEMBERSHIP',\n    payload: member\n  };\n  socketEvent.emit('socketEvent', memberEvent);\n\n  return member;\n};\n\nCommunitySchema.methods.setCustomParams = async function setCustomParams(params) {\n  this.customParams = params;\n  return this.save();\n};\n\nexport default mongoose.model('Community', CommunitySchema);\n"],"file":"community.model.js"}