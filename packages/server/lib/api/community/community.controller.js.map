{"version":3,"sources":["../../../src/api/community/community.controller.js"],"names":["RESERVED","findOne","req","res","next","user","slug","params","community","Community","inactive","$ne","Error","private","member","CommunityMember","communityId","_id","status","json","err","index","query","onlyPublic","role","onlyVisible","hidden","communties","find","$or","populate","path","match","superAdmin","privateCommunities","memberships","filter","m","map","c","toObject","members","blocked","blockedBy","limit","parseInt","skip","users","$nin","sort","pagerank","memberSearch","search","name","RegExp","$and","reputation","then","membership","join","userId","leave","send","showAdmins","admins","create","body","toLowerCase","indexOf","newCommunity","image","topics","description","channels","betEnabled","superAdmins","save","superAdminsAndCreator","Set","handle","newSuperAdmins","updateAdmins","newAdmins","updateMemeberCount","update","updatedCommunity","communityMember","equals","isSuperAdmin","canEdit","set","customParams","defaultPost","updateReputationScores","memberCount","PostData","updateMany","needsRankUpdate","debug","type","User","$in","admin","updateFields","dontUpdateCount","newAdminMembers","Promise","all","remove","id","canDelete","findOneAndUpdate","new","deletedCommunity"],"mappings":"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","sourcesContent":["import computePageRank from 'server/pagerank/pagerankCompute';\nimport PostData from 'server/api/post/postData.model';\nimport Community from './community.model';\nimport CommunityMember from './community.member.model';\nimport User from '../user/user.model';\n\nconst RESERVED = [\n  'user',\n  'admin',\n  'info',\n  'api',\n  'img',\n  'fonts',\n  'files',\n  'home',\n  'undefined'\n];\n\nexport async function findOne(req, res, next) {\n  try {\n    const { user } = req;\n    const { slug } = req.params;\n    const community = await Community.findOne({ slug, inactive: { $ne: true } });\n    if (!community) throw new Error(`Community ${slug} doesn't exist`);\n\n    if (community.private) {\n      if (!user) throw new Error('This community is private');\n      const member = await CommunityMember.findOne({\n        communityId: community._id,\n        user: user._id\n      });\n      if (!member) throw new Error('This community is private');\n    }\n\n    res.status(200).json(community);\n  } catch (err) {\n    next(err);\n  }\n}\n\n// uses middleware for server-sider rendering\nexport async function index(req) {\n  const { user } = req;\n  const { community } = req.query;\n  const onlyPublic = user && user.role === 'admin' ? {} : { private: { $ne: true } };\n  const onlyVisible = user && user.role === 'admin' ? {} : { hidden: { $ne: true } };\n\n  const communties = await Community.find({\n    inactive: { $ne: true },\n    ...onlyPublic,\n    $or: [onlyVisible, { slug: community }]\n  })\n    .populate({\n      path: 'admins',\n      match: { role: 'admin' }\n    })\n    .populate({\n      path: 'superAdmins',\n      match: { superAdmin: true }\n    });\n\n  // find private communities where user is a member\n  let privateCommunities = [];\n  if (user) {\n    const memberships = await CommunityMember.find({ user: user._id }).populate({\n      path: 'communityId',\n      match: { inactive: { $ne: true } }\n    });\n    privateCommunities = memberships\n      .filter(m => m.communityId)\n      .filter(\n        m =>\n          m.communityId.private === true ||\n          (m.communityId.hidden === true && m.communityId.slug !== community)\n      )\n      .map(m => m.communityId);\n  }\n  return [...communties, ...privateCommunities].map(c => c.toObject());\n}\n\nexport async function members(req, res, next) {\n  try {\n    const { user } = req;\n    let blocked = [];\n    if (user) {\n      blocked = [...user.blocked, ...user.blockedBy];\n    }\n    const limit = req.query.limit ? parseInt(req.query.limit, 10) : 20;\n    const skip = req.query.skip ? parseInt(req.query.skip, 10) : 0;\n    const community = req.params.slug;\n\n    const users = await CommunityMember.find({\n      community,\n      'user.embeddedUser._id': {\n        $nin: blocked\n      }\n    })\n      .sort({ role: 1, pagerank: -1 })\n      .limit(limit)\n      .skip(skip);\n    res.status(200).json(users || []);\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function memberSearch(req, res, next) {\n  try {\n    let blocked = [];\n    const { user } = req;\n    if (user) {\n      blocked = [...user.blocked, ...user.blockedBy];\n    }\n\n    const { search, limit } = req.query;\n    const name = new RegExp(search, 'i');\n    const query = {\n      $and: [\n        { $or: [{ 'embeddedUser.name': name }, { 'embeddedUser.handle': name }] },\n        { 'embeddedUser._id': { $nin: blocked } }\n      ]\n    };\n    const community = req.params.slug;\n    CommunityMember.find({ community, ...query })\n      .sort({ role: 1, reputation: -1 })\n      .limit(parseInt(limit, 10))\n      .then(users => {\n        res.status(200).json(users || []);\n      });\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function membership(req, res, next) {\n  try {\n    const user = req.user._id;\n    const m = await CommunityMember.find({ user }).sort('role reputation');\n    res.status(200).json(m);\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function join(req, res, next) {\n  try {\n    const userId = req.user._id;\n    const { slug } = req.params;\n    const community = await Community.findOne({ slug });\n    const member = await community.join(userId);\n    res.status(200).json(member);\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function leave(req, res, next) {\n  try {\n    const userId = req.user._id;\n    const { slug } = req.params;\n    const community = await Community.findOne({ slug });\n    await community.leave(userId);\n    res.status(200).send();\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function showAdmins(req, res, next) {\n  try {\n    const { slug } = req.params;\n    const admins = await CommunityMember.find({ slug, role: 'admin' });\n    res.status(200).json(admins);\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function create(req, res, next) {\n  try {\n    const { user } = req;\n    if (!user) throw new Error('You need to be logged in');\n\n    const c = req.body;\n    const slug = c.slug.toLowerCase();\n    if (RESERVED.indexOf(slug) > -1) throw new Error(`The slug ${slug} cannot be used`);\n\n    const newCommunity = {\n      slug,\n      image: c.image,\n      name: c.name,\n      topics: c.topics,\n      description: c.description,\n      channels: c.channels,\n      private: c.private,\n      hidden: c.hidden,\n      betEnabled: c.betEnabled\n    };\n\n    const { admins = [], superAdmins = [] } = req.body;\n\n    let community = new Community(newCommunity);\n    community = await community.save();\n\n    const superAdminsAndCreator = [...new Set([...superAdmins, user.handle])];\n\n    // order matters here - superAdmins should go first\n    const newSuperAdmins = await updateAdmins(\n      superAdminsAndCreator,\n      'superAdmin',\n      community\n    );\n    const newAdmins = await updateAdmins(admins, 'admin', community);\n    community = await community.updateMemeberCount();\n    community.admins = newAdmins;\n    community.superAdmins = newSuperAdmins;\n\n    res.status(200).json(community);\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function update(req, res, next) {\n  try {\n    // for now only admins create communities\n    const updatedCommunity = req.body;\n    const { admins, superAdmins } = updatedCommunity;\n    const { user, communityMember } = req;\n    if (!communityMember.communityId.equals(updatedCommunity._id))\n      throw new Error('Community id mismatch');\n\n    if (!updatedCommunity) throw new Error('There was an error processing your request');\n\n    const isSuperAdmin = communityMember && communityMember.superAdmin;\n    const canEdit = user.role === 'admin' || isSuperAdmin;\n\n    if (!canEdit) throw new Error(\"You don't have permission to edit a community\");\n\n    let community = await Community.findOne({ _id: updatedCommunity._id });\n\n    community.set({\n      image: updatedCommunity.image,\n      name: updatedCommunity.name,\n      topics: updatedCommunity.topics,\n      description: updatedCommunity.description,\n      channels: updatedCommunity.channels,\n      private: updatedCommunity.private,\n      hidden: updatedCommunity.hidden,\n      betEnabled: updatedCommunity.betEnabled,\n      customParams: updatedCommunity.customParams,\n      defaultPost: updatedCommunity.defaultPost\n    });\n\n    community = await community.save();\n\n    community = await community.updateMemeberCount();\n\n    // order matters here - superAdmins should go first\n    const newSuperAdmins = await updateAdmins(superAdmins, 'superAdmin', community);\n    const newAdmins = await updateAdmins(admins, 'admin', community);\n    community = await community.updateMemeberCount();\n    community.admins = newAdmins;\n    community.superAdmins = newSuperAdmins;\n\n    res.status(200).json(community);\n\n    // TODO: only do this when admins change\n    await updateReputationScores(community);\n  } catch (err) {\n    next(err);\n  }\n}\n\nasync function updateReputationScores(community) {\n  // Only do this for small communities;\n  if (community.memberCount > 100) return;\n  await PostData.updateMany({ communityId: community._id }, { needsRankUpdate: true });\n  await computePageRank({\n    communityId: community._id,\n    community: community.slug,\n    debug: false\n  });\n}\n\n/**\n * upserts admins\n * @param  {[_id]} admins array of user ids\n * @param  {string} type type of admin ('admin', 'superAdmin')\n * @param  {commuinty}\n * @return {[CommunityMembers]} array of community member objects\n */\nasync function updateAdmins(admins, type, community) {\n  const newAdmins = (await User.find({ handle: { $in: admins } }, '_id')).map(m => m._id);\n\n  const query = {\n    admin: { role: 'admin' },\n    superAdmin: { superAdmin: true }\n  };\n  const updateFields = {\n    admin: { role: 'user' },\n    superAdmin: { superAdmin: false }\n  };\n  await CommunityMember.updateMany(\n    { user: { $nin: newAdmins }, communityId: community._id, ...query[type] },\n    updateFields[type]\n  );\n\n  const dontUpdateCount = true;\n\n  // TODO - should create an invitation\n  const newAdminMembers = newAdmins.map(async _id =>\n    community.join(_id, type, dontUpdateCount)\n  );\n  return Promise.all(newAdminMembers);\n}\n\nexport async function remove(req, res, next) {\n  try {\n    const { user } = req;\n    const { id } = req.params;\n\n    // check that user is an admin\n    const member = await CommunityMember.findOne({\n      communityId: id,\n      user: user._id,\n      role: 'admin'\n    });\n\n    const canDelete = (member && member.superAdmin) || user.role === 'admin';\n    if (!canDelete) throw new Error('you need to be a community admin to do this');\n\n    // await Community.findOne({ slug }).remove().exec();\n    const community = await Community.findOneAndUpdate(\n      { _id: id },\n      { inactive: true },\n      { new: true }\n    );\n    await CommunityMember.update(\n      { communityId: community._id },\n      { deletedCommunity: true }\n    );\n\n    res.status(200).json('removed');\n  } catch (err) {\n    next(err);\n  }\n}\n"],"file":"community.controller.js"}