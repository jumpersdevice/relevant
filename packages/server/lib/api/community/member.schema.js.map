{"version":3,"sources":["../../../src/api/community/member.schema.js"],"names":["UPDATE_UNREAD","TC","CommunityMember","memberQuery","memberOne","getResolver","memberById","wrapResolve","next","rp","memberMany","myMemberships","context","user","args","filter","_id","deletedCommunity","$ne","onlyOwner","resolvers","Object","keys","forEach","k","beforeRecordMutate","bfRM","doc","rpHook","equals","Error","memberSubscription","updateUnread","type","getType","communities","description","resolve","payload","subscribe","pubsub","asyncIterator","includes","communityId","memberMutation","memberUpdateById","memberUpdateOne","schemaComposer","createResolver","name","kind","record"],"mappings":"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","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose';\nimport { withFilter } from 'graphql-subscriptions';\nimport { pubsub } from 'server/graphql/pubsub';\nimport { schemaComposer } from 'graphql-compose';\nimport CommunityMember from './community.member.model';\n// import Community from './community.model';\n\nexport const UPDATE_UNREAD = 'UPDATE_UNREAD';\nconst TC = composeWithMongoose(CommunityMember, {});\n\n// async function testSub() {\n//   const c = await Community.findOne({ slug: 'relevant' });\n//   console.log(c);\n//   setInterval(() => {\n//     pubsub.publish(UPDATE_UNREAD, { communityId: c._id.toString(), community: c.slug });\n//   }, 1000);\n// }\n// testSub();\n\n// STEP 3: Add needed CRUD User operations to the GraphQL Schema\n// via graphql-compose it will be much much easier, with less typing\nexport const memberQuery = {\n  memberOne: TC.getResolver('findOne'),\n  memberById: TC.getResolver('findById').wrapResolve(next => rp => {\n    return next(rp);\n  }),\n  // userByIds: TC.getResolver('findByIds'),\n  memberMany: TC.getResolver('findMany'),\n  // userCount: TC.getResolver('count'),\n  // userConnection: TC.getResolver('connection'),\n  // userPagination: TC.getResolver('pagination')\n\n  myMemberships: TC.getResolver('findMany').wrapResolve(next => rp => {\n    if (!rp.context.user) return null;\n    rp.args.filter = {\n      ...rp.args.filter,\n      user: rp.context.user._id,\n      deletedCommunity: { $ne: true }\n    };\n    return next(rp);\n  })\n};\n\nfunction onlyOwner(resolvers) {\n  Object.keys(resolvers).forEach(k => {\n    resolvers[k] = resolvers[k].wrapResolve(next => async rp => {\n      rp.beforeRecordMutate = async function bfRM(doc, rpHook) {\n        if (!rpHook.context.user || !doc.user.equals(rpHook.context.user._id)) {\n          throw new Error('Forbidden!');\n        }\n        return doc;\n      };\n      return next(rp);\n    });\n  });\n  return resolvers;\n}\n\nexport const memberSubscription = {\n  updateUnread: {\n    type: TC.getType(),\n    args: {\n      communities: '[ID!]!'\n    },\n    description: 'Subscribe to unread posts notifications',\n    resolve: payload => payload,\n    subscribe: withFilter(\n      () => pubsub.asyncIterator(UPDATE_UNREAD),\n      (payload, args) => args.communities.includes(payload.communityId)\n    )\n  }\n};\n\nexport const memberMutation = {\n  // userCreateOne: UserTC.getResolver('createOne'),\n  // userCreateMany: UserTC.getResolver('createMany'),\n  ...onlyOwner({\n    memberUpdateById: TC.getResolver('updateById'),\n    memberUpdateOne: TC.getResolver('updateOne'),\n    updateUnread: schemaComposer.createResolver({\n      name: 'updateUnread',\n      type: TC.getResolver('updateById').type,\n      kind: TC.getResolver('updateById').kind,\n      args: {\n        record: `input MemberUnreadInput {\n        _id: ID!\n        unread: Int!\n      }`\n      },\n      resolve: TC.getResolver('updateById').resolve\n    })\n  })\n\n  //   userUpdateMany: UserTC.getResolver('updateMany'),\n  //   userRemoveById: UserTC.getResolver('removeById'),\n  //   userRemoveOne: UserTC.getResolver('removeOne'),\n  //   userRemoveMany: UserTC.getResolver('removeMany'),\n};\n"],"file":"member.schema.js"}