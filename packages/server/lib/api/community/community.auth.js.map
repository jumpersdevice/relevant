{"version":3,"sources":["../../../src/api/community/community.auth.js"],"names":["requestAsync","request","getAssetsUrl","address","foamToken","foamParams","auth","tokens","points","initFoamParams","foam","Community","findOne","slug","customParams","setCustomParams","checkAuthRoute","req","res","next","user","communityMember","communityId","checkCommunityAuth","status","json","OK","err","community","_id","ethLogin","Error","url","verifiedPOIs","pendingPOIs","JSON","parse","body","totalPoints","balanceWei","tokenAddress","balance","utils","formatEther","join","pagerank","defaultWeight","Math","log","save"],"mappings":"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","sourcesContent":["import request from 'request';\nimport { promisify } from 'util';\nimport { utils } from 'ethers';\nimport { getTokenBalance } from 'server/utils/contract';\nimport computePageRank from 'server/pagerank/pagerankCompute';\nimport Community from './community.model';\n\nconst requestAsync = promisify(request);\n\nconst getAssetsUrl = address =>\n  `https://map-api-direct.foam.space:443/user/${address}/assets`;\n\nconst foamToken = '0x4946fcea7c692606e8908002e55a582af44ac121';\n\n// const dummyAddress = '0x222861f16354020F62bBfa0A878B2F047a385576';\n\nconst foamParams = {\n  auth: {\n    tokens: 100,\n    points: 5\n  }\n};\n\nasync function initFoamParams() {\n  const foam = await Community.findOne({ slug: 'foam' });\n  if (!foam || foam.customParams) return;\n  await foam.setCustomParams(foamParams);\n}\n\nexport async function checkAuthRoute(req, res, next) {\n  try {\n    const { user, communityMember } = req;\n    const { communityId } = communityMember;\n    await checkCommunityAuth({ user, communityId, communityMember });\n    res.status(200).json({ OK: true });\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function checkCommunityAuth({ user, communityId, communityMember }) {\n  let community = await Community.findOne({ _id: communityId });\n  if (community.slug !== 'foam') return true;\n  if (!community.customParams) {\n    community = await initFoamParams();\n  }\n  const { tokens, points } = community.customParams.auth;\n\n  const { ethLogin } = user;\n  // FOR TESTING ONLY\n  // const ethLogin = dummyAddress;\n\n  if (!ethLogin) {\n    throw new Error(\n      'You need to connect the Ethereum address you use with FOAM in order to participate in this forum.\\nYou can connect your address with Metamask via Wallet -> Connect Wallet.'\n    );\n  }\n\n  const res = await requestAsync({ url: getAssetsUrl(ethLogin) });\n  const { verifiedPOIs, pendingPOIs } = JSON.parse(res.body);\n  const totalPoints = verifiedPOIs + pendingPOIs || 0;\n\n  if (!totalPoints || totalPoints < points) {\n    throw new Error(\n      `You can participate in this forum only after you have:\\n - added ${points} points of interest to the FOAM map\\n - have a balance of at least ${tokens} FOAM tokens`\n    );\n  }\n  const balanceWei = await getTokenBalance({\n    address: ethLogin,\n    tokenAddress: foamToken\n  });\n\n  const balance = utils.formatEther(balanceWei);\n  if (balance < tokens)\n    throw new Error(\n      `You can participate in this forum only after you have:\\n - added ${points} points of interest to the FOAM map\\n - have a balance of at least ${tokens} FOAM tokens`\n    );\n\n  // if (!communityMember || !communityMember.role !== 'admin') {\n  // await community.join(user._id, 'admin');\n  if (!communityMember) {\n    await community.join(user._id);\n  }\n\n  if (communityMember.pagerank === 0) {\n    computePageRank({\n      communityId: community._id,\n      community: community.slug\n    });\n  }\n\n  if (communityMember.defaultWeight !== totalPoints + Math.log(tokens + 1)) {\n    communityMember.defaultWeight = totalPoints + Math.log(tokens + 1);\n    // communityMember.customAdminWeight = totalPoints + Math.log(tokens + 1);\n    await communityMember.save();\n  }\n  return true;\n}\n"],"file":"community.auth.js"}