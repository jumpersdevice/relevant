{"version":3,"sources":["../../../src/api/community/community.auth.js"],"names":["requestAsync","request","getAssetsUrl","address","foamToken","foamParams","auth","tokens","points","initFoamParams","foam","Community","findOne","slug","customParams","setCustomParams","checkAuthRoute","req","res","next","user","communityMember","communityId","checkCommunityAuth","status","json","OK","err","community","_id","ethLogin","Error","url","verifiedPOIs","pendingPOIs","JSON","parse","body","totalPoints","balanceWei","tokenAddress","balance","utils","formatEther","join","pagerank","defaultWeight","Math","log","save"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,YAAY,GAAG,qBAAUC,gBAAV,CAArB;;AAEA,MAAMC,YAAY,GAAGC,OAAO,IACzB,8CAA6CA,OAAQ,SADxD;;AAGA,MAAMC,SAAS,GAAG,4CAAlB,C,CAEA;;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,GADJ;AAEJC,IAAAA,MAAM,EAAE;AAFJ;AADW,CAAnB;;AAOA,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,IAAI,GAAG,MAAMC,mBAAUC,OAAV,CAAkB;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAlB,CAAnB;AACA,MAAI,CAACH,IAAD,IAASA,IAAI,CAACI,YAAlB,EAAgC;AAChC,QAAMJ,IAAI,CAACK,eAAL,CAAqBV,UAArB,CAAN;AACD;;AAEM,eAAeW,cAAf,CAA8BC,GAA9B,EAAmCC,GAAnC,EAAwCC,IAAxC,EAA8C;AACnD,MAAI;AACF,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAA4BJ,GAAlC;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAkBD,eAAxB;AACA,UAAME,kBAAkB,CAAC;AAAEH,MAAAA,IAAF;AAAQE,MAAAA,WAAR;AAAqBD,MAAAA;AAArB,KAAD,CAAxB;AACAH,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAArB;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZR,IAAAA,IAAI,CAACQ,GAAD,CAAJ;AACD;AACF;;AAEM,eAAeJ,kBAAf,CAAkC;AAAEH,EAAAA,IAAF;AAAQE,EAAAA,WAAR;AAAqBD,EAAAA;AAArB,CAAlC,EAA0E;AAC/E,MAAIO,SAAS,GAAG,MAAMjB,mBAAUC,OAAV,CAAkB;AAAEiB,IAAAA,GAAG,EAAEP;AAAP,GAAlB,CAAtB;AACA,MAAIM,SAAS,CAACf,IAAV,KAAmB,MAAvB,EAA+B,OAAO,IAAP;;AAC/B,MAAI,CAACe,SAAS,CAACd,YAAf,EAA6B;AAC3Bc,IAAAA,SAAS,GAAG,MAAMnB,cAAc,EAAhC;AACD;;AACD,QAAM;AAAEF,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBoB,SAAS,CAACd,YAAV,CAAuBR,IAAlD;AAEA,QAAM;AAAEwB,IAAAA;AAAF,MAAeV,IAArB,CAR+E,CAS/E;AACA;;AAEA,MAAI,CAACU,QAAL,EAAe;AACb,UAAM,IAAIC,KAAJ,CACJ,6KADI,CAAN;AAGD;;AAED,QAAMb,GAAG,GAAG,MAAMlB,YAAY,CAAC;AAAEgC,IAAAA,GAAG,EAAE9B,YAAY,CAAC4B,QAAD;AAAnB,GAAD,CAA9B;AACA,QAAM;AAAEG,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAgCC,IAAI,CAACC,KAAL,CAAWlB,GAAG,CAACmB,IAAf,CAAtC;AACA,QAAMC,WAAW,GAAGL,YAAY,GAAGC,WAAf,IAA8B,CAAlD;;AAEA,MAAI,CAACI,WAAD,IAAgBA,WAAW,GAAG9B,MAAlC,EAA0C;AACxC,UAAM,IAAIuB,KAAJ,CACH,oEAAmEvB,MAAO,sEAAqED,MAAO,cADnJ,CAAN;AAGD;;AACD,QAAMgC,UAAU,GAAG,MAAM,+BAAgB;AACvCpC,IAAAA,OAAO,EAAE2B,QAD8B;AAEvCU,IAAAA,YAAY,EAAEpC;AAFyB,GAAhB,CAAzB;;AAKA,QAAMqC,OAAO,GAAGC,cAAMC,WAAN,CAAkBJ,UAAlB,CAAhB;;AACA,MAAIE,OAAO,GAAGlC,MAAd,EACE,MAAM,IAAIwB,KAAJ,CACH,oEAAmEvB,MAAO,sEAAqED,MAAO,cADnJ,CAAN,CAlC6E,CAsC/E;AACA;;AACA,MAAI,CAACc,eAAL,EAAsB;AACpB,UAAMO,SAAS,CAACgB,IAAV,CAAexB,IAAI,CAACS,GAApB,CAAN;AACD;;AAED,MAAIR,eAAe,CAACwB,QAAhB,KAA6B,CAAjC,EAAoC;AAClC,kCAAgB;AACdvB,MAAAA,WAAW,EAAEM,SAAS,CAACC,GADT;AAEdD,MAAAA,SAAS,EAAEA,SAAS,CAACf;AAFP,KAAhB;AAID;;AAED,MAAIQ,eAAe,CAACyB,aAAhB,KAAkCR,WAAW,GAAGS,IAAI,CAACC,GAAL,CAASzC,MAAM,GAAG,CAAlB,CAApD,EAA0E;AACxEc,IAAAA,eAAe,CAACyB,aAAhB,GAAgCR,WAAW,GAAGS,IAAI,CAACC,GAAL,CAASzC,MAAM,GAAG,CAAlB,CAA9C,CADwE,CAExE;;AACA,UAAMc,eAAe,CAAC4B,IAAhB,EAAN;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import request from 'request';\nimport { promisify } from 'util';\nimport { utils } from 'ethers';\nimport { getTokenBalance } from 'server/utils/contract';\nimport computePageRank from 'server/pagerank/pagerankCompute';\nimport Community from './community.model';\n\nconst requestAsync = promisify(request);\n\nconst getAssetsUrl = address =>\n  `https://map-api-direct.foam.space:443/user/${address}/assets`;\n\nconst foamToken = '0x4946fcea7c692606e8908002e55a582af44ac121';\n\n// const dummyAddress = '0x222861f16354020F62bBfa0A878B2F047a385576';\n\nconst foamParams = {\n  auth: {\n    tokens: 100,\n    points: 5\n  }\n};\n\nasync function initFoamParams() {\n  const foam = await Community.findOne({ slug: 'foam' });\n  if (!foam || foam.customParams) return;\n  await foam.setCustomParams(foamParams);\n}\n\nexport async function checkAuthRoute(req, res, next) {\n  try {\n    const { user, communityMember } = req;\n    const { communityId } = communityMember;\n    await checkCommunityAuth({ user, communityId, communityMember });\n    res.status(200).json({ OK: true });\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function checkCommunityAuth({ user, communityId, communityMember }) {\n  let community = await Community.findOne({ _id: communityId });\n  if (community.slug !== 'foam') return true;\n  if (!community.customParams) {\n    community = await initFoamParams();\n  }\n  const { tokens, points } = community.customParams.auth;\n\n  const { ethLogin } = user;\n  // FOR TESTING ONLY\n  // const ethLogin = dummyAddress;\n\n  if (!ethLogin) {\n    throw new Error(\n      'You need to connect the Ethereum address you use with FOAM in order to participate in this forum.\\nYou can connect your address with Metamask via Wallet -> Connect Wallet.'\n    );\n  }\n\n  const res = await requestAsync({ url: getAssetsUrl(ethLogin) });\n  const { verifiedPOIs, pendingPOIs } = JSON.parse(res.body);\n  const totalPoints = verifiedPOIs + pendingPOIs || 0;\n\n  if (!totalPoints || totalPoints < points) {\n    throw new Error(\n      `You can participate in this forum only after you have:\\n - added ${points} points of interest to the FOAM map\\n - have a balance of at least ${tokens} FOAM tokens`\n    );\n  }\n  const balanceWei = await getTokenBalance({\n    address: ethLogin,\n    tokenAddress: foamToken\n  });\n\n  const balance = utils.formatEther(balanceWei);\n  if (balance < tokens)\n    throw new Error(\n      `You can participate in this forum only after you have:\\n - added ${points} points of interest to the FOAM map\\n - have a balance of at least ${tokens} FOAM tokens`\n    );\n\n  // if (!communityMember || !communityMember.role !== 'admin') {\n  // await community.join(user._id, 'admin');\n  if (!communityMember) {\n    await community.join(user._id);\n  }\n\n  if (communityMember.pagerank === 0) {\n    computePageRank({\n      communityId: community._id,\n      community: community.slug\n    });\n  }\n\n  if (communityMember.defaultWeight !== totalPoints + Math.log(tokens + 1)) {\n    communityMember.defaultWeight = totalPoints + Math.log(tokens + 1);\n    // communityMember.customAdminWeight = totalPoints + Math.log(tokens + 1);\n    await communityMember.save();\n  }\n  return true;\n}\n"],"file":"community.auth.js"}