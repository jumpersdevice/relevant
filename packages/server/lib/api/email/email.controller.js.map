{"version":3,"sources":["../../../src/api/email/email.controller.js"],"names":["inlineCss","require","emailStyle","generateList","type","query","users","now","Date","status","createdAt","$lt","Invite","find","$exists","waitlist","List","User","console","log","length","list","mailgun","lists","forEach","user","vars","code","remove","findOne","$or","email","twitterEmail","members","delete","u","subscribed","address","name","handle","trim","create","err","update","error","exports","validate","req","res","next","body","validateWebhook","timestamp","token","signature","send","message","index","html","url","Error","data","campaign","from","to","subject","json","save","Email","draft","sendStatus","load"],"mappings":"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","sourcesContent":["import List from 'server/api/emailList/list.model';\nimport { mailgun, sendEmail } from 'server/utils/mail';\nimport Email from './email.model';\nimport Invite from '../invites/invite.model';\nimport User from '../user/user.model';\n\nconst inlineCss = require('inline-css');\nconst { emailStyle } = require('../../utils/emailStyle');\n\n// const unsub = [\n//   'jasonfeifer@gmail.com',\n//   'nikitanaggarwal@gmail.com',\n//   'samseurynck@gmail.com',\n//   'adrianzorz@gmail.com',\n//   'disinfeqt@gmail.com',\n//   'mattf96@gmail.com'\n// ];\n\n// async function removeUnsubscribed() {\n//   await Invite.find({ email: { $in: unsub } }).remove();\n// }\n\n/* eslint no-console: 0 */\n\n// eslint-disable-next-line\nasync function generateList(type) {\n  try {\n    let query;\n    let users;\n    if (type === 'notregistered') {\n      const now = new Date();\n      // now.setDate(now.getDate() - 5);\n      query = { status: 'email sent', createdAt: { $lt: now } };\n      users = await Invite.find(query);\n\n      // const now = new Date();\n      // now.setDate(now.getDate() - 5);\n      query = { status: { $exists: false } };\n      const waitlist = await List.find(query);\n      users = [...users, ...waitlist];\n    } else if (type === 'currentUsers') {\n      const now = new Date();\n      // now.setDate(now.getDate() - 5);\n      query = { createdAt: { $lt: now } };\n      users = await User.find(query, 'email code twitterEmail twitter handle name');\n    } else if (type === 'waitlist') {\n      // const now = new Date();\n      // now.setDate(now.getDate() - 5);\n      query = { status: { $exists: false } };\n      users = await List.find(query);\n    } else if (type === 'nodigest') {\n      // const now = new Date();\n      // now.setDate(now.getDate() - 5);\n      query = { 'notificationSettings.email.digest': false };\n      users = await User.find(query, 'email code twitterEmail twitter handle name');\n      console.log('nodigest', users.length);\n    }\n\n    const list = mailgun.lists(type + '@mail.relevant.community');\n\n    users.forEach(async user => {\n      let vars = {};\n      if (type === 'notregistered') {\n        vars = { code: user.code };\n      }\n\n      // if (!user.email && !user.twitterEmail) console.log(user.toObject());\n\n      if (type === 'notregistered' || type === 'waitlist') {\n        let remove = await User.findOne({\n          $or: [{ email: user.email }, { twitterEmail: user.email }]\n        });\n        if (type === 'waitlist') {\n          remove =\n            (await Invite.findOne({ email: user.email, status: 'email sent' })) || remove;\n        }\n\n        if (remove) {\n          console.log('remove', user.email);\n          list.members(user.email).delete();\n          return;\n        }\n      }\n      // return;\n\n      const u = {\n        subscribed: true,\n        address: user.email || user.twitterEmail,\n        name:\n          type === 'notregistered' || type === 'waitlist' ? user.name : '@' + user.handle,\n        vars\n      };\n      if (u.address) {\n        u.address = u.address.trim();\n      }\n\n      console.log('handle', user.handle, u.name, u.address);\n      if (!u.address) return;\n      list.members().create(u, err => {\n        if (err) {\n          try {\n            list.members(u.address).update(u, console.log);\n          } catch (error) {\n            console.log('err updating', u);\n          }\n        }\n        // console.log\n      });\n    });\n  } catch (err) {\n    console.log(err);\n    // throw err;\n  }\n}\n\n// generateList('nodigest');\n// generateList('currentUsers');\n// generateList('notregistered');\n// generateList('waitlist');\n\n// mailgun.lists().create({\n//   address: 'test1@mail.relevant.community',\n//   name: 'test1',\n//   description: 'Users that have invites but have not registered',\n// });\n// let list = mailgun.lists('test@mail.relevant.community');\n// let slava = {\n//   subscribed: true,\n//   address: 'byslava@gmail.com',\n//   name: 'Slava',\n//   vars: { code: 'xyDFz' },\n// };\n// list.members().create(slava, err => {\n//   if (err) throw err;\n// });\n// let analisa = {\n//   subscribed: 'true',\n//   address: 'analisa@4real.io',\n//   name: 'Analisa',\n//   vars: { code: 'fsdflkj' },\n// };\n// list.members('byslava@gmail.com').update(slava, function (err, data) {\n//   // `data` is the member details\n//   console.log(data);\n//   console.log(err);\n// });\n// list.members('analisa@4real.io').update(analisa, function (err, data) {\n//   // `data` is the member details\n//   console.log(data);\n//   console.log(err);\n// });\n\n// list.members().list(function (err, members) {\n//   // `members` is the list of members\n//   console.log(members);\n// });\n\n// list.members('byslava@gmail.com').delete(function (err, body) {\n//   console.log(body);\n// });\n//\n\n// need this?\nexports.validate = function validate(req, res, next) {\n  const { body } = req;\n  if (!mailgun.validateWebhook(body.timestamp, body.token, body.signature)) {\n    res.send({ error: { message: 'Invalid signature. Are you even Mailgun?' } });\n    return;\n  }\n  next();\n};\n\nexports.index = async (req, res, next) => {\n  try {\n    const { email } = req.body;\n    let html = emailStyle + req.body.html;\n\n    html = await inlineCss(html, { url: 'https://relevant.community' });\n\n    if (!email) throw new Error('no email');\n    if (!html) throw new Error('no html');\n\n    const data = {\n      'o:tag': [req.body.campaign],\n      from: 'Relevant <info@relevant.community>',\n      to: req.body.email,\n      subject: req.body.subject,\n      html\n    };\n    const status = await sendEmail(data);\n    return res.status(200).json(status);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.save = async (req, res, next) => {\n  try {\n    await Email.find({}).remove();\n    const draft = new Email(req.body);\n    await draft.save();\n    return res.sendStatus(200);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.load = async (req, res, next) => {\n  try {\n    const email = await Email.findOne({});\n    return res.status(200).json(email);\n  } catch (err) {\n    return next(err);\n  }\n};\n"],"file":"email.controller.js"}