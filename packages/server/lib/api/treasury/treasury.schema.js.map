{"version":3,"sources":["../../../src/api/treasury/treasury.schema.js"],"names":["customizationOptions","TreasuryTC","Treasury","treasuryQuery","distributedTokens","type","resolve","ag","User","aggregate","$match","$group","_id","balance","$sum","legacyTokens","airdropTokens","legacyAirdrop","cashedOut","tokenBalance","earnigns","Earnings","status","earned","rewards","Community","rewardFund","curationRewards","airdrop","treasuryOne","getResolver","treasuryById","treasuryByIds","treasuryMany","treasuryCount","treasuryConnection","treasuryPagination"],"mappings":"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","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose';\nimport User from 'server/api/user/user.model';\nimport Earnings from 'server/api/earnings/earnings.model';\nimport Community from 'server/api/community/community.model';\nimport Treasury from './treasury.model';\n\nconst customizationOptions = {}; // left it empty for simplicity, described below\nconst TreasuryTC = composeWithMongoose(Treasury, customizationOptions);\n\n// STEP 3: Add needed CRUD User operations to the GraphQL Schema\n// via graphql-compose it will be much much easier, with less typing\nexport const treasuryQuery = {\n  distributedTokens: {\n    type: `type Aggregate {\n      _id: String,\n      balance: Float,\n      legacyTokens: Float,\n      legacyAirdrop: Float,\n      airdropTokens: Float,\n      cashedOut: Float,\n      tokenBalance: Float,\n      curationRewards: Float,\n      airdrop: Float,\n      earned: Float,\n      rewardFund: Float,\n    }`,\n    resolve: async () => {\n      const ag = await User.aggregate([\n        { $match: {} },\n        {\n          $group: {\n            _id: '',\n            balance: { $sum: '$balance' },\n            legacyTokens: { $sum: '$legacyTokens' },\n            airdropTokens: { $sum: '$airdropTokens' },\n            legacyAirdrop: { $sum: '$legacyAirdrop' },\n            cashedOut: { $sum: '$cashedOut' },\n            tokenBalance: { $sum: '$tokenBalance' }\n          }\n        }\n      ]);\n      const earnigns = await Earnings.aggregate([\n        { $match: { status: 'paidout' } },\n        {\n          $group: {\n            _id: '',\n            earned: { $sum: '$earned' }\n          }\n        }\n      ]);\n      const rewards = await Community.aggregate([\n        { $match: {} },\n        {\n          $group: {\n            _id: '',\n            rewardFund: { $sum: '$rewardFund' }\n          }\n        }\n      ]);\n      const { earned } = earnigns[0];\n      const rewardFund = rewards[0].rewardFund / 1e18;\n      const { balance, legacyTokens, airdropTokens, legacyAirdrop, cashedOut } = ag[0];\n      const curationRewards =\n        balance - legacyTokens - airdropTokens - legacyAirdrop + cashedOut;\n      const airdrop = legacyTokens + airdropTokens + legacyAirdrop;\n      return { ...ag[0], curationRewards, airdrop, earned, rewardFund };\n    }\n  },\n  treasuryOne: TreasuryTC.getResolver('findOne'),\n  treasuryById: TreasuryTC.getResolver('findById'),\n  treasuryByIds: TreasuryTC.getResolver('findByIds'),\n  treasuryMany: TreasuryTC.getResolver('findMany'),\n  treasuryCount: TreasuryTC.getResolver('count'),\n  treasuryConnection: TreasuryTC.getResolver('connection'),\n  treasuryPagination: TreasuryTC.getResolver('pagination')\n};\n\n// schemaComposer.Mutation.addFields({\n//   //   userCreateOne: UserTC.getResolver('createOne'),\n//   //   userCreateMany: UserTC.getResolver('createMany'),\n//   //   userUpdateById: UserTC.getResolver('updateById'),\n//   //   userUpdateOne: UserTC.getResolver('updateOne'),\n//   //   userUpdateMany: UserTC.getResolver('updateMany'),\n//   //   userRemoveById: UserTC.getResolver('removeById'),\n//   //   userRemoveOne: UserTC.getResolver('removeOne'),\n//   //   userRemoveMany: UserTC.getResolver('removeMany'),\n// });\n"],"file":"treasury.schema.js"}