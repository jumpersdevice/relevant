{"version":3,"sources":["../../../src/api/feed/feed.model.js"],"names":["mongoose","require","Schema","FeedSchema","userId","type","Types","ObjectId","ref","from","post","metaPost","tags","String","createdAt","Date","read","Boolean","default","timestamps","index","statics","processExpired","user","updateFeed","oldestUnread","findOne","sort","limit","remove","module","exports","model"],"mappings":";;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAM;AAAEC,EAAAA;AAAF,IAAaF,QAAnB;AAEA,IAAMG,UAAU,GAAG,IAAID,MAAJ,CACjB;AACEE,EAAAA,MAAM,EAAE;AAAEC,IAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GADV;AAEEC,EAAAA,IAAI,EAAE;AAAEJ,IAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAFR;AAGEE,EAAAA,IAAI,EAAE;AAAEL,IAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAHR;AAIEG,EAAAA,QAAQ,EAAE;AAAEN,IAAAA,IAAI,EAAEH,MAAM,CAACI,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAJZ;AAKEI,EAAAA,IAAI,EAAE,CAAC;AAAEP,IAAAA,IAAI,EAAEQ,MAAR;AAAgBL,IAAAA,GAAG,EAAE;AAArB,GAAD,CALR;AAMEM,EAAAA,SAAS,EAAE;AAAET,IAAAA,IAAI,EAAEU;AAAR,GANb;AAOEC,EAAAA,IAAI,EAAE;AAAEX,IAAAA,IAAI,EAAEY,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B;AAPR,CADiB,EAUjB;AACEC,EAAAA,UAAU,EAAE;AADd,CAViB,CAAnB;AAeAhB,UAAU,CAACiB,KAAX,CAAiB;AAAEhB,EAAAA,MAAM,EAAE,CAAV;AAAaU,EAAAA,SAAS,EAAE;AAAxB,CAAjB;AACAX,UAAU,CAACiB,KAAX,CAAiB;AAAEhB,EAAAA,MAAM,EAAE,CAAV;AAAaU,EAAAA,SAAS,EAAE,CAAxB;AAA2BF,EAAAA,IAAI,EAAE;AAAjC,CAAjB;;AAEAT,UAAU,CAACkB,OAAX,CAAmBC,cAAnB;AAAA,wDAAoC,WAA8BC,IAA9B,EAAoC;AACtE,QAAIC,UAAJ;AACA,QAAMC,YAAY,SAAS,KAAKC,OAAL,CAAa;AAAEtB,MAAAA,MAAM,EAAEmB,IAAV;AAAgBP,MAAAA,IAAI,EAAE;AAAtB,KAAb,EACxBW,IADwB,CACnB;AAAEb,MAAAA,SAAS,EAAE;AAAb,KADmB,EAExBc,KAFwB,CAElB,CAFkB,CAA3B;;AAGA,QAAIH,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACI,MAAb;AACAL,MAAAA,UAAU,GAAG,IAAb;AACD,KAHD,MAGOA,UAAU,GAAG,KAAb;;AACP,WAAOA,UAAP;AACD,GAVD;;AAAA,WAAmDF,cAAnD;AAAA;AAAA;;AAAA,SAAmDA,cAAnD;AAAA;;AAYAQ,MAAM,CAACC,OAAP,GAAiB/B,QAAQ,CAACgC,KAAT,CAAe,MAAf,EAAuB7B,UAAvB,CAAjB","sourcesContent":["const mongoose = require('mongoose');\n\nconst { Schema } = mongoose;\n\nconst FeedSchema = new Schema(\n  {\n    userId: { type: Schema.Types.ObjectId, ref: 'User' },\n    from: { type: Schema.Types.ObjectId, ref: 'User' },\n    post: { type: Schema.Types.ObjectId, ref: 'Post' },\n    metaPost: { type: Schema.Types.ObjectId, ref: 'metaPost' },\n    tags: [{ type: String, ref: 'Tag' }],\n    createdAt: { type: Date },\n    read: { type: Boolean, default: false }\n  },\n  {\n    timestamps: false\n  }\n);\n\nFeedSchema.index({ userId: 1, createdAt: 1 });\nFeedSchema.index({ userId: 1, createdAt: 1, tags: 1 });\n\nFeedSchema.statics.processExpired = async function processExpired(user) {\n  let updateFeed;\n  const oldestUnread = await this.findOne({ userId: user, read: false })\n    .sort({ createdAt: 1 })\n    .limit(1);\n  if (oldestUnread) {\n    oldestUnread.remove();\n    updateFeed = true;\n  } else updateFeed = false;\n  return updateFeed;\n};\n\nmodule.exports = mongoose.model('Feed', FeedSchema);\n"],"file":"feed.model.js"}