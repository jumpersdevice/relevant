{"version":3,"sources":["../../../src/api/feed/feed.controller.js"],"names":["handleError","res","statusCode","err","status","send","exports","get","req","userId","user","_id","skip","parseInt","query","limit","tag","tags","feed","posts","Feed","find","sort","createdAt","populate","path","select","forEach","f","post","push","json","unread","read","countDocuments","then","markRead","update","multi","catch","postId","params","id"],"mappings":"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","sourcesContent":["import Feed from './feed.model';\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return err => {\n    res.status(statusCode).send(err);\n  };\n}\n\nexports.get = async (req, res) => {\n  const userId = req.user._id;\n  const skip = parseInt(req.query.skip, 10) || 0;\n  const limit = parseInt(req.query.limit, 10) || 5;\n  const tag = req.query.tag || null;\n  let query = { userId };\n  if (tag) query = { tags: tag, userId };\n  let feed;\n  const posts = [];\n\n  try {\n    feed = await Feed.find(query)\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit)\n      .populate({\n        path: 'post',\n        populate: [\n          {\n            path: 'user',\n            select: 'name image relevance'\n          },\n          {\n            path: 'repost.post',\n            populate: {\n              path: 'user',\n              select: 'name image relevance'\n            }\n          }\n        ]\n      });\n\n    feed.forEach(f => {\n      if (f.post) posts.push(f.post);\n    });\n    res.status(200).json(posts);\n  } catch (err) {\n    handleError(res)(err);\n  }\n};\n\nexports.unread = (req, res) => {\n  let query = null;\n  const userId = req.user._id;\n  if (userId) {\n    query = { userId, read: false };\n  }\n  Feed.countDocuments(query).then(unread => {\n    res.status(200).json({ unread });\n  });\n};\n\nexports.markRead = (req, res) => {\n  const query = { userId: req.user._id, read: false };\n  return Feed.update(query, { read: true }, { multi: true })\n    .then(() => res.status(200).send())\n    .catch(err => handleError(res, err));\n};\n\n// for testing\nexports.post = (req, res) => {\n  const postId = req.params.id;\n  Feed.find({ post: postId })\n    .sort({ createdAt: -1 })\n    // .populate('post')\n    .then(feed => {\n      res.status(200).json(feed);\n    })\n    .catch(handleError(res));\n};\n"],"file":"feed.controller.js"}