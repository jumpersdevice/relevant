{"version":3,"sources":["../../../src/api/invites/invite.model.js"],"names":["Schema","mongoose","InviteSchema","invitedBy","type","Types","ObjectId","ref","invitee","registeredAs","email","String","name","redeemed","Boolean","default","number","Number","status","invitedByString","code","index","url","community","communityId","timestamps","statics","checkInvite","invite","Error","findOne","_id","processInvite","invitecode","user","isNotNew","model","$ne","balance","referralRewards","Invite","publicInvite","handle","publicReward","inviter","addReward","save","populate","path","match","communityInstance","role","join","relevance","pagerank","confirmed","vote","investor","author","amount","Math","min","ownPost","updatedUser","module","exports"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport computeApproxPageRank from 'server/pagerank/computeApproxPageRank';\n\nconst { Schema } = mongoose;\n\nconst InviteSchema = new Schema(\n  {\n    invitedBy: { type: Schema.Types.ObjectId, ref: 'User' },\n    invitee: { type: Schema.Types.ObjectId, ref: 'User' },\n    registeredAs: { type: Schema.Types.ObjectId, ref: 'User' },\n    email: { type: String },\n    name: { type: String },\n    redeemed: { type: Boolean, default: false },\n    number: { type: Number, default: 1 },\n    status: { type: String },\n    invitedByString: { type: String },\n    code: { type: String, index: true },\n    url: String,\n    type: String, // referral / admin\n    community: String,\n    communityId: { type: Schema.Types.ObjectId, ref: 'Community' }\n  },\n  {\n    timestamps: true\n  }\n);\n\nInviteSchema.statics.checkInvite = async function checkInvite(invite) {\n  if (!invite) throw new Error('No invitation code found');\n  invite = await this.findOne({ _id: invite._id, redeemed: false });\n  if (!invite) throw new Error('No invitation code found');\n  return invite;\n};\n\nInviteSchema.statics.processInvite = async function processInvite({\n  invitecode,\n  user,\n  isNotNew\n}) {\n  const invite = await this.model('Invite').findOne({\n    code: invitecode,\n    redeemed: { $ne: true }\n  });\n  if (isNotNew && user.balance > 0 && invite !== 'admin') return user;\n  if (invite) return referralRewards({ invite, user, Invite: this });\n\n  const publicInvite = await this.model('User').findOne({ handle: invitecode });\n  if (publicInvite) return publicReward({ inviter: publicInvite, user, Invite: this });\n  return user;\n};\n\nasync function publicReward({ user, inviter }) {\n  await inviter.addReward({ type: 'publicLink', user });\n  return user.addReward({ type: 'publicInvite', user: inviter });\n}\n\nasync function referralRewards({ invite, user, Invite }) {\n  // InviteSchema.methods.referral = async function referral(user) {\n  const { communityId, community } = invite;\n  invite.status = 'registered';\n  invite.number -= 1;\n  if (invite.number === 0) invite.redeemed = true;\n  invite.registeredAs = user._id;\n  await invite.save();\n\n  let inviter = await Invite.model('User')\n    .findOne({ _id: invite.invitedBy })\n    .populate({\n      path: 'relevance',\n      match: { communityId }\n    });\n\n  const communityInstance = await Invite.model('Community').findOne({\n    _id: communityId\n  });\n  const role = invite.type === 'admin' ? 'admin' : null;\n  await communityInstance.join(user._id, role);\n\n  if (role === 'admin') {\n    const relevance = await Invite.model('CommunityMember').findOne({\n      user: user._id,\n      communityId\n    });\n    relevance.pagerank = 70;\n    await relevance.save();\n    user.relevance = relevance;\n    return user;\n  }\n\n  user = await user.addReward({ type: 'referredBy', user: inviter });\n  inviter = await inviter.addReward({ type: 'referral', user });\n\n  // console.log('updated relevance', updatedUser);\n  if (user.email === invite.email) user.confirmed = true;\n\n  const vote = new (Invite.model('Invest'))({\n    investor: inviter._id,\n    author: user._id,\n    amount: Math.min(1, (100 - inviter.relevance.pagerank + 50) / 100),\n    ownPost: false,\n    communityId,\n    community\n  });\n  await vote.save();\n\n  const { author: updatedUser } = await computeApproxPageRank({\n    communityId,\n    author: user,\n    vote,\n    user: inviter\n  });\n\n  return updatedUser;\n}\n\nmodule.exports = mongoose.model('Invite', InviteSchema);\n"],"file":"invite.model.js"}