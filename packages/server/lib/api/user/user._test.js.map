{"version":3,"sources":["../../../src/api/user/user._test.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import { test, request } from '../../config/ava.config';\n\n// let r;\n// let token;\n// let waitlistId;\n// let inviteId;\n// let inviteObj;\n// let userId;\n\n// test.before(async () => {\n//   const { app } = require('../../server.js');\n//   r = request(app);\n// });\n\n// test.serial('Add use to waitlist', async t => {\n//   t.plan(2);\n\n//   const res = await r\n//   .post('/api/list')\n//   .send({ name: 'testSignup', password: 'testSignup', email: 'testSignup@test.com' });\n\n//   t.is(res.status, 200);\n//   waitlistId = res.body._id;\n//   t.is(res.body.status, 'waitlist');\n// });\n\n// test.serial('Send invite to user', async t => {\n//   t.plan(4);\n\n//   const login = await r.post('/auth/local').send({ name: 'test', password: 'test' });\n\n//   token = login.body.token;\n//   t.is(login.status, 200);\n\n//   const invite = await r\n//   .put('/api/list/')\n//   .set('Authorization', 'bearer ' + token)\n//   .send([{ name: 'testSignup', email: 'testSignup@test.com' }]);\n\n//   t.is(invite.status, 200, 'request should succeed');\n//   t.truthy(invite.body.length, 'body should be array');\n//   inviteId = invite.body[0]._id;\n//   inviteObj = invite.body[0];\n//   t.is(invite.body[0].status, 'email sent', 'status should be invited');\n// });\n\n// test.serial('Should fail with incorrect username', async t => {\n//   t.plan(2);\n\n//   const signup = await r.post('/api/user').send({\n//     invite: inviteObj,\n//     user: {\n//       name: 'test signup',\n//       email: 'testSignup@email.com',\n//       password: 'testSignup'\n//     }\n//   });\n\n//   t.is(signup.status, 500, 'should fail');\n\n//   const signup2 = await r.post('/api/user').send({\n//     invite: inviteObj,\n//     user: {\n//       name: 'test.signup',\n//       email: 'testSignup@email.com',\n//       password: 'testSignup'\n//     }\n//   });\n\n//   t.is(signup2.status, 500, 'should fail');\n// });\n\n// // TODO signup\n// test.serial('Signup with invite', async t => {\n//   t.plan(2);\n\n//   const signup = await r.post('/api/user').send({\n//     invite: inviteObj,\n//     user: {\n//       name: 'testSignup',\n//       email: 'testSignup',\n//       password: 'testSignup'\n//     }\n//   });\n\n//   t.is(signup.status, 200, 'should be able to sign up');\n\n//   userId = signup.body.user._id;\n//   t.truthy(userId, 'should have user id');\n// });\n\n// test.serial('Remove Invite', async t => {\n//   t.plan(1);\n\n//   const remove = await r\n//   .delete('/api/list/' + waitlistId)\n//   .set('Authorization', 'bearer ' + token)\n//   .send();\n\n//   t.is(remove.status, 200, 'should remove invite');\n// });\n\n// test.serial('Remove Invite', async t => {\n//   t.plan(1);\n\n//   const remove = await r\n//   .delete('/api/invites/' + inviteId)\n//   .set('Authorization', 'bearer ' + token)\n//   .send();\n\n//   t.is(remove.status, 200);\n// });\n\n// test.serial('Remove User', async t => {\n//   t.plan(1);\n\n//   const remove = await r\n//   .delete('/api/user/' + userId)\n//   .set('Authorization', 'bearer ' + token)\n//   .send();\n\n//   t.is(remove.status, 204);\n// });\n"],"file":"user._test.js"}