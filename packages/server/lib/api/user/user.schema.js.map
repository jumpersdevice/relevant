{"version":3,"sources":["../../../src/api/user/user.schema.js"],"names":["USER_UPDATED","pubsub","PubSub","remove","Object","keys","User","schema","paths","filter","key","options","select","customizationOptions","TC","map","field","extendField","description","resolve","source","args","context","isOwner","user","_id","equals","userQuery","userOne","getResolver","me","wrapResolve","next","rp","userSubscription","userUpdated","type","getType","payload","subscribe","asyncIterator","userMutation"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG,cAArB;AAEA,IAAMC,MAAM,GAAG,IAAIC,oBAAJ,EAAf;AAEA,IAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,cAAKC,MAAL,CAAYC,KAAxB,EAA+BC,MAA/B,CACbC,GAAG,IAAIJ,cAAKC,MAAL,CAAYC,KAAZ,CAAkBE,GAAlB,EAAuBC,OAAvB,CAA+BC,MAA/B,KAA0C,KADpC,CAAf;AAIA,IAAMC,oBAAoB,GAAG,EAA7B;AACA,IAAMC,EAAE,GAAG,iDAAoBR,aAApB,EAA0BO,oBAA1B,CAAX,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,MAAM,CAACY,GAAP,CAAWC,KAAK,IACdF,EAAE,CAACG,WAAH,CAAeD,KAAf,EAAsB;AACpBE,EAAAA,WAAW,EAAE,uBADO;AAEpBC,EAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,KAA2B;AAClC,QAAMC,OAAO,GAAGD,OAAO,CAACE,IAAR,IAAgBJ,MAAM,CAACK,GAAP,CAAWC,MAAX,CAAkBJ,OAAO,CAACE,IAAR,CAAaC,GAA/B,CAAhC;;AACA,WAAOF,OAAO,GAAGH,MAAM,CAACJ,KAAD,CAAT,GAAmB,IAAjC;AACD;AALmB,CAAtB,CADF,E,CAUA;AACA;;AACO,IAAMW,SAAS,GAAG;AACvBC,EAAAA,OAAO,EAAEd,EAAE,CAACe,WAAH,CAAe,SAAf,CADc;AAGvB;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,EAAE,EAAEhB,EAAE,CAACe,WAAH,CAAe,SAAf,EAA0BE,WAA1B,CAAsCC,IAAI,IAAIC,EAAE,IAAI;AACtD,QAAI,CAACA,EAAE,CAACX,OAAH,CAAWE,IAAhB,EAAsB,OAAO,IAAP;AACtBS,IAAAA,EAAE,CAACZ,IAAH,CAAQG,IAAR,GAAeS,EAAE,CAACX,OAAH,CAAWE,IAAX,CAAgBC,GAA/B;AACA,WAAOO,IAAI,CAACC,EAAD,CAAX;AACD,GAJG;AAVmB,CAAlB,C,CAiBP;AACA;AACA;;;AAEO,IAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAEtB,EAAE,CAACuB,OAAH,EADK;AAEX;AACA;AACA;AACAnB,IAAAA,WAAW,EAAE,0BALF;AAMXC,IAAAA,OAAO,EAAEmB,OAAO,IAAIA,OANT;AAOXC,IAAAA,SAAS,EAAE,MAAMtC,MAAM,CAACuC,aAAP,CAAqB,CAACxC,YAAD,CAArB;AAPN;AADiB,CAAzB;;AAYA,IAAMyC,YAAY,GAAG,EAArB,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose';\nimport { PubSub } from 'apollo-server';\nimport User from './user.model';\n\nconst USER_UPDATED = 'USER_UPDATED';\n\nconst pubsub = new PubSub();\n\nconst remove = Object.keys(User.schema.paths).filter(\n  key => User.schema.paths[key].options.select === false\n);\n\nconst customizationOptions = {};\nconst TC = composeWithMongoose(User, customizationOptions);\n\n// async function testSub() {\n//   const user = await User.findOne({ handle: 'slava' }, '+email');\n//   setInterval(() => {\n//     user.balance += 10;\n//     pubsub.publish(USER_UPDATED, user);\n//   }, 1000);\n// }\n// testSub();\n\nremove.map(field =>\n  TC.extendField(field, {\n    description: 'Only visible to owner',\n    resolve: (source, args, context) => {\n      const isOwner = context.user && source._id.equals(context.user._id);\n      return isOwner ? source[field] : null;\n    }\n  })\n);\n\n// STEP 3: Add needed CRUD User operations to the GraphQL Schema\n// via graphql-compose it will be much much easier, with less typing\nexport const userQuery = {\n  userOne: TC.getResolver('findOne'),\n\n  // userById: TC.getResolver('findById'),\n  // userByIds: TC.getResolver('findByIds'),\n  // userMany: TC.getResolver('findMany'),\n  // userCount: TC.getResolver('count'),\n  // userConnection: TC.getResolver('connection'),\n  // userPagination: TC.getResolver('pagination')\n\n  me: TC.getResolver('findOne').wrapResolve(next => rp => {\n    if (!rp.context.user) return null;\n    rp.args.user = rp.context.user._id;\n    return next(rp);\n  })\n};\n\n// TC.addFields({\n//   test: { type: 'String' }\n// });\n\nexport const userSubscription = {\n  userUpdated: {\n    type: TC.getType(),\n    // args: {\n    //   userId: 'ID!'\n    // },\n    description: 'Subscribe to userUpdated',\n    resolve: payload => payload,\n    subscribe: () => pubsub.asyncIterator([USER_UPDATED])\n  }\n};\n\nexport const userMutation = {};\n\n// schemaComposer.Mutation.addFields({\n//   //   userCreateOne: UserTC.getResolver('createOne'),\n//   //   userCreateMany: UserTC.getResolver('createMany'),\n//   //   userUpdateById: UserTC.getResolver('updateById'),\n//   //   userUpdateOne: UserTC.getResolver('updateOne'),\n//   //   userUpdateMany: UserTC.getResolver('updateMany'),\n//   //   userRemoveById: UserTC.getResolver('removeById'),\n//   //   userRemoveOne: UserTC.getResolver('removeOne'),\n//   //   userRemoveMany: UserTC.getResolver('removeMany'),\n// });\n"],"file":"user.schema.js"}