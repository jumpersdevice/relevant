{"version":3,"sources":["../../../src/api/user/user.model.js"],"names":["crypto","require","authTypes","Schema","mongoose","UserSchema","handle","type","String","unique","required","publicKey","sparse","name","email","lowercase","select","phone","role","default","online","Boolean","messages","Number","balance","lockedTokens","deviceTokens","image","hashedPassword","provider","salt","facebook","twitter","Object","reddit","notificationSettings","bet","manual","digest","general","personal","mobile","all","desktop","desktopSubscriptions","redditId","redditAuth","google","github","postCount","investmentCount","onboarding","webOnboard","Types","Mixed","lastFeedNotification","Date","confirmed","confirmCode","resetPasswordToken","resetPasswordExpires","following","followers","votePower","lastVote","bio","blocked","ref","blockedBy","level","rank","percentRank","topTopics","totalUsers","accumilatedDecay","estimatedPayout","lastPayout","twitterHandle","twitterImage","twitterEmail","twitterAuthToken","twitterAuthSecret","twitterId","index","lastTweetId","tokenBalance","cashedOut","ethAddress","cashOut","nonce","sig","amount","earningId","airdropTokens","referralTokens","legacyTokens","legacyAirdrop","ethLogin","version","community","banned","toJSON","virtuals","toObject","timestamps","partialFilterExpression","$exists","virtual","localField","foreignField","justOne","set","setPassword","password","_password","makeSalt","encryptPassword","get","getPassword","getProfile","getToken","_id","path","validate","NAME_PATTERN","test","vEmail","indexOf","length","vHashedPassword","vEmailTaken","value","constructor","findOne","err","user","id","validatePresenceOf","pre","preSave","next","model","countDocuments","isNew","Error","preRemove","deleteMany","exec","methods","authenticate","plainText","randomBytes","toString","Buffer","from","pbkdf2Sync","getSubscriptions","follower","then","catch","getRelevance","rel","relevance","updatePostCount","save","updateClient","actor","userData","payload","socketEvent","emit","updateMeta","newUser","updateMany","embeddedUser","multi","addReward","extraRewards","Math","min","MAX_AIRDROP","findOneAndUpdate","$inc","new","upsert","notification","forUser","coin","byUser","byUsersHandle","createNotification","initialCoins","invite","updateBalance","ethUtils","getBalance","updatePower","now","elapsedTime","getTime","voteRegen","max","POWER_REGEN_INTERVAL","ensureParam","param","undefined","getParam","module","exports"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport socketEvent from 'server/socket/socketEvent';\nimport { NAME_PATTERN } from 'app/utils/text';\nimport {\n  newUserCoins,\n  POWER_REGEN_INTERVAL,\n  MAX_AIRDROP,\n  getRewardForType\n} from '../../config/globalConstants';\n// TODO move this to common\nimport * as ethUtils from '../../utils/ethereum';\n\nconst crypto = require('crypto');\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google', 'reddit', 'web3'];\nconst { Schema } = mongoose;\n\nconst UserSchema = new Schema(\n  {\n    // Comment out to automatically generate _id\n    // _id: { type: Schema.Types.Object, required: true },\n    handle: { type: String, unique: true, required: true },\n    publicKey: { type: String, unique: true, sparse: true },\n    name: String,\n    email: { type: String, lowercase: true, select: false },\n    phone: { type: String, select: false },\n    role: {\n      type: String,\n      default: 'user'\n    },\n    online: { type: Boolean, default: false },\n    messages: { type: Number, default: 0 },\n\n    // keep this - hack to keep relevance out, but not have it overridden by toObject\n    // relevance: { type: Number, default: 0, select: false },\n\n    balance: { type: Number, default: 0 },\n    lockedTokens: { type: Number, default: 0 },\n\n    deviceTokens: {\n      // select: false,\n      type: [String]\n    },\n    image: String,\n    hashedPassword: { type: String, select: false },\n    provider: String,\n    salt: { type: String, select: false },\n    facebook: {},\n    twitter: { type: Object, select: false },\n    reddit: { type: Object, select: false },\n    notificationSettings: {\n      bet: { manual: { type: Boolean, default: false } },\n      email: {\n        digest: { type: Boolean, default: true },\n        general: { type: Boolean, default: false },\n        personal: { type: Boolean, default: true }\n      },\n      mobile: { all: { type: Boolean, default: false } },\n      desktop: { all: { type: Boolean, default: false } }\n    },\n    desktopSubscriptions: [],\n    redditId: String,\n    redditAuth: { type: Object, select: false },\n    google: {},\n    github: {},\n\n    postCount: { type: Number, default: 0 },\n    investmentCount: { type: Number, default: 0 },\n    onboarding: { type: Number, default: 0 },\n\n    webOnboard: {\n      type: Schema.Types.Mixed,\n      default: {\n        onboarding: false\n      }\n    },\n\n    lastFeedNotification: { type: Date, default: new Date(0) },\n    confirmed: { type: Boolean, default: false },\n    confirmCode: { type: String, select: false },\n    resetPasswordToken: { type: String, select: false },\n    resetPasswordExpires: { type: Date, select: false },\n    following: Number,\n    followers: Number,\n\n    votePower: { type: Number, default: 1 },\n    lastVote: { type: Date, default: new Date() },\n\n    bio: { type: String, default: '' },\n\n    blocked: {\n      type: [{ type: Schema.Types.Object, ref: 'User' }],\n      select: false\n    },\n    blockedBy: {\n      type: [{ type: Schema.Types.Object, ref: 'User' }],\n      select: false\n    },\n\n    level: Number,\n    rank: Number,\n    percentRank: Number,\n    topTopics: [{ type: String, ref: 'Tag' }],\n    totalUsers: Number,\n\n    accumilatedDecay: { type: Number, select: false },\n    estimatedPayout: { type: Number },\n    lastPayout: { type: Number },\n\n    twitterHandle: { type: String },\n    twitterImage: { type: String },\n    twitterEmail: { type: String, select: false },\n    twitterAuthToken: { type: String, select: false },\n    twitterAuthSecret: { type: String, select: false },\n    twitterId: { type: String, unique: true, index: true, sparse: true },\n\n    // used to query twitter feed\n    lastTweetId: { type: Number },\n\n    tokenBalance: { type: Number, default: 0 },\n    cashedOut: { type: Number, default: 0 },\n    ethAddress: [String],\n\n    // eth cash out\n    cashOut: {\n      nonce: String,\n      sig: String,\n      amount: String,\n      earningId: String\n    },\n    airdropTokens: { type: Number, default: 0 },\n    referralTokens: { type: Number, default: 0 },\n    legacyTokens: { type: Number, default: 0 },\n    legacyAirdrop: { type: Number, default: 0 },\n\n    ethLogin: { type: String },\n    // boxDID: { type: String },\n    // boxAddress: { type: String },\n\n    version: String,\n    community: String,\n    banned: Boolean\n  },\n  {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n    timestamps: true\n  }\n);\n\nUserSchema.index(\n  { ethLogin: 1 },\n  { unique: true, partialFilterExpression: { ethLogin: { $exists: true } } }\n);\n\nUserSchema.index({ handle: 1 });\n\n/**\n * Virtuals\n */\n// TODO use this in controller\nUserSchema.virtual('relevance', {\n  ref: 'CommunityMember',\n  localField: '_id',\n  foreignField: 'user',\n  justOne: true\n});\n\nUserSchema.virtual('password')\n  .set(function setPassword(password) {\n    this._password = password;\n    this.salt = this.makeSalt();\n    this.hashedPassword = this.encryptPassword(password);\n  })\n  .get(function getPassword() {\n    return this._password;\n  });\n\n// Public profile information\nUserSchema.virtual('profile').get(function getProfile() {\n  return {\n    name: this.name,\n    role: this.role\n  };\n});\n\n// Non-sensitive info we'll be putting in the token\nUserSchema.virtual('token').get(function getToken() {\n  return {\n    _id: this._id,\n    role: this.role\n  };\n});\n\n/**\n * Validations\n */\n\n// Validate handle\nUserSchema.path('handle').validate(\n  handle => NAME_PATTERN.test(handle),\n  'Username can only contain letters, numbers, dashes and underscores'\n);\n\n// Validate _id\nUserSchema.path('_id').validate(\n  handle => NAME_PATTERN.test(handle),\n  'Username can only contain letters, numbers, dashes and underscores'\n);\n\n// Validate empty email\nUserSchema.path('email').validate(function vEmail(email) {\n  if (authTypes.indexOf(this.provider) !== -1) return true;\n  return email.length;\n}, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema.path('hashedPassword').validate(function vHashedPassword(hashedPassword) {\n  if (authTypes.indexOf(this.provider) !== -1) return true;\n  return hashedPassword.length;\n}, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema.path('email').validate(function vEmailTaken(value) {\n  this.constructor.findOne({ email: value }, (err, user) => {\n    if (err) throw err;\n    if (user) {\n      if (this.id === user.id) return true;\n      return false;\n    }\n    return true;\n  });\n}, 'The specified email address is already in use.');\n\nconst validatePresenceOf = value => value && value.length;\n\n/**\n * Pre-save hook\n */\nUserSchema.pre('save', async function preSave(next) {\n  try {\n    this.postCount = await this.model('Post').countDocuments({ user: this._id });\n    if (!this.isNew) return next();\n\n    if (\n      !validatePresenceOf(this.hashedPassword) &&\n      authTypes.indexOf(this.provider) === -1\n    ) {\n      return next(new Error('Invalid password'));\n    }\n    return next();\n  } catch (err) {\n    return next(err);\n  }\n});\n\nUserSchema.pre('remove', async function preRemove(next) {\n  try {\n    await this.model('CommunityMember')\n      .deleteMany({ user: this._id })\n      .exec();\n    next();\n  } catch (err) {\n    next(err);\n  }\n  return null;\n});\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} plainText\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate: function authenticate(plainText) {\n    return this.encryptPassword(plainText) === this.hashedPassword;\n  },\n\n  /**\n   * Make salt\n   *\n   * @return {String}\n   * @api public\n   */\n  makeSalt: function makeSalt() {\n    return crypto.randomBytes(16).toString('base64');\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @return {String}\n   * @api public\n   */\n  encryptPassword: function encryptPassword(password) {\n    if (!password || !this.salt) return '';\n    const salt = Buffer.from(this.salt, 'base64');\n    return crypto.pbkdf2Sync(password, salt, 10000, 64, 'sha1').toString('base64');\n  },\n\n  // get following and followers\n  getSubscriptions: function getSubscriptions() {\n    return this.model('Subscription')\n      .countDocuments({ follower: this._id })\n      .then(following => {\n        this.following = following;\n        return this.model('Subscription').countDocuments({ following: this._id });\n      })\n      .then(followers => {\n        this.followers = followers;\n        return this;\n      })\n      .catch(() => this);\n  }\n};\n\nUserSchema.methods.getRelevance = async function getRelevance(community) {\n  const rel = await this.model('CommunityMember').findOne({\n    community,\n    user: this._id\n  });\n  this.relevance = rel ? rel.relevance : 0;\n  return this;\n};\n\nUserSchema.methods.updatePostCount = async function updatePostCount() {\n  this.postCount = await this.model('Post').countDocuments({ user: this._id });\n  await this.save();\n  await this.updateClient();\n  return this;\n};\n\nUserSchema.methods.updateClient = function updateClient(actor) {\n  const userData = {\n    _id: this._id,\n    type: 'UPDATE_USER',\n    payload: this\n  };\n  socketEvent.emit('socketEvent', userData);\n  if (actor) {\n    userData._id = actor._id;\n    socketEvent.emit('socketEvent', userData);\n  }\n};\n\nUserSchema.methods.updateMeta = async function updateMeta() {\n  const newUser = {\n    name: this.name,\n    image: this.image,\n    _id: this._id,\n    handle: this.handle\n  };\n\n  await this.model('Post').updateMany(\n    { user: this._id },\n    { embeddedUser: newUser },\n    { multi: true }\n  );\n\n  await this.model('CommunityMember').updateMany(\n    { user: this._id },\n    { embeddedUser: newUser },\n    { multi: true }\n  );\n  return true;\n};\n\nUserSchema.methods.addReward = async function addReward({ type, user, extraRewards }) {\n  const amount = getRewardForType(type) + (extraRewards || 0);\n  const airdropTokens = Math.min(amount, MAX_AIRDROP - this.airdropTokens);\n\n  if (airdropTokens <= 0) return this;\n\n  // TODO - update this and tie it to smart contract\n  await this.model('Treasury')\n    .findOneAndUpdate(\n      {},\n      { $inc: { balance: -airdropTokens } },\n      { new: true, upsert: true }\n    )\n    .exec();\n\n  this.balance += airdropTokens;\n  this.airdropTokens += airdropTokens;\n  if (type === 'referral' || type === 'publicLink') {\n    this.referralTokens += airdropTokens;\n  }\n\n  const notification = {\n    forUser: this._id,\n    type: `reward_${type}`,\n    coin: airdropTokens,\n    byUser: user ? user._id : null,\n    byUsersHandle: user ? [user.handle] : null\n  };\n  await this.model('Notification').createNotification(notification);\n\n  return this.save();\n};\n\nUserSchema.methods.initialCoins = async function initialCoins(invite) {\n  const airdropTokens = newUserCoins(this, invite);\n\n  if (!airdropTokens) return this;\n  // TODO - update this and tie it to smart contract\n  await this.model('Treasury')\n    .findOneAndUpdate(\n      {},\n      { $inc: { balance: -airdropTokens } },\n      { new: true, upsert: true }\n    )\n    .exec();\n\n  this.balance += airdropTokens;\n  this.airdropTokens += airdropTokens;\n\n  const type = this.twitterId ? 'twitter' : 'email';\n  const notification = {\n    forUser: this._id,\n    type: `reward_${type}`,\n    coin: airdropTokens\n  };\n  await this.model('Notification').createNotification(notification);\n\n  return this.save();\n};\n\nUserSchema.methods.updateBalance = async function updateBalance() {\n  const ethAddress = this.ethAddress[0];\n  if (ethAddress) {\n    this.tokenBalance = await ethUtils.getBalance(ethAddress);\n  }\n  return this;\n};\n\nUserSchema.methods.updatePower = function updatePower() {\n  // elapsed time in seconds\n  // prevent votes from being more often than 5s apart\n  const now = new Date();\n  this.lastVote = now;\n  const elapsedTime = new Date(now).getTime() - new Date(this.lastVote || 0).getTime();\n  const voteRegen = Math.max((elapsedTime / POWER_REGEN_INTERVAL) * 1);\n  const votePower = Math.min(this.votePower + voteRegen, 1);\n  this.votePower = votePower;\n  // async?\n  this.save();\n  return this;\n};\n\nUserSchema.methods.ensureParam = async function ensureParam(param) {\n  if (this[param] !== undefined) return this;\n  const getParam = await this.model('User').findOne({ _id: this._id }, '+param');\n  this[param] = getParam[param];\n  return this;\n};\n\n// export default mongoose.model('User', UserSchema);\nmodule.exports = mongoose.model('User', UserSchema);\n"],"file":"user.model.js"}