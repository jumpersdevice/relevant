{"version":3,"sources":["../../../src/api/earnings/earnings.model.js"],"names":["Schema","mongoose","EarningsSchema","user","type","Types","ObjectId","ref","source","String","default","post","spent","Number","stakedTokens","totalPostShares","estimatedPostPayout","shares","earned","payoutTime","Date","status","community","communityId","cashOutAttempt","Boolean","cashOutAmt","prevBalance","endBalance","totalPreviousPaidout","legacyAirdrop","referralTokens","airdropTokens","timestamps","index","statics","updateRewardsRecord","earning","updatedEarning","findOneAndUpdate","new","upsert","updateClient","actionType","methods","earningsAction","_id","payload","socketEvent","emit","pre","preRemove","next","updateUserBalance","updateBalance","save","updateEarnings","data","model","find","updateMany","expectedPayout","multi","earnings","forEach","e","aggregate","$match","$group","$sum","module","exports"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport socketEvent from 'server/socket/socketEvent';\n\nconst { Schema } = mongoose;\n\nconst EarningsSchema = new Schema(\n  {\n    user: { type: Schema.Types.ObjectId, ref: 'User' },\n    source: { type: String, default: 'post' },\n    post: { type: Schema.Types.ObjectId, ref: 'Post' },\n    // amount: { type: Number, default: 0 },\n    // spent is legacy code keep in case we need to recompute legacy tokens\n    spent: { type: Number, default: 0 },\n    // pending: { type: Number, default: 0 },\n    stakedTokens: { type: Number, default: 0 },\n    totalPostShares: { type: Number, default: 0 },\n    estimatedPostPayout: { type: Number, default: 0 },\n    shares: { type: Number, default: 0 },\n    earned: { type: Number, default: 0 },\n    payoutTime: Date,\n    status: String,\n    type: { type: String, default: 'coins' },\n    community: { type: String },\n    communityId: { type: Schema.Types.ObjectId, ref: 'Community' },\n\n    cashOutAttempt: { type: Schema.Types.Boolean, default: false },\n    cashOutAmt: { type: Number, default: 0 },\n\n    prevBalance: { type: Number, default: 0 },\n    endBalance: { type: Number, default: 0 },\n\n    totalPreviousPaidout: { type: Number, default: 0 },\n    legacyAirdrop: { type: Number, default: 0 },\n    referralTokens: { type: Number, default: 0 },\n    airdropTokens: { type: Number, default: 0 }\n  },\n  {\n    timestamps: true\n  }\n);\n\nEarningsSchema.index({ post: 1 });\nEarningsSchema.index({ status: 1 });\nEarningsSchema.index({ user: 1, status: 1 });\nEarningsSchema.index({ user: 1, post: 1 });\n\nEarningsSchema.statics.updateRewardsRecord = async function updateRewardsRecord(earning) {\n  const updatedEarning = await this.findOneAndUpdate(\n    { user: earning.user, post: earning.post, communityId: earning.communityId },\n    { ...earning },\n    { new: true, upsert: true }\n  );\n  updatedEarning.updateClient({ actionType: 'UPDATE_EARNING' });\n  return updatedEarning;\n};\n\nEarningsSchema.methods.updateClient = function updateClient({ actionType }) {\n  const earningsAction = {\n    _id: this.user,\n    type: actionType,\n    payload: this\n  };\n  socketEvent.emit('socketEvent', earningsAction);\n};\n\nEarningsSchema.pre('remove', async function preRemove(next) {\n  this.updateClient({ actionType: 'REMOVE_EARNING' });\n  next();\n});\n\nEarningsSchema.statics.updateUserBalance = async function updateBalance(earning) {\n  earning = new this(earning);\n  earning = await earning.save();\n  return earning;\n};\n\nEarningsSchema.statics.updateEarnings = async function updateEarnings({\n  post,\n  communityId\n}) {\n  if (!post.data) {\n    post.data = await this.model('PostData').find({ post: post._id, communityId });\n  }\n  await this.model('Earnings').updateMany(\n    { post: post._id, communityId },\n    {\n      estimatedPostPayout: post.data.expectedPayout,\n      totalPostShares: post.data.shares\n    },\n    { multi: true }\n  );\n  const earnings = await this.find({ post: post._id, communityId });\n  earnings.forEach(e => e.updateClient({ actionType: 'UPDATE_EARNING' }));\n  return earnings;\n};\n\nEarningsSchema.statics.stakedTokens = async function stakedTokens() {\n  return this.model('Earnings').aggregate([\n    { $match: { status: 'pending' } },\n    {\n      $group: {\n        _id: '$community',\n        stakedTokens: { $sum: '$stakedTokens' }\n      }\n    }\n  ]);\n};\n\nmodule.exports = mongoose.model('Earnings', EarningsSchema);\n"],"file":"earnings.model.js"}