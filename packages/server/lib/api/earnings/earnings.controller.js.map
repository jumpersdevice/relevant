{"version":3,"sources":["../../../src/api/earnings/earnings.controller.js"],"names":["exports","index","req","res","next","user","status","query","limit","parseInt","skip","_id","$ne","earnings","Earnings","find","populate","path","sort","createdAt","json","err","updateCashoutLog","params","id","earning","findOneAndUpdate","cashOutAttempt","new","updateBalance","save"],"mappings":";;;;;;AAAA;;AAEAA,OAAO,CAACC,KAAR;AAAA,6CAAgB,WAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACxC,QAAI;AACF,UAAM;AAAEC,QAAAA;AAAF,UAAWH,GAAjB;AACA,UAAM;AAAEI,QAAAA;AAAF,UAAaJ,GAAG,CAACK,KAAvB;AACA,UAAMC,KAAK,GAAGC,QAAQ,CAACP,GAAG,CAACK,KAAJ,CAAUC,KAAX,EAAkB,EAAlB,CAAtB;AACA,UAAME,IAAI,GAAGD,QAAQ,CAACP,GAAG,CAACK,KAAJ,CAAUG,IAAX,EAAiB,EAAjB,CAArB;AACA,UAAIH,KAAK,GAAG;AAAEF,QAAAA,IAAI,EAAEA,IAAI,CAACM,GAAb;AAAkBL,QAAAA,MAAM,EAAE;AAAEM,UAAAA,GAAG,EAAE;AAAP;AAA1B,OAAZ;AACA,UAAIN,MAAM,IAAIA,MAAM,KAAK,KAAzB,EAAgCC,KAAK,GAAG;AAAEF,QAAAA,IAAI,EAAEA,IAAI,CAACM,GAAb;AAAkBL,QAAAA;AAAlB,OAAR;AAChC,UAAMO,QAAQ,SAASC,kBAASC,IAAT,CAAcR,KAAd,EACpBS,QADoB,CACX;AACRC,QAAAA,IAAI,EAAE,MADE;AAERD,QAAAA,QAAQ,EAAE,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD,EAAmB;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAAnB;AAFF,OADW,EAKpBT,KALoB,CAKdA,KALc,EAMpBE,IANoB,CAMfA,IANe,EAOpBQ,IAPoB,CAOf;AAAEC,QAAAA,SAAS,EAAE,CAAC;AAAd,OAPe,CAAvB;AAQAhB,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqBP,QAArB;AACD,KAhBD,CAgBE,OAAOQ,GAAP,EAAY;AACZjB,MAAAA,IAAI,CAACiB,GAAD,CAAJ;AACD;AACF,GApBD;;AAAA;AAAA;AAAA;AAAA;;AAsBArB,OAAO,CAACsB,gBAAR;AAAA,8CAA2B,WAAOpB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACnD,QAAI;AACF,UAAM;AAAEC,QAAAA;AAAF,UAAWH,GAAjB;AACA,UAAMS,GAAG,GAAGT,GAAG,CAACqB,MAAJ,CAAWC,EAAvB;AACA,UAAMC,OAAO,SAASX,kBAASY,gBAAT,CACpB;AAAEf,QAAAA,GAAF;AAAOgB,QAAAA,cAAc,EAAE;AAAvB,OADoB,EAEpB;AAAErB,QAAAA,MAAM,EAAE;AAAV,OAFoB,EAGpB;AAAEsB,QAAAA,GAAG,EAAE;AAAP,OAHoB,CAAtB;AAKA,YAAMvB,IAAI,CAACwB,aAAL,EAAN;AACA,YAAMxB,IAAI,CAACyB,IAAL,EAAN;AACA3B,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEK,QAAAA,OAAF;AAAWpB,QAAAA;AAAX,OAArB;AACD,KAXD,CAWE,OAAOgB,GAAP,EAAY;AACZjB,MAAAA,IAAI,CAACiB,GAAD,CAAJ;AACD;AACF,GAfD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import Earnings from './earnings.model';\n\nexports.index = async (req, res, next) => {\n  try {\n    const { user } = req;\n    const { status } = req.query;\n    const limit = parseInt(req.query.limit, 10);\n    const skip = parseInt(req.query.skip, 10);\n    let query = { user: user._id, status: { $ne: 'expired' } };\n    if (status && status !== 'all') query = { user: user._id, status };\n    const earnings = await Earnings.find(query)\n      .populate({\n        path: 'post',\n        populate: [{ path: 'data' }, { path: 'metaPost' }]\n      })\n      .limit(limit)\n      .skip(skip)\n      .sort({ createdAt: -1 });\n    res.status(200).json(earnings);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.updateCashoutLog = async (req, res, next) => {\n  try {\n    const { user } = req;\n    const _id = req.params.id;\n    const earning = await Earnings.findOneAndUpdate(\n      { _id, cashOutAttempt: true },\n      { status: 'completed' },\n      { new: true }\n    );\n    await user.updateBalance();\n    await user.save();\n    res.status(200).json({ earning, user });\n  } catch (err) {\n    next(err);\n  }\n};\n"],"file":"earnings.controller.js"}