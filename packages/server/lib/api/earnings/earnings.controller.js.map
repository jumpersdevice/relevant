{"version":3,"sources":["../../../src/api/earnings/earnings.controller.js"],"names":["exports","index","req","res","next","user","status","query","limit","parseInt","skip","_id","$ne","earnings","Earnings","find","populate","path","sort","createdAt","json","err","updateCashoutLog","params","id","earning","findOneAndUpdate","cashOutAttempt","new","updateBalance","save"],"mappings":";;;;AAAA;;AAEAA,OAAO,CAACC,KAAR,GAAgB,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACxC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAWH,GAAjB;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAaJ,GAAG,CAACK,KAAvB;AACA,UAAMC,KAAK,GAAGC,QAAQ,CAACP,GAAG,CAACK,KAAJ,CAAUC,KAAX,EAAkB,EAAlB,CAAtB;AACA,UAAME,IAAI,GAAGD,QAAQ,CAACP,GAAG,CAACK,KAAJ,CAAUG,IAAX,EAAiB,EAAjB,CAArB;AACA,QAAIH,KAAK,GAAG;AAAEF,MAAAA,IAAI,EAAEA,IAAI,CAACM,GAAb;AAAkBL,MAAAA,MAAM,EAAE;AAAEM,QAAAA,GAAG,EAAE;AAAP;AAA1B,KAAZ;AACA,QAAIN,MAAM,IAAIA,MAAM,KAAK,KAAzB,EAAgCC,KAAK,GAAG;AAAEF,MAAAA,IAAI,EAAEA,IAAI,CAACM,GAAb;AAAkBL,MAAAA;AAAlB,KAAR;AAChC,UAAMO,QAAQ,GAAG,MAAMC,kBAASC,IAAT,CAAcR,KAAd,EACpBS,QADoB,CACX;AACRC,MAAAA,IAAI,EAAE,MADE;AAERD,MAAAA,QAAQ,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,EAAmB;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAAnB;AAFF,KADW,EAKpBT,KALoB,CAKdA,KALc,EAMpBE,IANoB,CAMfA,IANe,EAOpBQ,IAPoB,CAOf;AAAEC,MAAAA,SAAS,EAAE,CAAC;AAAd,KAPe,CAAvB;AAQAhB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqBP,QAArB;AACD,GAhBD,CAgBE,OAAOQ,GAAP,EAAY;AACZjB,IAAAA,IAAI,CAACiB,GAAD,CAAJ;AACD;AACF,CApBD;;AAsBArB,OAAO,CAACsB,gBAAR,GAA2B,OAAOpB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACnD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAWH,GAAjB;AACA,UAAMS,GAAG,GAAGT,GAAG,CAACqB,MAAJ,CAAWC,EAAvB;AACA,UAAMC,OAAO,GAAG,MAAMX,kBAASY,gBAAT,CACpB;AAAEf,MAAAA,GAAF;AAAOgB,MAAAA,cAAc,EAAE;AAAvB,KADoB,EAEpB;AAAErB,MAAAA,MAAM,EAAE;AAAV,KAFoB,EAGpB;AAAEsB,MAAAA,GAAG,EAAE;AAAP,KAHoB,CAAtB;AAKA,UAAMvB,IAAI,CAACwB,aAAL,EAAN;AACA,UAAMxB,IAAI,CAACyB,IAAL,EAAN;AACA3B,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEK,MAAAA,OAAF;AAAWpB,MAAAA;AAAX,KAArB;AACD,GAXD,CAWE,OAAOgB,GAAP,EAAY;AACZjB,IAAAA,IAAI,CAACiB,GAAD,CAAJ;AACD;AACF,CAfD","sourcesContent":["import Earnings from './earnings.model';\n\nexports.index = async (req, res, next) => {\n  try {\n    const { user } = req;\n    const { status } = req.query;\n    const limit = parseInt(req.query.limit, 10);\n    const skip = parseInt(req.query.skip, 10);\n    let query = { user: user._id, status: { $ne: 'expired' } };\n    if (status && status !== 'all') query = { user: user._id, status };\n    const earnings = await Earnings.find(query)\n      .populate({\n        path: 'post',\n        populate: [{ path: 'data' }, { path: 'metaPost' }]\n      })\n      .limit(limit)\n      .skip(skip)\n      .sort({ createdAt: -1 });\n    res.status(200).json(earnings);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.updateCashoutLog = async (req, res, next) => {\n  try {\n    const { user } = req;\n    const _id = req.params.id;\n    const earning = await Earnings.findOneAndUpdate(\n      { _id, cashOutAttempt: true },\n      { status: 'completed' },\n      { new: true }\n    );\n    await user.updateBalance();\n    await user.save();\n    res.status(200).json({ earning, user });\n  } catch (err) {\n    next(err);\n  }\n};\n"],"file":"earnings.controller.js"}