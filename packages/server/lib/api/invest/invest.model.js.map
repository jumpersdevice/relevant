{"version":3,"sources":["../../../src/api/invest/invest.model.js"],"names":["Schema","mongoose","TEST_ENV","process","env","NODE_ENV","InvestSchema","post","type","Types","ObjectId","ref","investor","author","ownPost","Boolean","default","amount","Number","community","String","communityId","shares","stakedTokens","paidOut","payoutDate","Date","relevantPoints","rankChange","upvotes","downVotes","updatePowerInvestor","partialUsers","relevance","partialRelevance","isManualBet","timestamps","index","createdAt","methods","removeVote","user","vote","data","balance","Math","max","returnTokens","min","lockedTokens","console","log","needsRankUpdate","totalShares","earning","Earnings","findOne","_id","remove","updateClient","actionType","save","placeBet","updateBalance","canBet","postData","model","handle","communityInstance","expectedPayout","notificationSettings","bet","manual","betEnabled","myVote","updateUserEarnings","statics","createVote","Error","id","equals","slug","abs","VOTE_COST_RATIO","tokenBalance","err","lookup","earningExists","countDocuments","findOneAndUpdate","payoutTime","estimatedPostPayout","totalPostShares","status","new","upsert","now","leeway","availableBalance","parentPost","eligibleForReward","getTime","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { VOTE_COST_RATIO } from 'server/config/globalConstants';\nimport Earnings from 'server/api/earnings/earnings.model';\nimport { computePostPayout } from 'app/utils/rewards';\nimport { computeShares } from 'app/utils/post';\n\nconst { Schema } = mongoose;\nconst TEST_ENV = process.env.NODE_ENV === 'test';\n\nconst InvestSchema = new Schema(\n  {\n    post: { type: Schema.Types.ObjectId, ref: 'Post' },\n    investor: { type: Schema.Types.ObjectId, ref: 'User' },\n    author: { type: Schema.Types.ObjectId, ref: 'User' },\n\n    ownPost: { type: Boolean, default: false },\n    amount: Number,\n\n    community: String,\n    communityId: { type: Schema.Types.ObjectId, ref: 'Community' },\n    // voteWeight is DEPRECATED same as shares - shares is better\n    // TODO convert this in old data\n    // voteWeight: { type: Number, default: 0 },\n    shares: { type: Number, default: 0 },\n    stakedTokens: { type: Number, default: 0 },\n\n    paidOut: { type: Boolean, default: false },\n    payoutDate: { type: Date },\n\n    // EVERYTHING BELOW SHOULD BE REMOVED - DEPRECATED\n\n    // vote weight\n    relevantPoints: { type: Number, default: 0 },\n    rankChange: { type: Number, default: 0 },\n\n    // this info helps us determine how much the\n    // investor (or author) has earned from this post\n    upvotes: { type: Number, default: 0 },\n    downVotes: { type: Number, default: 0 },\n    updatePowerInvestor: { type: String, ref: 'User' },\n    partialUsers: { type: Number, default: 0 },\n    relevance: { type: Number, default: 0 },\n    partialRelevance: { type: Number, default: 0 },\n    isManualBet: { type: Boolean, default: false }\n  },\n  {\n    timestamps: true\n  }\n);\n\n// InvestSchema.index({ community: 1 });\nInvestSchema.index({ post: 1 });\nInvestSchema.index({ investor: 1 });\nInvestSchema.index({ communityId: 1, investor: 1 });\nInvestSchema.index({ communityId: 1, investor: 1, createdAt: 1 });\nInvestSchema.index({ post: 1, investor: 1, ownPost: 1 });\nInvestSchema.index({ post: 1, investor: 1, communityId: 1 });\n\n// TODO: we should not remove the bet and only the vote\n// otherwise voters before the removal of the bet will get a worse price\n// alternately we can recompute everyone's shares upon removal\nInvestSchema.methods.removeVote = async function removeVote({ post, user }) {\n  const vote = this;\n  post.data.shares -= vote.shares;\n  post.data.balance = Math.max(post.data.balance - vote.stakedTokens, 0);\n  const returnTokens = Math.min(user.lockedTokens, vote.stakedTokens);\n  user.lockedTokens = (user.lockedTokens || 0) - returnTokens;\n  // eslint-disable-next-line\n  console.log('UNLOCK TOKENS', vote.stakedTokens, user.balance, user.lockedTokens);\n  post.data.needsRankUpdate = true;\n\n  post.data.totalShares -= vote.stakedTokens;\n  const earning = await Earnings.findOne({ user: user._id, post: post._id });\n  if (earning) {\n    await earning.remove();\n    earning.updateClient({ actionType: 'REMOVE_EARNING' });\n  }\n  await post.data.save();\n  await user.save();\n  await post.save();\n  await vote.remove();\n  return vote;\n};\n\nInvestSchema.methods.placeBet = async function placeBet({\n  post,\n  communityId,\n  stakedTokens,\n  user\n}) {\n  let vote = this;\n\n  user = await user.updateBalance();\n  canBet({ user, post, stakedTokens });\n\n  const shares = computeShares({ post, stakedTokens });\n  const postData = await this.model('PostData').findOne({ post: post._id, communityId });\n\n  // eslint-disable-next-line\n  console.log(user.handle, 'got', shares, 'for', stakedTokens, 'staked tokens');\n\n  user.lockedTokens += stakedTokens;\n\n  postData.shares += shares;\n  postData.balance += stakedTokens;\n  postData.totalShares += stakedTokens;\n\n  const communityInstance = await this.model('Community').findOne({ _id: communityId });\n  postData.expectedPayout = computePostPayout(post.data, communityInstance);\n\n  await user.save();\n  await postData.save();\n  post.data = postData;\n\n  vote.shares += shares;\n  vote.stakedTokens += stakedTokens;\n  vote.isManualBet = user.notificationSettings.bet.manual && communityInstance.betEnabled;\n  vote = await vote.save();\n\n  post.myVote = vote;\n  await post.save();\n  user.updateClient();\n  post.updateClient();\n\n  await updateUserEarnings({\n    user,\n    post,\n    vote\n  });\n\n  return vote;\n};\n\nInvestSchema.statics.createVote = async function createVote({\n  post,\n  communityInstance,\n  community,\n  communityId,\n  amount,\n  user\n}) {\n  const isManualBet =\n    user.notificationSettings.bet.manual && communityInstance.betEnabled;\n\n  if (!post.data)\n    throw new Error(`Missing post data ${post.id} ${community} ${communityId}`);\n\n  let vote = new (this.model('Invest'))({\n    investor: user._id,\n    post: post._id,\n    author: post.user,\n    amount,\n    ownPost: user._id.equals(post.user),\n    community: communityInstance.slug,\n    communityId: communityInstance._id,\n    // TODO track parentPost && linkPost/aboutLink?\n    // parentPost: post.parentPost,\n    // linkPost: post.linkPost,\n    payoutDate: post.data.payoutDate,\n    paidOut: post.data.paidOut,\n    isManualBet\n  });\n\n  vote = await vote.save();\n\n  post.data.needsRankUpdate = true;\n\n  // If manual betting is enabled don't auto-bet\n  if (isManualBet || amount <= 0) return vote;\n\n  try {\n    const stakedTokens =\n      Math.abs(amount) * VOTE_COST_RATIO * (user.balance + user.tokenBalance);\n    if (stakedTokens > 0) {\n      vote = await vote.placeBet({\n        post,\n        community,\n        communityId,\n        stakedTokens,\n        user\n      });\n    }\n  } catch (err) {\n    // console.log('bet error', err); // eslint-disable-line\n  }\n  return vote;\n};\n\nasync function updateUserEarnings({ user, post, vote }) {\n  const lookup = { user: user._id, post: post._id, communityId: vote.communityId };\n  const earningExists = await Earnings.countDocuments(lookup);\n\n  const earning = await Earnings.findOneAndUpdate(\n    lookup,\n    {\n      shares: vote.shares,\n      stakedTokens: vote.stakedTokens,\n      community: vote.community,\n      communityId: vote.communityId,\n      payoutTime: post.data.payoutTime,\n      estimatedPostPayout: post.data.expectedPayout,\n      totalPostShares: post.data.shares,\n      status: 'pending'\n    },\n    { new: true, upsert: true }\n  );\n\n  if (earningExists) return earning.updateClient({ actionType: 'UPDATE_EARNING' });\n  return earning.updateClient({ actionType: 'ADD_EARNING' });\n}\n\nfunction canBet({ post, user, stakedTokens }) {\n  const now = new Date();\n  const leeway = TEST_ENV ? 1000 * 60 : 0;\n  const availableBalance = user.balance + user.tokenBalance - user.lockedTokens;\n\n  if (\n    !post.parentPost &&\n    stakedTokens <= availableBalance &&\n    post.data.eligibleForReward &&\n    !post.data.paidOut &&\n    post.data.payoutTime &&\n    new Date(post.data.payoutTime).getTime() + leeway > now.getTime()\n  ) {\n    return true;\n  }\n\n  throw new Error(`You cannot bet on this post, ${JSON.stringify(post)}`);\n}\n\nmodule.exports = mongoose.model('Invest', InvestSchema);\n"],"file":"invest.model.js"}