{"version":3,"sources":["../../../src/api/invest/createVote.js"],"names":["NODE_ENV","process","env","create","req","res","next","community","communityId","communityMember","communityInstance","Community","findOne","_id","userId","user","postId","body","post","amount","Math","max","min","author","queryDb","unhideTwitterComments","ratelimitVotes","relevance","ensurePagerank","vote","getExistingVote","undoInvest","isManualBet","stakedTokens","Error","removeVote","Invest","createVote","adjustVotes","data","upVotes","downVotes","save","authorPagerank","pagerank","initialPostRank","updatePageRank","rankChange","updateRank","expectedPayout","parentPost","subscription","updateSubscriptions","status","json","investment","success","updateClient","Earnings","updateEarnings","voteCount","countDocuments","investor","$gt","getSubscriptions","processNotifications","err","type","now","Date","oneWeek","postDate","getTime","equals","timeElapsed","createdAt","payoutTime","Subscription","follower","following","inc","sendAuthorNotification","Notification","deleteOne","forUser","byUser","exec","createNotification","action","payload","fromUser","toUser","noteType","alert","name","console","log","params","children","Post","find","parentComment","$exists","populate","authors","map","child","notes","u","Promise","all","pageRankChange","elapsedTime","lastVote","hidden","insertIntoFeed","join","path","match","User"],"mappings":"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","sourcesContent":["import Earnings from 'server/api/earnings/earnings.model';\nimport { sendNotification as sendPushNotification } from 'server/notifications';\nimport computeApproxPageRank from 'server/pagerank/computeApproxPageRank';\nimport { computePostPayout } from 'app/utils/rewards';\nimport Community from 'server/api/community/community.model';\nimport Post from 'server/api/post/post.model';\nimport User from 'server/api/user/user.model';\nimport Subscription from 'server/api/subscription/subscription.model';\nimport Notification from 'server/api/notification/notification.model';\nimport Invest from 'server/api/invest/invest.model';\n\nconst { NODE_ENV } = process.env;\n\n// General problem: a user with some reputation who hasn't upvoted anyone\n// adds much more weight to the first few posts he/she upvotes\n// TODO: Solution — only start counting weights after N upvotes?\n\n// Rate-limit vote weights?\n\n// Weight allocation attack:\n// Above also solves this possible attack...\n// 1. Build up some degree of relevance (takes time)\n// 2. Create N sibyls ahead of time and upvote each one\n// 3. Wait until right before the a given post's payout time\n// 4. Each sybil upvotes the post and effectively transferring all of the rep weight to the post\n// 5. After, delete the sybils, and to restore original weights\n// This is mitigated by not deleting links to sybil nodes upon their deletion :)\n// Partial solution: prevent undoing vote after payout\nexport const create = async (req, res, next) => {\n  try {\n    const { community, communityId } = req.communityMember;\n    const communityInstance = await Community.findOne({ _id: communityId });\n\n    const userId = req.user._id;\n    const postId = req.body.post;\n    let { amount } = req.body;\n\n    // amount should be on a scale of -1 to 1 to prevent abuse;\n    amount = Math.max(-1, amount);\n    amount = Math.min(1, amount);\n\n    let { post, user, author } = await queryDb({ userId, postId, communityId });\n\n    post = await unhideTwitterComments({ amount, post, communityId, community });\n    // TODO create twitter user authors!\n\n    ratelimitVotes({ user });\n    if (author) {\n      author.relevance = await ensurePagerank({ user: author, communityInstance });\n    }\n    if (user) {\n      user.relevance = await ensurePagerank({ user, communityInstance });\n    }\n\n    let vote = await getExistingVote({ user, post, amount, communityId });\n    const undoInvest = !!vote;\n\n    if (undoInvest && vote.isManualBet && vote.stakedTokens) {\n      throw new Error('You cannot undo a vote once after you bet on a post.');\n    }\n\n    vote = undoInvest\n      ? await vote.removeVote({ post, user })\n      : await Invest.createVote({\n          post,\n          community,\n          communityId,\n          communityInstance,\n          amount,\n          user\n        });\n\n    const adjustVotes = undoInvest ? -1 : 1;\n    post.data.upVotes += amount > 0 ? adjustVotes : 0;\n    post.data.downVotes += amount < 0 ? adjustVotes : 0;\n    post.data = await post.data.save();\n\n    const authorPagerank = author && (author.relevance.pagerank || 0);\n    const initialPostRank = post.data.pagerank || 0;\n\n    const updatePageRank = await computeApproxPageRank({\n      communityId,\n      author,\n      post,\n      vote,\n      user,\n      undoInvest\n    });\n    if (updatePageRank) ({ author, post } = updatePageRank);\n\n    if (vote && !undoInvest) {\n      vote.rankChange = post.data.pagerank - initialPostRank;\n      await vote.save();\n    }\n\n    await post.updateRank({ communityId });\n    post.data.expectedPayout = computePostPayout(post.data, communityInstance);\n\n    post = await post.save();\n\n    if (post.parentPost) {\n      await post.parentPost.updateRank({ communityId });\n      await post.parentPost.save();\n    }\n\n    const subscription = await updateSubscriptions({\n      post,\n      user,\n      amount,\n      communityId,\n      community,\n      undoInvest\n    });\n\n    res.status(200).json({\n      investment: vote,\n      success: true,\n      subscription,\n      undoInvest,\n      rankChange: post.data.pagerank - initialPostRank\n    });\n\n    // TODO - put the rest into queue on worker?\n    post.updateClient();\n\n    Earnings.updateEarnings({ post, communityId });\n\n    // updates user votes\n    user.voteCount = await Invest.countDocuments({\n      investor: user._id,\n      amount: { $gt: 0 }\n    });\n\n    // updates follow & follower counts - deprecated?\n    user = await user.getSubscriptions();\n    user = await user.save();\n\n    user.updateClient();\n\n    // updates author reputation and send notificaitons\n    await processNotifications({\n      author,\n      community,\n      post,\n      user,\n      amount,\n      authorPagerank,\n      undoInvest,\n      communityId\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\nasync function getExistingVote({ user, post, amount, communityId }) {\n  const type = amount < 0 ? 'dowvote' : 'upvote';\n\n  // Don't let users downvote posts older than one week\n  const now = new Date();\n  const oneWeek = 1000 * 60 * 60 * 24 * 7;\n  if (\n    type === 'downvote' &&\n    post.data.postDate < now.getTime() - oneWeek &&\n    NODE_ENV === 'production'\n  ) {\n    throw new Error('you cannot downvote posts older than one week');\n  }\n\n  if (user._id.equals(post.user)) {\n    throw new Error('You can not ' + type + ' your own comment');\n  }\n\n  const vote = await Invest.findOne({\n    investor: user._id,\n    post: post._id,\n    communityId\n  });\n\n  if (!vote) return null;\n\n  // TODO undo invest\n  const timeElapsed = now.getTime() - new Date(vote.createdAt).getTime();\n  // TODO 15m to update post is this fine?\n  if (timeElapsed > 15 * 60 * 1000 && NODE_ENV === 'production') {\n    throw new Error('You cannot change your vote after 15m');\n  }\n\n  if (\n    new Date(post.data.payoutTime).getTime() < now.getTime() &&\n    NODE_ENV === 'production'\n  ) {\n    throw new Error('you cannot change your vote after post payout');\n  }\n  return vote;\n}\n\nasync function updateSubscriptions({\n  post,\n  user,\n  amount,\n  undoInvest,\n  communityId,\n  community\n}) {\n  if (amount < 0) return null;\n  let subscription = await Subscription.findOne({\n    follower: user._id,\n    following: post.user,\n    communityId\n  });\n  if (!subscription && undoInvest) return null;\n  if (!subscription) {\n    subscription = new Subscription({\n      follower: user._id,\n      following: post.user,\n      communityId,\n      community,\n      amount: 0\n    });\n  }\n  const inc = undoInvest ? Math.max(-3, -subscription.amount) : 3;\n  subscription.amount = Math.min(subscription.amount + inc, 20);\n  return subscription.save();\n}\n\nasync function sendAuthorNotification({ author, user, post, type, undoInvest, amount }) {\n  if (!author) return null;\n  // Remove notification if undo;\n  if (undoInvest) {\n    await Notification.deleteOne({\n      type,\n      post: post._id,\n      forUser: author._id,\n      byUser: user._id\n    }).exec();\n    return null;\n  }\n\n  await Notification.createNotification({\n    post: post._id,\n    forUser: author._id,\n    byUser: user._id,\n    amount,\n    type\n  });\n\n  const action =\n    type === 'upvote' ? ' thinks your comment is relevant' : ' upvoted a link you shared';\n\n  const payload = {\n    fromUser: user,\n    toUser: author,\n    post,\n    action,\n    noteType: type\n  };\n  const alert = user.name + action;\n\n  try {\n    sendPushNotification(author, alert, payload);\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n  }\n  return null;\n}\n\nasync function processNotifications(params) {\n  const { post, user, amount, authorPagerank, undoInvest } = params;\n  let { author } = params;\n\n  if (!author) {\n    if (amount < 0) return null;\n    const children = await Post.find({\n      parentPost: post._id,\n      parentComment: { $exists: false }\n    }).populate('user');\n\n    const authors = children.map(child => child.user);\n    const notes = authors.map(u =>\n      sendAuthorNotification({ author: u, user, post, undoInvest, type: 'upvoteParent' })\n    );\n    return Promise.all(notes);\n  }\n\n  const pageRankChange = author.relevance\n    ? author.relevance.pagerank - authorPagerank\n    : 0;\n  const type = 'upvote';\n\n  author = await author.save();\n  author.updateClient(user);\n\n  if (amount < 0) return null;\n\n  await sendAuthorNotification({\n    author,\n    user,\n    post,\n    undoInvest,\n    amount: pageRankChange,\n    type\n  });\n  return author;\n}\n\nfunction ratelimitVotes({ user }) {\n  const now = new Date();\n  const elapsedTime = new Date(now).getTime() - new Date(user.lastVote || 0).getTime();\n  if (elapsedTime < 5 * 1000 && NODE_ENV === 'production') {\n    throw new Error('you cannot up-vote posts more often than 5s');\n  }\n}\n\nasync function unhideTwitterComments({ amount, post, communityId, community }) {\n  if (!post) return null;\n  if (amount > 0 && post.hidden && post.parentPost) {\n    await post.parentPost.insertIntoFeed(communityId, community);\n    post.hidden = false;\n  }\n  post.hidden = false;\n  return post;\n}\n\nasync function ensurePagerank({ user, communityInstance }) {\n  if (!user) return null;\n  if (user.relevance) return user.relevance;\n  return communityInstance.join(user._id);\n}\n\nasync function queryDb({ userId, postId, communityId }) {\n  const post = await Post.findOne({ _id: postId })\n    .populate({ path: 'parentPost' })\n    .populate({ path: 'data', match: { communityId } });\n\n  const user = await User.findOne(\n    { _id: userId },\n    'name balance ethAddress image lastVote votePower handle tokenBalance lockedTokens notificationSettings'\n  ).populate({\n    path: 'relevance',\n    match: { communityId }\n  });\n\n  const author = await User.findOne(\n    { _id: post.user },\n    'name handle image balance deviceTokens badge'\n  ).populate({\n    path: 'relevance',\n    match: { communityId }\n  });\n  return { user, author, post };\n}\n"],"file":"createVote.js"}