{"version":3,"sources":["../../../src/api/invest/invest.controller.js"],"names":["exports","create","bet","req","res","next","user","stakedTokens","postId","_id","body","Error","communityId","community","communityMember","communityObj","Community","findOne","betEnabled","post","Post","populate","path","match","vote","Invest","investor","placeBet","status","json","err","postInvestments","params","limit","parseInt","query","skip","investments","find","amount","$gt","sort","createdAt","select","postvotes","votes","downvotes","$lt","show","blocked","blockedBy","userId","sortQuery","u","toString"],"mappings":"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","sourcesContent":["import Invest from 'server/api/invest/invest.model';\nimport Post from 'server/api/post/post.model';\nimport Community from 'server/api/community/community.model';\nimport { create } from './createVote';\n\nexports.create = create;\n\nexports.bet = async (req, res, next) => {\n  try {\n    const { user } = req;\n    const { stakedTokens, postId: _id } = req.body;\n    if (stakedTokens === 0) throw new Error(\"You don't have enough tokens to bet\");\n    const { communityId, community } = req.communityMember;\n    const communityObj = await Community.findOne({ _id: communityId });\n    if (communityObj.betEnabled === false) {\n      throw new Error(\"This community doesn't support betting\");\n    }\n    const post = await Post.findOne({ _id }).populate({\n      path: 'data',\n      match: { communityId }\n    });\n    let vote = await Invest.findOne({ post: _id, investor: user._id });\n    if (!vote) throw new Error('You must upvote the post first');\n    vote = await vote.placeBet({ post, community, communityId, stakedTokens, user });\n    return res.status(200).json(vote);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.postInvestments = async (req, res, next) => {\n  try {\n    const { postId } = req.params;\n    const limit = parseInt(req.query.limit, 10);\n    const skip = parseInt(req.query.skip, 10);\n    const { community } = req.query;\n\n    const investments = await Invest.find({ post: postId, amount: { $gt: 0 } })\n      .limit(limit)\n      .skip(skip)\n      .sort({ createdAt: -1 })\n      .populate({\n        path: 'investor',\n        select: 'name image handle',\n        populate: {\n          path: 'relevance',\n          match: { community }\n        }\n      });\n\n    return res.status(200).json(investments);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.postvotes = async (req, res, next) => {\n  try {\n    const { postId } = req.params;\n    const limit = parseInt(req.query.limit, 10);\n    const skip = parseInt(req.query.skip, 10);\n    const { community } = req.query;\n\n    const votes = await Invest.find({ post: postId, amount: { $gt: 0 } })\n      .limit(limit)\n      .skip(skip)\n      .sort({ createdAt: -1 })\n      .populate({\n        path: 'investor',\n        select: 'name image handle',\n        populate: {\n          path: 'relevance',\n          match: { community }\n        }\n      });\n\n    return res.status(200).json(votes);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.downvotes = async (req, res, next) => {\n  const limit = parseInt(req.query.limit, 10) || null;\n  const skip = parseInt(req.query.skip, 10) || null;\n  let downvotes;\n  try {\n    downvotes = await Invest.find({ amount: { $lt: 0 } })\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit)\n      .populate('post');\n\n    return res.status(200).json(downvotes);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.show = async (req, res, next) => {\n  try {\n    const { communityId } = req.communityMember;\n    const { user } = req;\n\n    const blocked = user ? [...user.blocked, ...user.blockedBy] : [];\n\n    const limit = parseInt(req.query.limit, 10);\n    const skip = parseInt(req.query.skip, 10);\n    const userId = req.params.userId || null;\n    const sortQuery = { createdAt: -1 };\n    const query = { investor: userId, amount: { $gt: 0 } };\n\n    if (blocked.find(u => u.toString() === userId.toString())) {\n      return res.status(200).json({});\n    }\n\n    const votes = await Invest.find(query)\n      .populate({\n        path: 'post',\n        populate: [\n          {\n            path: 'embeddedUser.relevance',\n            match: { communityId }\n          },\n          {\n            path: 'data',\n            select: 'pagerank'\n          },\n          {\n            path: 'metaPost'\n          }\n        ]\n      })\n      .limit(limit)\n      .skip(skip)\n      .sort(sortQuery);\n    return res.status(200).json(votes);\n  } catch (err) {\n    return next(err);\n  }\n};\n"],"file":"invest.controller.js"}