{"version":3,"sources":["../../../src/api/communityFeed/communityFeed.controller.js"],"names":["exports","index","req","community","query","user","skip","parseInt","limit","tag","sort","sortQuery","commentarySort","cObj","Community","findOne","slug","private","Error","member","CommunityMember","communityId","_id","role","isInFeed","rank","pagerank","$gt","MINIMUM_RANK","latestComment","postDate","blocked","blockedBy","tags","$regex","$options","myVote","path","match","investor","feed","PostData","find","populate","type","$nin","hidden","$ne","options","select","posts","forEach","f","post","data","toObject","push","console","log"],"mappings":"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","sourcesContent":["import PostData from 'server/api/post/postData.model';\nimport { MINIMUM_RANK } from 'server/config/globalConstants';\nimport Community from 'server/api/community/community.model';\nimport CommunityMember from 'server/api/community/community.member.model';\n\nexports.index = async req => {\n  // try {\n  // TODO - right now sorting commentary by latest and relevance\n  // only works for community's own posts\n  // solution: populate postData then populate with postData post\n  // TODO - for now isolate commentary to given community\n  const { community } = req.query;\n  const { user } = req;\n  const skip = parseInt(req.query.skip, 10) || 0;\n  const limit = parseInt(req.query.limit, 10) || 5;\n  const tag = req.query.tag || null;\n  const { sort } = req.query;\n  let sortQuery;\n  let commentarySort;\n\n  if (!community) return [];\n\n  const cObj = await Community.findOne({ slug: community }, '_id private');\n  if (!cObj) return [];\n\n  if (cObj.private) {\n    if (!user) throw new Error('This community is private');\n    const member = await CommunityMember.findOne({\n      communityId: cObj._id,\n      user: user._id\n    });\n    if (!member && user.role !== 'admin') throw new Error('This community is private');\n  }\n  const communityId = cObj._id;\n\n  let query = { communityId, isInFeed: true };\n  if (sort === 'rank') {\n    sortQuery = { rank: -1 };\n    query.pagerank = { $gt: MINIMUM_RANK };\n    commentarySort = { pagerank: -1 };\n  } else {\n    sortQuery = { latestComment: -1 };\n    commentarySort = { postDate: -1 };\n  }\n\n  let blocked = [];\n  if (req.user) {\n    blocked = [...(req.user.blocked || []), ...(req.user.blockedBy || [])];\n  }\n\n  if (tag) query = { ...query, tags: { $regex: `${tag}`, $options: 'i' } };\n\n  const myVote = user\n    ? [\n        {\n          path: 'myVote',\n          match: { investor: user._id, communityId }\n        }\n      ]\n    : [];\n\n  const feed = await PostData.find(query)\n    .sort(sortQuery)\n    .skip(skip)\n    .limit(limit)\n    .populate({\n      path: 'post',\n      populate: [\n        ...myVote,\n        {\n          path: 'commentary',\n          match: {\n            // TODO implement intra-community commentary\n            communityId,\n            type: 'post',\n\n            // TODO - we should probably sort the non-community commentary\n            // with some randomness on client side\n            // repost: { $exists: false },\n            user: { $nin: blocked },\n            hidden: { $ne: true }\n          },\n          options: { sort: commentarySort },\n          populate: [\n            ...myVote,\n            { path: 'data' },\n            {\n              path: 'embeddedUser.relevance',\n              select: 'pagerank',\n              match: { communityId }\n            }\n          ]\n        },\n        { path: 'metaPost' },\n        {\n          path: 'embeddedUser.relevance',\n          select: 'pagerank',\n          match: { communityId }\n        }\n      ]\n    });\n\n  const posts = [];\n  feed.forEach(async f => {\n    if (f.post) {\n      // if (f.post.commentary.length && f.post.commentary.find(p => p.twitter)) {\n      //   console.log(f.post.toObject());\n      // }\n      const data = { ...f.toObject() };\n      delete data.post;\n      f.post.data = data;\n      posts.push(f.post.toObject());\n    } else {\n      // just in case - this shouldn't happen\n      console.log('error: post is null!', f.toObject()); // eslint-disable-line\n      // await f.remove();\n    }\n  });\n\n  return posts;\n};\n"],"file":"communityFeed.controller.js"}