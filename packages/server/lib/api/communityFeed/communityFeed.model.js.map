{"version":3,"sources":["../../../src/api/communityFeed/communityFeed.model.js"],"names":["mongoose","require","Schema","CommunityFeedSchema","community","String","post","type","Types","ObjectId","ref","rank","Number","default","latestPost","Date","tags","keywords","categories","toJSON","virtuals","toObject","timestamps","index","metaPost","statics","updateDate","_id","date","feedItem","findOneAndUpdate","new","addToFeed","Error","data","latestComment","postDate","upsert","updateRank","findOne","save","removeFromCommunityFeed","deleteMany","exec","removeFromAllFeeds","removeFromFeed","module","exports","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\n\nconst { Schema } = mongoose;\n\nconst CommunityFeedSchema = new Schema(\n  {\n    community: String,\n    post: { type: Schema.Types.ObjectId, ref: 'Post' },\n    // metaPost: { type: Schema.Types.ObjectId, ref: 'MetaPost' },\n    rank: { type: Number, default: 0 },\n    latestPost: { type: Date },\n    tags: [{ type: String, ref: 'Tag' }],\n    keywords: [String],\n    categories: [{ type: String, ref: 'Tag' }]\n  },\n  {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n    timestamps: false\n  }\n);\n\nCommunityFeedSchema.index({ community: 1 });\nCommunityFeedSchema.index({ metaPost: 1 });\nCommunityFeedSchema.index({ latestPost: 1 });\nCommunityFeedSchema.index({ community: 1, rank: 1 });\nCommunityFeedSchema.index({ community: 1, metaPost: 1 });\nCommunityFeedSchema.index({ community: 1, latestPost: 1 });\n\nCommunityFeedSchema.statics.updateDate = async function updateDate(_id, community, date) {\n  const feedItem = await this.findOneAndUpdate(\n    { post: _id, community },\n    { latestPost: date },\n    { new: true }\n  );\n  return feedItem;\n};\n\nCommunityFeedSchema.statics.addToFeed = async function addToFeed(post, community) {\n  if (community === 'twitter') community = 'relevant';\n  if (!community) throw new Error('missing community');\n  await this.findOneAndUpdate(\n    { community, post: post._id },\n    {\n      latestPost: post.data.latestComment || post.data.postDate,\n      tags: post.tags,\n      // categories: post.categories,\n      rank: post.data.rank\n    },\n    { upsert: true, new: true }\n  );\n};\n\nCommunityFeedSchema.statics.updateRank = async function updateRank(post, community) {\n  if (!community) throw new Error('missing community');\n  const feedItem = await this.findOne({ post: post._id, community });\n  if (!feedItem) return null;\n  // TODO - post rank should be tracked in a separate table\n  // so that we are not grabbing stuff from a diff communities\n  feedItem.rank = post.data.rank;\n  feedItem.latestPost = post.data.latestComment || post.data.postDate;\n  return feedItem.save();\n};\n\nCommunityFeedSchema.statics.removeFromCommunityFeed = async function removeFromCommunityFeed(\n  _id,\n  community\n) {\n  return this.deleteMany({ post: _id, community }).exec();\n};\n\nCommunityFeedSchema.statics.removeFromAllFeeds = async function removeFromFeed(_id) {\n  return this.deleteMany({ post: _id }).exec();\n};\n\nmodule.exports = mongoose.model('CommunityFeed', CommunityFeedSchema);\n"],"file":"communityFeed.model.js"}