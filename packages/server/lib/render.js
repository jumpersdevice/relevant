"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = handleRender;
exports.createInitialState = createInitialState;
exports.renderFullPage = renderFullPage;
exports.fetchMeta = fetchMeta;
exports.handleRouteData = handleRouteData;
exports.renderApp = renderApp;
exports.initStore = void 0;

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _reactRouter = require("react-router");

var _reactRouterConfig = require("react-router-config");

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _auth = require("@r3l/app/lib/modules/auth/auth.actions");

var _routes = _interopRequireDefault(require("@r3l/app/lib/modules/_app/web/routes"));

var _configureStore = _interopRequireDefault(require("@r3l/app/lib/core/web/configureStore"));

var _styledComponents = require("styled-components");

var _reactNativeWeb = require("react-native-web");

var _expressUseragent = _interopRequireDefault(require("express-useragent"));

var _nav = require("@r3l/app/lib/utils/nav");

var _apolloClient = require("./apollo.client.server");

var _reactCommon = require("@apollo/react-common");

var _navigation = require("@r3l/app/lib/modules/navigation/navigation.reducer");

var _server2 = require("@loadable/server");

const {
  NODE_ENV
} = process.env;
const sheet = new _styledComponents.ServerStyleSheet();
const statsFileName = NODE_ENV !== 'development' ? 'loadable-stats' : 'loadable-stats-dev';
const statsFile = `@r3l/app/public/dist/${statsFileName}.json`; // This is the stats file generated by webpack loadable plugin
// We create an extractor from the statsFile

let extractor = NODE_ENV !== 'development' ? new _server2.ChunkExtractor({
  statsFile,
  entrypoints: 'app'
}) : null;
const initStore = (0, _redux.compose)(_configureStore.default, createInitialState);
exports.initStore = initStore;

async function handleRender(req, res) {
  const store = initStore(req);
  const {
    community
  } = store.getState().auth;
  if (community && req.url === '/') return res.redirect(`/${community}/new`); // and populate user store with req.user

  if (req.user) store.dispatch((0, _auth.setUser)(req.user));
  if (community) store.dispatch((0, _auth.setCommunity)(community));
  const fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;

  try {
    await handleRouteData({
      req,
      store
    });
    const {
      app,
      rnWebStyles
    } = renderApp({
      url: req.url,
      store
    });
    const html = renderFullPage({
      app,
      fullUrl,
      rnWebStyles,
      initialState: store.getState(),
      req
    }); // global.gc();
    // const { heapUsed } = process.memoryUsage();
    // const mb = Math.round((100 * heapUsed) / 1048576) / 100;
    // console.log('Program is using', mb, 'MB of Heap.');

    return res.send(html);
  } catch (err) {
    console.log('RENDER ERROR', err); // eslint-disable-line

    return res.send(renderFullPage({
      initialState: store.getState(),
      fullUrl,
      req
    }));
  }
}

function createInitialState(req) {
  const cachedCommunity = req.user ? req.user.community : null;
  const userAgent = req.headers['user-agent'] ? _expressUseragent.default.parse(req.headers['user-agent']) : {};
  const width = userAgent.isMobile ? 320 : 1000;

  _reactNativeWeb.Dimensions.set({
    window: {
      width
    }
  });

  return {
    auth: {
      user: req.user,
      confirmed: req.confirmed || req.user && req.user.confirmed,
      // TODO - get this from req.user
      community: req.params.community || cachedCommunity
    },
    navigation: { ..._navigation.initialState,
      width,
      screenSize: (0, _nav.getScreenSize)(width)
    }
  };
}

function renderFullPage({
  app,
  rnWebStyles,
  initialState,
  fullUrl,
  req
}) {
  let cssStyleTags = '';
  let styledComponentsTags = ''; // load extracted styles in head when in production

  if (NODE_ENV === 'development') {
    extractor = new _server2.ChunkExtractor({
      statsFile,
      entrypoints: 'app'
    });
  } else {
    styledComponentsTags = sheet.getStyleTags();
    cssStyleTags = extractor.getStyleTags();
  }

  const meta = fetchMeta({
    initialState,
    req
  });
  const scriptTags = extractor.getScriptTags();
  return `<!doctype html>
    <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

        <title>Relevant: The Only Social Network Built On Trust</title>
        <link rel="icon" href="https://relevant.community/favicon.ico?v=2" />
        <meta name="description" content="${meta.description}" />
        <meta property="og:description" content="${meta.description}" />
        <meta property="og:title" content="${meta.title}" />
        <meta property="og:url" content="${meta.url}" />
        <meta property="og:image" content="${meta.image}" />

        <meta name="twitter:card" content="${meta.type}" />
        <meta name="twitter:site" content="@relevantfeed" />
        <meta name="twitter:title" content="${meta.title}" />
        <meta name="twitter:description" content="${meta.description}" />
        ${meta.image ? `<meta name="twitter:image" content="${meta.image}" />` : ''}

        <meta name="apple-itunes-app" content="app-id=1173025051 app-argument=${fullUrl}">

        <meta name="google-play-app" content="app-id=com.relevantnative">
        <link rel="apple-touch-icon" href="/img/RoundedIcon.png">
        <link rel="android-touch-icon" href="/img/RoundedIcon.png">

        ${rnWebStyles}
        ${cssStyleTags}
        ${styledComponentsTags}

        <script type="text/javascript">!function(e,t,n){function a(){var e=t.getElementsByTagName("script")[0],n=t.createElement("script");n.type="text/javascript",n.async=!0,n.src="https://beacon-v2.helpscout.net",e.parentNode.insertBefore(n,e)}if(e.Beacon=n=function(t,n,a){e.Beacon.readyQueue.push({method:t,options:n,data:a})},n.readyQueue=[],"complete"===t.readyState)return a();e.attachEvent?e.attachEvent("onload",a):e.addEventListener("load",a,!1)}(window,document,window.Beacon||function(){});</script>
        <script type="text/javascript">window.Beacon('init', '40ed799c-8c6c-4226-9215-5adfd59e35eb')</script>

      </head>
      <body>
        <div id="app">${app}</div>
        <script>
          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}
          window.API_SERVER = ${JSON.stringify(process.env.API_SERVER)}
        </script>
        <script>
          window.__APOLLO_STATE__ = ${JSON.stringify(_apolloClient.client.extract())};
        </script>
        ${scriptTags}
      </body>
    </html>
  `;
}

function fetchMeta({
  initialState,
  req
}) {
  const defaultMeta = {
    title: 'Relevant: The only social network built on trust.',
    description: 'Find your community and join the discussion.',
    image: 'https://relevant.community/img/fbImage.png',
    url: 'https://relevant.community' + req.originalUrl,
    type: 'summary_large_image'
  };
  const {
    feed,
    postId,
    commentId
  } = req.params;
  const postMeta = getPostMeta({
    postId,
    commentId,
    initialState
  });
  const communityMeta = getCommunityMeta({
    initialState
  });
  Object.keys(postMeta).forEach(key => {
    if (!postMeta[key]) delete postMeta[key];
  });
  if (postId) return { ...defaultMeta,
    ...communityMeta,
    ...postMeta
  };
  if (feed) return { ...defaultMeta,
    ...communityMeta
  };
  return defaultMeta;
}

function getPostMeta({
  initialState,
  postId,
  commentId
}) {
  const {
    posts
  } = initialState;
  if (!postId && !commentId) return {};
  const post = posts.posts[postId];
  const comment = posts.posts[commentId];
  const userImage = comment ? comment.embeddedUser.image : null;
  const userComment = comment ? `@${comment.embeddedUser.name}: ${comment.body}` : null;
  if (!post) return {};
  const linkData = post.metaPost ? posts.links[post.metaPost] : post;
  const {
    title
  } = linkData;
  const image = userImage || linkData.image || 'https://relevant.community/img/r-big.png';
  const description = userComment || post.body || linkData.description;
  const type = image && !userImage ? 'summary_large_image' : 'summary';
  return {
    title,
    image,
    description,
    type
  };
}

function getCommunityMeta({
  initialState
}) {
  const {
    auth,
    community: communityState
  } = initialState;
  const community = communityState.communities[auth.community];
  if (!community) return {};
  const {
    description
  } = community;
  const image = community.image || 'https://relevant.community/img/r-big.png';
  const title = community.name;
  const type = 'summary';
  return {
    image,
    title,
    description,
    type
  };
}

async function handleRouteData({
  req,
  store
}) {
  const branch = (0, _reactRouterConfig.matchRoutes)(_routes.default, req.url);
  const promises = branch.map(async ({
    route,
    match
  }) => {
    const {
      params
    } = match;
    const {
      fetchData
    } = route.component; // TODO can you get away without sending params and send whole store?

    return fetchData instanceof Function ? fetchData(store.dispatch, params) : Promise.resolve(null);
  });
  return Promise.all(promises);
}

function renderApp({
  url,
  store
}) {
  const context = {};
  const nonce = new Date().getTime();

  const App = () => /*#__PURE__*/_react.default.createElement(_reactCommon.ApolloProvider, {
    client: _apolloClient.client
  }, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, /*#__PURE__*/_react.default.createElement(_reactRouter.StaticRouter, {
    location: url,
    context: context
  }, (0, _reactRouterConfig.renderRoutes)(_routes.default))));

  _reactNativeWeb.AppRegistry.registerComponent('App', () => App);

  const app = (0, _server.renderToString)( /*#__PURE__*/_react.default.createElement(_styledComponents.StyleSheetManager, {
    sheet: sheet.instance
  }, /*#__PURE__*/_react.default.createElement(_server2.ChunkExtractorManager, {
    extractor: extractor
  }, App())));

  const {
    getStyleElement
  } = _reactNativeWeb.AppRegistry.getApplication('App');

  const rnWebStyles = (0, _server.renderToStaticMarkup)(getStyleElement({
    nonce
  }));
  return {
    app,
    rnWebStyles
  };
}
//# sourceMappingURL=render.js.map