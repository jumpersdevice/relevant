"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = handleRender;
exports.createInitialState = createInitialState;
exports.renderFullPage = renderFullPage;
exports.fetchMeta = fetchMeta;
exports.handleRouteData = handleRouteData;
exports.renderApp = renderApp;
exports.initStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _reactRouter = require("react-router");

var _reactRouterConfig = require("react-router-config");

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _auth = require("@r3l/app/lib/modules/auth/auth.actions");

var _routes = _interopRequireDefault(require("@r3l/app/lib/modules/_app/web/routes"));

var _configureStore = _interopRequireDefault(require("@r3l/app/lib/core/web/configureStore"));

var _styledComponents = require("styled-components");

var _reactNativeWeb = require("react-native-web");

var _expressUseragent = _interopRequireDefault(require("express-useragent"));

var _nav = require("@r3l/app/lib/utils/nav");

var _apolloClient = require("./apollo.client.server");

var _reactCommon = require("@apollo/react-common");

var _navigation = require("@r3l/app/lib/modules/navigation/navigation.reducer");

var _server2 = require("@loadable/server");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var {
  NODE_ENV
} = process.env;
var sheet = new _styledComponents.ServerStyleSheet();
var statsFileName = NODE_ENV !== 'development' ? 'loadable-stats' : 'loadable-stats-dev';
var statsFile = "@r3l/app/public/dist/".concat(statsFileName, ".json"); // This is the stats file generated by webpack loadable plugin
// We create an extractor from the statsFile

var extractor = NODE_ENV !== 'development' ? new _server2.ChunkExtractor({
  statsFile,
  entrypoints: 'app'
}) : null;
var initStore = (0, _redux.compose)(_configureStore.default, createInitialState);
exports.initStore = initStore;

function handleRender(_x, _x2) {
  return _handleRender.apply(this, arguments);
}

function _handleRender() {
  _handleRender = (0, _asyncToGenerator2.default)(function* (req, res) {
    var store = initStore(req);
    var {
      community
    } = store.getState().auth;
    if (community && req.url === '/') return res.redirect("/".concat(community, "/new")); // and populate user store with req.user

    if (req.user) store.dispatch((0, _auth.setUser)(req.user));
    if (community) store.dispatch((0, _auth.setCommunity)(community));
    var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;

    try {
      yield handleRouteData({
        req,
        store
      });
      var {
        app,
        rnWebStyles
      } = renderApp({
        url: req.url,
        store
      });
      var html = renderFullPage({
        app,
        fullUrl,
        rnWebStyles,
        initialState: store.getState(),
        req
      }); // global.gc();
      // const { heapUsed } = process.memoryUsage();
      // const mb = Math.round((100 * heapUsed) / 1048576) / 100;
      // console.log('Program is using', mb, 'MB of Heap.');

      return res.send(html);
    } catch (err) {
      console.log('RENDER ERROR', err); // eslint-disable-line

      return res.send(renderFullPage({
        initialState: store.getState(),
        fullUrl,
        req
      }));
    }
  });
  return _handleRender.apply(this, arguments);
}

function createInitialState(req) {
  var cachedCommunity = req.user ? req.user.community : null;
  var userAgent = req.headers['user-agent'] ? _expressUseragent.default.parse(req.headers['user-agent']) : {};
  var width = userAgent.isMobile ? 320 : 1000;

  _reactNativeWeb.Dimensions.set({
    window: {
      width
    }
  });

  return {
    auth: {
      user: req.user,
      confirmed: req.confirmed || req.user && req.user.confirmed,
      // TODO - get this from req.user
      community: req.params.community || cachedCommunity
    },
    navigation: _objectSpread(_objectSpread({}, _navigation.initialState), {}, {
      width,
      screenSize: (0, _nav.getScreenSize)(width)
    })
  };
}

function renderFullPage(_ref) {
  var {
    app,
    rnWebStyles,
    initialState,
    fullUrl,
    req
  } = _ref;
  var cssStyleTags = '';
  var styledComponentsTags = ''; // load extracted styles in head when in production

  if (NODE_ENV === 'development') {
    extractor = new _server2.ChunkExtractor({
      statsFile,
      entrypoints: 'app'
    });
  } else {
    styledComponentsTags = sheet.getStyleTags();
    cssStyleTags = extractor.getStyleTags();
  }

  var meta = fetchMeta({
    initialState,
    req
  });
  var scriptTags = extractor.getScriptTags();
  return "<!doctype html>\n    <html>\n      <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n        <title>Relevant: The Only Social Network Built On Trust</title>\n        <link rel=\"icon\" href=\"https://relevant.community/favicon.ico?v=2\" />\n        <meta name=\"description\" content=\"".concat(meta.description, "\" />\n        <meta property=\"og:description\" content=\"").concat(meta.description, "\" />\n        <meta property=\"og:title\" content=\"").concat(meta.title, "\" />\n        <meta property=\"og:url\" content=\"").concat(meta.url, "\" />\n        <meta property=\"og:image\" content=\"").concat(meta.image, "\" />\n\n        <meta name=\"twitter:card\" content=\"").concat(meta.type, "\" />\n        <meta name=\"twitter:site\" content=\"@relevantfeed\" />\n        <meta name=\"twitter:title\" content=\"").concat(meta.title, "\" />\n        <meta name=\"twitter:description\" content=\"").concat(meta.description, "\" />\n        ").concat(meta.image ? "<meta name=\"twitter:image\" content=\"".concat(meta.image, "\" />") : '', "\n\n        <meta name=\"apple-itunes-app\" content=\"app-id=1173025051 app-argument=").concat(fullUrl, "\">\n\n        <meta name=\"google-play-app\" content=\"app-id=com.relevantnative\">\n        <link rel=\"apple-touch-icon\" href=\"/img/RoundedIcon.png\">\n        <link rel=\"android-touch-icon\" href=\"/img/RoundedIcon.png\">\n\n        ").concat(rnWebStyles, "\n        ").concat(cssStyleTags, "\n        ").concat(styledComponentsTags, "\n\n        <script type=\"text/javascript\">!function(e,t,n){function a(){var e=t.getElementsByTagName(\"script\")[0],n=t.createElement(\"script\");n.type=\"text/javascript\",n.async=!0,n.src=\"https://beacon-v2.helpscout.net\",e.parentNode.insertBefore(n,e)}if(e.Beacon=n=function(t,n,a){e.Beacon.readyQueue.push({method:t,options:n,data:a})},n.readyQueue=[],\"complete\"===t.readyState)return a();e.attachEvent?e.attachEvent(\"onload\",a):e.addEventListener(\"load\",a,!1)}(window,document,window.Beacon||function(){});</script>\n        <script type=\"text/javascript\">window.Beacon('init', '40ed799c-8c6c-4226-9215-5adfd59e35eb')</script>\n\n      </head>\n      <body>\n        <div id=\"app\">").concat(app, "</div>\n        <script>\n          window.__INITIAL_STATE__ = ").concat(JSON.stringify(initialState), "\n        </script>\n        <script>\n          window.__APOLLO_STATE__ = ").concat(JSON.stringify(_apolloClient.client.extract()), ";\n        </script>\n        ").concat(scriptTags, "\n      </body>\n    </html>\n  ");
}

function fetchMeta(_ref2) {
  var {
    initialState,
    req
  } = _ref2;
  var defaultMeta = {
    title: 'Relevant: The only social network built on trust.',
    description: 'Find your community and join the discussion.',
    image: 'https://relevant.community/img/fbImage.png',
    url: 'https://relevant.community' + req.originalUrl,
    type: 'summary_large_image'
  };
  var {
    feed,
    postId,
    commentId
  } = req.params;
  var postMeta = getPostMeta({
    postId,
    commentId,
    initialState
  });
  var communityMeta = getCommunityMeta({
    initialState
  });
  Object.keys(postMeta).forEach(key => {
    if (!postMeta[key]) delete postMeta[key];
  });
  if (postId) return _objectSpread(_objectSpread(_objectSpread({}, defaultMeta), communityMeta), postMeta);
  if (feed) return _objectSpread(_objectSpread({}, defaultMeta), communityMeta);
  return defaultMeta;
}

function getPostMeta(_ref3) {
  var {
    initialState,
    postId,
    commentId
  } = _ref3;
  var {
    posts
  } = initialState;
  if (!postId && !commentId) return {};
  var post = posts.posts[postId];
  var comment = posts.posts[commentId];
  var userImage = comment ? comment.embeddedUser.image : null;
  var userComment = comment ? "@".concat(comment.embeddedUser.name, ": ").concat(comment.body) : null;
  if (!post) return {};
  var linkData = post.metaPost ? posts.links[post.metaPost] : post;
  var {
    title
  } = linkData;
  var image = userImage || linkData.image || 'https://relevant.community/img/r-big.png';
  var description = userComment || post.body || linkData.description;
  var type = image && !userImage ? 'summary_large_image' : 'summary';
  return {
    title,
    image,
    description,
    type
  };
}

function getCommunityMeta(_ref4) {
  var {
    initialState
  } = _ref4;
  var {
    auth,
    community: communityState
  } = initialState;
  var community = communityState.communities[auth.community];
  if (!community) return {};
  var {
    description
  } = community;
  var image = community.image || 'https://relevant.community/img/r-big.png';
  var title = community.name;
  var type = 'summary';
  return {
    image,
    title,
    description,
    type
  };
}

function handleRouteData(_x3) {
  return _handleRouteData.apply(this, arguments);
}

function _handleRouteData() {
  _handleRouteData = (0, _asyncToGenerator2.default)(function* (_ref5) {
    var {
      req,
      store
    } = _ref5;
    var branch = (0, _reactRouterConfig.matchRoutes)(_routes.default, req.url);
    var promises = branch.map( /*#__PURE__*/function () {
      var _ref8 = (0, _asyncToGenerator2.default)(function* (_ref7) {
        var {
          route,
          match
        } = _ref7;
        var {
          params
        } = match;
        var {
          fetchData
        } = route.component; // TODO can you get away without sending params and send whole store?

        return fetchData instanceof Function ? fetchData(store.dispatch, params) : Promise.resolve(null);
      });

      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }());
    return Promise.all(promises);
  });
  return _handleRouteData.apply(this, arguments);
}

function renderApp(_ref6) {
  var {
    url,
    store
  } = _ref6;
  var context = {};
  var nonce = new Date().getTime();

  var App = () => /*#__PURE__*/_react.default.createElement(_reactCommon.ApolloProvider, {
    client: _apolloClient.client
  }, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, /*#__PURE__*/_react.default.createElement(_reactRouter.StaticRouter, {
    location: url,
    context: context
  }, (0, _reactRouterConfig.renderRoutes)(_routes.default))));

  _reactNativeWeb.AppRegistry.registerComponent('App', () => App);

  var app = (0, _server.renderToString)( /*#__PURE__*/_react.default.createElement(_styledComponents.StyleSheetManager, {
    sheet: sheet.instance
  }, /*#__PURE__*/_react.default.createElement(_server2.ChunkExtractorManager, {
    extractor: extractor
  }, App())));

  var {
    getStyleElement
  } = _reactNativeWeb.AppRegistry.getApplication('App');

  var rnWebStyles = (0, _server.renderToStaticMarkup)(getStyleElement({
    nonce
  }));
  return {
    app,
    rnWebStyles
  };
}
//# sourceMappingURL=render.js.map