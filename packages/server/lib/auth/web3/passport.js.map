{"version":3,"sources":["../../../src/auth/web3/passport.js"],"names":["passport","use","Strategy","req","callback","user","authorizeUser","Error","err","sigAddress","verifyEthSignature","body","ethLogin","save","User","findOne","signature","msg","utils","verifyMessage","JSON","stringify","address","exp","claimExp","Date"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,kBAASC,GAAT,CACE,MADF,EAEE,IAAIC,wBAAJ;AAAA,6CAAa,WAAOC,GAAP,EAAYC,QAAZ,EAAyB;AACpC,QAAI;AACF,UAAMC,IAAI,SAASC,aAAa,CAACH,GAAD,CAAhC;AACA,UAAI,CAACE,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AACX,aAAOH,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAf;AACD,KAJD,CAIE,OAAOG,GAAP,EAAY;AACZ,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD;AACF,GARD;;AAAA;AAAA;AAAA;AAAA,IAFF;;SAasBF,a;;;;;mDAAf,WAA6BH,GAA7B,EAAkC;AACvC,QAAMM,UAAU,GAAGC,kBAAkB,CAACP,GAAG,CAACQ,IAAL,CAArC,CADuC,CAEvC;;AACA,QAAIR,GAAG,CAACE,IAAR,EAAc;AACZF,MAAAA,GAAG,CAACE,IAAJ,CAASO,QAAT,GAAoBH,UAApB;AACA,YAAMN,GAAG,CAACE,IAAJ,CAASQ,IAAT,EAAN;AACA,aAAOV,GAAG,CAACE,IAAX;AACD;;AACD,WAAOS,cAAKC,OAAL,CAAa;AAAEH,MAAAA,QAAQ,EAAEH;AAAZ,KAAb,CAAP;AACD,G;;;;AAEM,SAASC,kBAAT,QAAgD;AAAA,MAApB;AAAEM,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAoB;AACrD,MAAI,CAACD,SAAD,IAAc,CAACC,GAAnB,EAAwB,MAAMV,KAAK,CAAC,8BAAD,CAAX;;AACxB,MAAME,UAAU,GAAGS,cAAMC,aAAN,CAAoBC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAApB,EAAyCD,SAAzC,CAAnB;;AAEA,MAAIP,UAAU,KAAKQ,GAAG,CAACK,OAAvB,EAAgC,MAAM,IAAIf,KAAJ,CAAU,yBAAV,CAAN;AAEhC,MAAM;AAAEgB,IAAAA;AAAF,MAAUN,GAAhB;AACA,MAAMO,QAAQ,GAAG,IAAIC,IAAJ,CAASF,GAAG,GAAG,IAAf,CAAjB;AACA,MAAIC,QAAQ,GAAG,IAAIC,IAAJ,EAAf,EAA2B,MAAM,IAAIlB,KAAJ,CAAU,2BAAV,CAAN;AAC3B,SAAOE,UAAP;AACD","sourcesContent":["import { utils } from 'ethers';\nimport { Strategy } from 'passport-custom';\nimport passport from 'passport';\nimport User from 'server/api/user/user.model';\n\npassport.use(\n  'web3',\n  new Strategy(async (req, callback) => {\n    try {\n      const user = await authorizeUser(req);\n      if (!user) throw new Error('User not found');\n      return callback(null, user);\n    } catch (err) {\n      return callback(err);\n    }\n  })\n);\n\nexport async function authorizeUser(req) {\n  const sigAddress = verifyEthSignature(req.body);\n  // user is already logged in\n  if (req.user) {\n    req.user.ethLogin = sigAddress;\n    await req.user.save();\n    return req.user;\n  }\n  return User.findOne({ ethLogin: sigAddress });\n}\n\nexport function verifyEthSignature({ signature, msg }) {\n  if (!signature || !msg) throw Error('Missing signature parameters');\n  const sigAddress = utils.verifyMessage(JSON.stringify(msg), signature);\n\n  if (sigAddress !== msg.address) throw new Error(\"Signature doesn't match\");\n\n  const { exp } = msg;\n  const claimExp = new Date(exp * 1000);\n  if (claimExp < new Date()) throw new Error('This signature is expired');\n  return sigAddress;\n}\n"],"file":"passport.js"}