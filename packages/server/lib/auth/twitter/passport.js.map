{"version":3,"sources":["../../../src/auth/twitter/passport.js"],"names":["passport","require","TwitterStrategy","Strategy","promisify","config","User","Invite","auth","exports","nativeAuth","req","res","next","profile","twitterAuth","invitecode","body","userID","Error","getProfile","user","handleTwitterAuth","token","signToken","_id","role","json","err","setup","use","consumerKey","process","env","TWITTER_ID","consumerSecret","TWITTER_SECRET","callbackURL","twitter","passReqToCallback","includeEmail","tokenSecret","done","authToken","authTokenSecret","query","connectedToUser","isConnectedToDifferentUser","findOne","twitterId","id","_json","email","length","confirmed","isNewUser","handle","username","addNewTwitterUser","addTwitterProfile","initialCoins","processInvite","addReward","type","console","log","save","props","user_id","url","userProfile","bind","description","entities","urls","forEach","u","replace","display_url","image","profile_image_url_https","twitterHandle","twitterEmail","twitterImage","bio","updateMeta","name","displayName","twitterAuthToken","twitterAuthSecret","$ne","toString","handleExists","Math","random","substr","provider"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BE,QAApD;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBH,OAAO,CAAC,MAAD,CAA7B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,uBAAtB;;AACA,MAAMK,IAAI,GAAGL,OAAO,6BAApB;;AACA,MAAMM,MAAM,GAAGN,OAAO,kCAAtB;;AACA,MAAMO,IAAI,GAAGP,OAAO,mBAApB,C,CAEA;;;AACAQ,OAAO,CAACC,UAAR,GAAqB,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC7C,MAAI;AACF,UAAM;AAAEC,MAAAA,OAAO,EAAEC,WAAX;AAAwBC,MAAAA;AAAxB,QAAuCL,GAAG,CAACM,IAAjD;AACA,QAAI,CAACF,WAAD,IAAgB,CAACA,WAAW,CAACG,MAAjC,EAAyC,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AAEzC,UAAML,OAAO,GAAG,MAAMM,UAAU,CAACL,WAAD,CAAhC;AACA,UAAMM,IAAI,GAAG,MAAMC,iBAAiB,CAAC;AAAEX,MAAAA,GAAF;AAAOI,MAAAA,WAAP;AAAoBD,MAAAA,OAApB;AAA6BE,MAAAA;AAA7B,KAAD,CAApC;AAEA,UAAMO,KAAK,GAAGf,IAAI,CAACgB,SAAL,CAAeH,IAAI,CAACI,GAApB,EAAyBJ,IAAI,CAACK,IAA9B,CAAd;AACA,WAAOd,GAAG,CAACe,IAAJ,CAAS;AAAEJ,MAAAA,KAAF;AAASF,MAAAA;AAAT,KAAT,CAAP;AACD,GATD,CASE,OAAOO,GAAP,EAAY;AACZ,WAAOf,IAAI,CAACe,GAAD,CAAX;AACD;AACF,CAbD,C,CAeA;;;AACAnB,OAAO,CAACoB,KAAR,GAAgB,MAAM;AACpB7B,EAAAA,QAAQ,CAAC8B,GAAT,CACE,IAAI5B,eAAJ,CACE;AACE6B,IAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAD3B;AAEEC,IAAAA,cAAc,EAAEH,OAAO,CAACC,GAAR,CAAYG,cAF9B;AAGEC,IAAAA,WAAW,EAAEhC,MAAM,CAACiC,OAAP,CAAeD,WAH9B;AAIEE,IAAAA,iBAAiB,EAAE,IAJrB;AAKEC,IAAAA,YAAY,EAAE;AALhB,GADF,EAQE,OAAO7B,GAAP,EAAYY,KAAZ,EAAmBkB,WAAnB,EAAgC3B,OAAhC,EAAyC4B,IAAzC,KAAkD;AAChD,QAAI;AACF,YAAM3B,WAAW,GAAG;AAClB4B,QAAAA,SAAS,EAAEpB,KADO;AAElBqB,QAAAA,eAAe,EAAEH;AAFC,OAApB;AAIA,YAAM;AAAEzB,QAAAA;AAAF,UAAiBL,GAAG,CAACkC,KAA3B;AACA,YAAMxB,IAAI,GAAG,MAAMC,iBAAiB,CAAC;AAAEX,QAAAA,GAAF;AAAOI,QAAAA,WAAP;AAAoBD,QAAAA,OAApB;AAA6BE,QAAAA;AAA7B,OAAD,CAApC;AACA,aAAO0B,IAAI,CAAC,IAAD,EAAOrB,IAAP,CAAX;AACD,KARD,CAQE,OAAOO,GAAP,EAAY;AACZ,aAAOc,IAAI,CAACd,GAAD,CAAX;AACD;AACF,GApBH,CADF;AAwBD,CAzBD;;AA2BO,eAAeN,iBAAf,CAAiC;AAAEX,EAAAA,GAAF;AAAOI,EAAAA,WAAP;AAAoBD,EAAAA,OAApB;AAA6BE,EAAAA;AAA7B,CAAjC,EAA4E;AACjF,MAAI,CAACF,OAAL,EAAc,MAAM,IAAIK,KAAJ,CAAU,yBAAV,CAAN;AAEd,MAAI;AAAEE,IAAAA;AAAF,MAAWV,GAAf;AAEA,QAAMmC,eAAe,GAAG,MAAMC,0BAA0B,CAAC;AAAE1B,IAAAA,IAAF;AAAQP,IAAAA;AAAR,GAAD,CAAxD;;AAEA,MAAIgC,eAAJ,EAAqB;AACnB,UAAM,IAAI3B,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,MAAI,CAACE,IAAL,EAAWA,IAAI,GAAG,MAAMf,IAAI,CAAC0C,OAAL,CAAa;AAAEC,IAAAA,SAAS,EAAEnC,OAAO,CAACoC;AAArB,GAAb,CAAb,CAXsE,CAajF;AACA;;AACA,MAAI,CAAC7B,IAAD,IAASP,OAAO,CAACqC,KAAR,CAAcC,KAAvB,IAAgCtC,OAAO,CAACqC,KAAR,CAAcC,KAAd,CAAoBC,MAAxD,EAAgE;AAC9DhC,IAAAA,IAAI,GAAG,MAAMf,IAAI,CAAC0C,OAAL,CAAa;AACxBI,MAAAA,KAAK,EAAEtC,OAAO,CAACqC,KAAR,CAAcC,KADG;AAExBE,MAAAA,SAAS,EAAE;AAFa,KAAb,CAAb;AAID;;AAED,QAAMC,SAAS,GAAG,CAAClC,IAAD,IAAS,KAA3B;AAEA,QAAMmC,MAAM,GAAG1C,OAAO,CAAC2C,QAAvB;;AACA,MAAIF,SAAJ,EAAe;AACblC,IAAAA,IAAI,GAAG,MAAMqC,iBAAiB,CAAC;AAAEF,MAAAA,MAAF;AAAUxC,MAAAA;AAAV,KAAD,CAA9B;AACAK,IAAAA,IAAI,GAAG,MAAMsC,iBAAiB,CAAC;AAAE7C,MAAAA,OAAF;AAAWO,MAAAA,IAAX;AAAiBN,MAAAA;AAAjB,KAAD,CAA9B;AACA,UAAM,8BAAmBM,IAAnB,CAAN;AACAA,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACuC,YAAL,EAAb;;AACA,QAAI5C,UAAU,IAAIA,UAAU,KAAK,WAAjC,EAA8C;AAC5CK,MAAAA,IAAI,GAAG,MAAMd,MAAM,CAACsD,aAAP,CAAqB;AAAE7C,QAAAA,UAAF;AAAcK,QAAAA;AAAd,OAArB,CAAb,CAD4C,CAE5C;AACA;AACD;AACF,GAVD,MAUO,IAAI,CAACA,IAAI,CAAC4B,SAAV,EAAqB;AAC1B5B,IAAAA,IAAI,GAAG,MAAMsC,iBAAiB,CAAC;AAAE7C,MAAAA,OAAF;AAAWO,MAAAA,IAAX;AAAiBN,MAAAA;AAAjB,KAAD,CAA9B;AACAM,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACyC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAf,CAAb;AACD;;AAED,MAAI,CAACR,SAAD,IAAcvC,UAAd,IAA4BA,UAAU,KAAK,WAA/C,EAA4D;AAC1D,QAAI;AACFK,MAAAA,IAAI,GAAG,MAAM,+BAAkB;AAAEL,QAAAA,UAAF;AAAcK,QAAAA;AAAd,OAAlB,CAAb;AACD,KAFD,CAEE,OAAOO,GAAP,EAAY;AACZoC,MAAAA,OAAO,CAACC,GAAR,CAAYrC,GAAZ,EADY,CACM;AACnB;AACF;;AAED,SAAOP,IAAI,CAAC6C,IAAL,EAAP;AACD;;AAEM,eAAe9C,UAAf,CAA0B+C,KAA1B,EAAiC;AACtC,QAAM;AAAExB,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAiCuB,KAAvC;AACA,QAAMC,OAAO,GAAGD,KAAK,CAACjD,MAAtB,CAFsC,CAER;;AAC9B,QAAMmD,GAAG,GAAG,6CAAZ;AACA,QAAM/B,OAAO,GAAG,IAAIpC,eAAJ,CACd;AACE6B,IAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAD3B;AAEEC,IAAAA,cAAc,EAAEH,OAAO,CAACC,GAAR,CAAYG,cAF9B;AAGEC,IAAAA,WAAW,EAAEhC,MAAM,CAACiC,OAAP,CAAeD,WAH9B;AAIEE,IAAAA,iBAAiB,EAAE,IAJrB;AAKEC,IAAAA,YAAY,EAAE;AALhB,GADc,EAQd,MAAM,IARQ,CAAhB,CAJsC,CAetC;;AACA,QAAM8B,WAAW,GAAGlE,SAAS,CAACkC,OAAO,CAACgC,WAAR,CAAoBC,IAApB,CAAyBjC,OAAzB,CAAD,CAA7B;AAEA,QAAMxB,OAAO,GAAG,MAAMwD,WAAW,CAAC3B,SAAD,EAAYC,eAAZ,EAA6B;AAAEyB,IAAAA,GAAF;AAAOD,IAAAA;AAAP,GAA7B,CAAjC;AACA,SAAOtD,OAAP;AACD;;AAEM,eAAe6C,iBAAf,CAAiC;AAAE7C,EAAAA,OAAF;AAAWC,EAAAA,WAAX;AAAwBM,EAAAA;AAAxB,CAAjC,EAAiE;AACtE,MAAI;AAAEmD,IAAAA;AAAF,MAAkB1D,OAAO,CAACqC,KAA9B;;AACA,MAAIrC,OAAO,CAACqC,KAAR,CAAcsB,QAAd,CAAuBD,WAAvB,IAAsC1D,OAAO,CAACqC,KAAR,CAAcsB,QAAd,CAAuBD,WAAvB,CAAmCE,IAA7E,EAAmF;AACjF5D,IAAAA,OAAO,CAACqC,KAAR,CAAcsB,QAAd,CAAuBD,WAAvB,CAAmCE,IAAnC,CAAwCC,OAAxC,CAAgDC,CAAC,IAAI;AACnDJ,MAAAA,WAAW,GAAGA,WAAW,CAACK,OAAZ,CAAoBD,CAAC,CAACP,GAAtB,EAA2BO,CAAC,CAACE,WAA7B,CAAd;AACD,KAFD;AAGD;;AACD,QAAMC,KAAK,GAAGjE,OAAO,CAACqC,KAAR,CAAc6B,uBAA5B;AACA,QAAMC,aAAa,GAAGnE,OAAO,CAAC2C,QAA9B;AACA,QAAMyB,YAAY,GAAGpE,OAAO,CAACqC,KAAR,CAAcC,KAAnC;AACA,QAAM+B,YAAY,GAAGJ,KAAK,CAACF,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAArB;AAEA,QAAM5B,SAAS,GAAGnC,OAAO,CAACoC,EAA1B,CAZsE,CActE;;AACAsB,EAAAA,WAAW,IAAK,iBAAgB1D,OAAO,CAAC2C,QAAS,EAAjD;AAEA,MAAI,CAACpC,IAAI,CAAC+D,GAAN,IAAa,CAAC/D,IAAI,CAAC+D,GAAL,CAAS/B,MAA3B,EAAmChC,IAAI,CAAC+D,GAAL,GAAWZ,WAAX;;AAEnC,MAAI,CAACnD,IAAI,CAAC0D,KAAN,IAAe,CAAC1D,IAAI,CAAC0D,KAAL,CAAW1B,MAA/B,EAAuC;AACrChC,IAAAA,IAAI,CAAC0D,KAAL,GAAaI,YAAb,CADqC,CAErC;;AACA,UAAM9D,IAAI,CAACgE,UAAL,EAAN;AACD;;AAED,MAAI,CAAChE,IAAI,CAACiE,IAAV,EAAgBjE,IAAI,CAACiE,IAAL,GAAYxE,OAAO,CAACyE,WAApB;;AAEhB,MAAI,CAAClE,IAAI,CAAC+B,KAAN,IAAe8B,YAAf,IAA+BA,YAAY,CAAC7B,MAAhD,EAAwD;AACtDhC,IAAAA,IAAI,CAAC+B,KAAL,GAAa8B,YAAb;AACA7D,IAAAA,IAAI,CAACiC,SAAL;AACD;;AAEDjC,EAAAA,IAAI,CAACiB,OAAL,GAAexB,OAAO,CAACqC,KAAvB;AACA9B,EAAAA,IAAI,CAAC4D,aAAL,GAAqBA,aAArB;AACA5D,EAAAA,IAAI,CAAC8D,YAAL,GAAoBA,YAApB;AACA9D,EAAAA,IAAI,CAAC6D,YAAL,GAAoBA,YAApB;AACA7D,EAAAA,IAAI,CAAC4B,SAAL,GAAiBA,SAAjB;AAEA5B,EAAAA,IAAI,CAACmE,gBAAL,GAAwBzE,WAAW,CAAC4B,SAApC;AACAtB,EAAAA,IAAI,CAACoE,iBAAL,GAAyB1E,WAAW,CAAC6B,eAArC;AAEA,SAAOvB,IAAI,CAAC6C,IAAL,EAAP;AACD;;AAED,eAAenB,0BAAf,CAA0C;AAAE1B,EAAAA,IAAF;AAAQP,EAAAA;AAAR,CAA1C,EAA6D;AAC3D,MAAI,CAACO,IAAL,EAAW,OAAO,IAAP;AACX,SAAOf,IAAI,CAAC0C,OAAL,CAAa;AAAEC,IAAAA,SAAS,EAAEnC,OAAO,CAACoC,EAArB;AAAyBzB,IAAAA,GAAG,EAAE;AAAEiE,MAAAA,GAAG,EAAErE,IAAI,CAACI,GAAL,CAASkE,QAAT;AAAP;AAA9B,GAAb,CAAP;AACD;;AAEM,eAAejC,iBAAf,CAAiC;AAAEF,EAAAA;AAAF,CAAjC,EAA6C;AAClD,QAAMoC,YAAY,GAAG,MAAMtF,IAAI,CAAC0C,OAAL,CAAa;AAAEQ,IAAAA;AAAF,GAAb,CAA3B;;AACA,MAAIoC,YAAJ,EAAkB;AAChBpC,IAAAA,MAAM,IAAIqC,IAAI,CAACC,MAAL,GACPH,QADO,CACE,EADF,EAEPI,MAFO,CAEA,CAFA,EAEG,CAFH,CAAV;AAGD;;AAED,QAAM1E,IAAI,GAAG,IAAIf,IAAJ,CAAS;AACpBoB,IAAAA,IAAI,EAAE,MADc;AAEpB8B,IAAAA,MAFoB;AAGpBwC,IAAAA,QAAQ,EAAE;AAHU,GAAT,CAAb;AAKA,SAAO3E,IAAI,CAAC6C,IAAL,EAAP;AACD","sourcesContent":["import { handleAdminInvite } from 'server/api/invites/invite.controller';\nimport { addUserToEmailList } from 'server/utils/mail';\n\nconst passport = require('passport');\nconst TwitterStrategy = require('passport-twitter').Strategy;\nconst { promisify } = require('util');\nconst config = require('../../config/config');\nconst User = require('../../api/user/user.model');\nconst Invite = require('../../api/invites/invite.model');\nconst auth = require('../auth.service');\n\n// Handles both login and signup via http POST request - native\nexports.nativeAuth = async (req, res, next) => {\n  try {\n    const { profile: twitterAuth, invitecode } = req.body;\n    if (!twitterAuth || !twitterAuth.userID) throw new Error('Missing twitter id');\n\n    const profile = await getProfile(twitterAuth);\n    const user = await handleTwitterAuth({ req, twitterAuth, profile, invitecode });\n\n    const token = auth.signToken(user._id, user.role);\n    return res.json({ token, user });\n  } catch (err) {\n    return next(err);\n  }\n};\n\n// Handles both login and signup via http GET request - web\nexports.setup = () => {\n  passport.use(\n    new TwitterStrategy(\n      {\n        consumerKey: process.env.TWITTER_ID,\n        consumerSecret: process.env.TWITTER_SECRET,\n        callbackURL: config.twitter.callbackURL,\n        passReqToCallback: true,\n        includeEmail: true\n      },\n      async (req, token, tokenSecret, profile, done) => {\n        try {\n          const twitterAuth = {\n            authToken: token,\n            authTokenSecret: tokenSecret\n          };\n          const { invitecode } = req.query;\n          const user = await handleTwitterAuth({ req, twitterAuth, profile, invitecode });\n          return done(null, user);\n        } catch (err) {\n          return done(err);\n        }\n      }\n    )\n  );\n};\n\nexport async function handleTwitterAuth({ req, twitterAuth, profile, invitecode }) {\n  if (!profile) throw new Error('missing twitter profile');\n\n  let { user } = req;\n\n  const connectedToUser = await isConnectedToDifferentUser({ user, profile });\n\n  if (connectedToUser) {\n    throw new Error('A user with this twitter account already exists');\n  }\n\n  if (!user) user = await User.findOne({ twitterId: profile.id });\n\n  // check if we have someone with a matching email\n  // SECURITY RISK (could potentially add email account to another person's email?)\n  if (!user && profile._json.email && profile._json.email.length) {\n    user = await User.findOne({\n      email: profile._json.email,\n      confirmed: true\n    });\n  }\n\n  const isNewUser = !user || false;\n\n  const handle = profile.username;\n  if (isNewUser) {\n    user = await addNewTwitterUser({ handle, invitecode });\n    user = await addTwitterProfile({ profile, user, twitterAuth });\n    await addUserToEmailList(user);\n    user = await user.initialCoins();\n    if (invitecode && invitecode !== 'undefined') {\n      user = await Invite.processInvite({ invitecode, user });\n      // const invite = await Invite.findOne({ code: invitecode, redeemed: { $ne: true } });\n      // if (invite) user = await invite.referral(user);\n    }\n  } else if (!user.twitterId) {\n    user = await addTwitterProfile({ profile, user, twitterAuth });\n    user = await user.addReward({ type: 'twitter' });\n  }\n\n  if (!isNewUser && invitecode && invitecode !== 'undefined') {\n    try {\n      user = await handleAdminInvite({ invitecode, user });\n    } catch (err) {\n      console.log(err); // eslint-disable-line\n    }\n  }\n\n  return user.save();\n}\n\nexport async function getProfile(props) {\n  const { authToken, authTokenSecret } = props;\n  const user_id = props.userID; // eslint-disable-line\n  const url = 'https://api.twitter.com/1.1/users/show.json';\n  const twitter = new TwitterStrategy(\n    {\n      consumerKey: process.env.TWITTER_ID,\n      consumerSecret: process.env.TWITTER_SECRET,\n      callbackURL: config.twitter.callbackURL,\n      passReqToCallback: true,\n      includeEmail: true\n    },\n    () => null\n  );\n\n  // need to bind original object\n  const userProfile = promisify(twitter.userProfile.bind(twitter));\n\n  const profile = await userProfile(authToken, authTokenSecret, { url, user_id });\n  return profile;\n}\n\nexport async function addTwitterProfile({ profile, twitterAuth, user }) {\n  let { description } = profile._json;\n  if (profile._json.entities.description && profile._json.entities.description.urls) {\n    profile._json.entities.description.urls.forEach(u => {\n      description = description.replace(u.url, u.display_url);\n    });\n  }\n  const image = profile._json.profile_image_url_https;\n  const twitterHandle = profile.username;\n  const twitterEmail = profile._json.email;\n  const twitterImage = image.replace('_normal', '');\n\n  const twitterId = profile.id;\n\n  // TODO include twitter bio URL?\n  description += `\\ntwitter.com/${profile.username}`;\n\n  if (!user.bio || !user.bio.length) user.bio = description;\n\n  if (!user.image || !user.image.length) {\n    user.image = twitterImage;\n    // update existing posts using this\n    await user.updateMeta();\n  }\n\n  if (!user.name) user.name = profile.displayName;\n\n  if (!user.email && twitterEmail && twitterEmail.length) {\n    user.email = twitterEmail;\n    user.confirmed;\n  }\n\n  user.twitter = profile._json;\n  user.twitterHandle = twitterHandle;\n  user.twitterImage = twitterImage;\n  user.twitterEmail = twitterEmail;\n  user.twitterId = twitterId;\n\n  user.twitterAuthToken = twitterAuth.authToken;\n  user.twitterAuthSecret = twitterAuth.authTokenSecret;\n\n  return user.save();\n}\n\nasync function isConnectedToDifferentUser({ user, profile }) {\n  if (!user) return null;\n  return User.findOne({ twitterId: profile.id, _id: { $ne: user._id.toString() } });\n}\n\nexport async function addNewTwitterUser({ handle }) {\n  const handleExists = await User.findOne({ handle });\n  if (handleExists) {\n    handle += Math.random()\n      .toString(36)\n      .substr(2, 3);\n  }\n\n  const user = new User({\n    role: 'temp',\n    handle,\n    provider: 'twitter'\n  });\n  return user.save();\n}\n"],"file":"passport.js"}