{"version":3,"sources":["../../src/utils/web3.provider.js"],"names":["web3","rpcUrl","metamask","defaultOptions","getRpcUrl","getNetworkName","id","parseInt","getMetamask","initMetamask","getProvider","options","initProvider","window","ethereum","provider","createProvider","Web3","buildRpcUrl","slice","providers","WebsocketProvider","HttpProvider","protocol","INFURA_PROTOCOL","network","INFURA_NETWORK","apiKey","INFURA_API_KEY"],"mappings":"qaAAA,iDACA,sCAEA,GAAIA,CAAAA,IAAJ,CACA,GAAIC,CAAAA,MAAJ,CACA,GAAIC,CAAAA,QAAJ,CAEA,GAAMC,CAAAA,cAAc,CAAG,CAAEF,MAAM,CAAEG,SAAS,EAAnB,CAAuBF,QAAQ,CAAE,IAAjC,CAAvB,CAEO,QAASG,CAAAA,cAAT,CAAwBC,EAAxB,CAA4B,CACjC,OAAQC,QAAQ,CAACD,EAAD,CAAK,EAAL,CAAhB,EACE,IAAK,EAAL,CACE,MAAO,SAAP,CACF,IAAK,EAAL,CACE,MAAO,SAAP,CACF,IAAK,EAAL,CACE,MAAO,SAAP,CACF,IAAK,EAAL,CACE,MAAO,QAAP,CACF,IAAK,GAAL,CACE,MAAO,OAAP,CACF,QACE,MAAO,SAAP,CAZJ,CAcD,CAEM,QAASE,CAAAA,WAAT,EAAuB,CAC5B,MAAON,CAAAA,QAAQ,EAAIO,YAAY,EAA/B,CACD,CAEM,QAASC,CAAAA,WAAT,EAA+C,IAA1BC,CAAAA,OAA0B,2DAAhBR,cAAgB,CACpD,MAAOQ,CAAAA,OAAO,CAACT,QAAR,EAAoBS,OAAO,CAACV,MAAR,GAAmBE,cAAc,CAACF,MAAtD,CACHW,YAAY,CAACD,OAAD,CADT,CAEHX,IAAI,EAAIY,YAAY,EAFxB,CAGD,CAEM,QAASH,CAAAA,YAAT,EAAwB,CAC7BP,QAAQ,CAAG,MAAOW,CAAAA,MAAP,GAAkB,WAAlB,EAAiCA,MAAM,CAACC,QAAxC,CAAmDD,MAAM,CAACC,QAA1D,CAAqE,IAAhF,CACA,MAAOZ,CAAAA,QAAP,CACD,CAEM,QAASU,CAAAA,YAAT,EAAgD,IAA1BD,CAAAA,OAA0B,2DAAhBR,cAAgB,CACrD,GAAMY,CAAAA,QAAQ,CAAGC,cAAc,CAACL,OAAD,CAA/B,CACAX,IAAI,CAAG,GAAIiB,aAAJ,CAASF,QAAT,CAAP,CACA,MAAOf,CAAAA,IAAP,CACD,CAEM,QAASI,CAAAA,SAAT,EAAqB,CAC1B,MAAOH,CAAAA,MAAM,EAAIiB,WAAW,EAA5B,CACD,CAEM,QAASF,CAAAA,cAAT,EAAkD,IAA1BL,CAAAA,OAA0B,2DAAhBR,cAAgB,CACvD,GAAIQ,OAAO,CAACT,QAAZ,CAAsB,MAAOS,CAAAA,OAAO,CAACT,QAAf,CACtB,MAAOS,CAAAA,OAAO,CAACV,MAAR,CAAekB,KAAf,CAAqB,CAArB,CAAwB,CAAxB,IAA+B,IAA/B,CACH,GAAIF,cAAKG,SAAL,CAAeC,iBAAnB,CAAqCV,OAAO,CAACV,MAA7C,CADG,CAEH,GAAIgB,cAAKG,SAAL,CAAeE,YAAnB,CAAgCX,OAAO,CAACV,MAAxC,CAFJ,CAGD,CAEM,QAASiB,CAAAA,WAAT,EAIL,IAHAK,CAAAA,QAGA,2DAHWC,uBAGX,IAFAC,CAAAA,OAEA,2DAFUC,sBAEV,IADAC,CAAAA,MACA,2DADSC,sBACT,CACA3B,MAAM,WAAMsB,QAAN,gBAAqBE,OAArB,uBACJF,QAAQ,GAAK,IAAb,CAAoB,KAApB,CAA4B,EADxB,eAEAI,MAFA,CAAN,CAGA,MAAO1B,CAAAA,MAAP,CACD","sourcesContent":["import Web3 from 'web3';\nimport { INFURA_PROTOCOL, INFURA_NETWORK, INFURA_API_KEY } from 'core/config';\n\nlet web3;\nlet rpcUrl;\nlet metamask;\n\nconst defaultOptions = { rpcUrl: getRpcUrl(), metamask: null };\n\nexport function getNetworkName(id) {\n  switch (parseInt(id, 10)) {\n    case 1:\n      return 'Mainnet';\n    case 4:\n      return 'Rinkeby';\n    case 3:\n      return 'Ropsten';\n    case 5:\n      return 'Goerli';\n    case 42:\n      return 'Kovan';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function getMetamask() {\n  return metamask || initMetamask();\n}\n\nexport function getProvider(options = defaultOptions) {\n  return options.metamask || options.rpcUrl !== defaultOptions.rpcUrl\n    ? initProvider(options)\n    : web3 || initProvider();\n}\n\nexport function initMetamask() {\n  metamask = typeof window !== 'undefined' && window.ethereum ? window.ethereum : null;\n  return metamask;\n}\n\nexport function initProvider(options = defaultOptions) {\n  const provider = createProvider(options);\n  web3 = new Web3(provider);\n  return web3;\n}\n\nexport function getRpcUrl() {\n  return rpcUrl || buildRpcUrl();\n}\n\nexport function createProvider(options = defaultOptions) {\n  if (options.metamask) return options.metamask;\n  return options.rpcUrl.slice(0, 2) === 'ws'\n    ? new Web3.providers.WebsocketProvider(options.rpcUrl)\n    : new Web3.providers.HttpProvider(options.rpcUrl);\n}\n\nexport function buildRpcUrl(\n  protocol = INFURA_PROTOCOL,\n  network = INFURA_NETWORK,\n  apiKey = INFURA_API_KEY\n) {\n  rpcUrl = `${protocol}s://${network}.infura.io/${\n    protocol === 'ws' ? 'ws/' : ''\n  }v3/${apiKey}`;\n  return rpcUrl;\n}\n"],"file":"web3.provider.js"}