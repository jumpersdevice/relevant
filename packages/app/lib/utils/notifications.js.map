{"version":3,"sources":["../../src/utils/notifications.js"],"names":["process","env","BROWSER","registerServiceWorker","navigator","serviceWorker","register","err","console","log","initPushNotifications","ready","registration","pushManager","getSubscription","subscription","vapidPublicKey","VAPID_PUBLIC_KEY","convertedVapidKey","urlBase64ToUint8Array","subscribe","userVisibleOnly","applicationServerKey","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt"],"mappings":"8XAAA,GAAIA,OAAO,CAACC,GAAR,CAAYC,OAAZ,GAAwB,IAA5B,CAAkC,CAChCC,qBAAqB,GACtB,CAED,QAASA,CAAAA,qBAAT,EAAiC,CAC/B,GAAI,CACFC,SAAS,CAACC,aAAV,CAAwBC,QAAxB,CAAiC,oBAAjC,EACD,CAAC,MAAOC,GAAP,CAAY,CACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACD,CACF,C,QAEqBG,CAAAA,qB,0KAAf,yOAEwBN,CAAAA,SAAS,CAACC,aAAV,CAAwBM,KAFhD,QAEGC,YAFH,qCAGwBA,CAAAA,YAAY,CAACC,WAAb,CAAyBC,eAAzB,EAHxB,QAGGC,YAHH,mBAICA,YAJD,yDAIsBA,YAJtB,SAMGC,cANH,CAMoBhB,OAAO,CAACC,GAAR,CAAYgB,gBANhC,CAOGC,iBAPH,CAOuBC,qBAAqB,CAACH,cAAD,CAP5C,iCAQIJ,YAAY,CAACC,WAAb,CAAyBO,SAAzB,CAAmC,CACxCC,eAAe,CAAE,IADuB,CAExCC,oBAAoB,CAAEJ,iBAFkB,CAAnC,CARJ,4DAaHV,OAAO,CAACC,GAAR,cAbG,gCAcI,IAdJ,uE,wDAkBP,QAASU,CAAAA,qBAAT,CAA+BI,YAA/B,CAA6C,CAC3C,GAAMC,CAAAA,OAAO,CAAG,IAAIC,MAAJ,CAAW,CAAC,EAAKF,YAAY,CAACG,MAAb,CAAsB,CAA5B,EAAkC,CAA7C,CAAhB,CACA,GAAMC,CAAAA,MAAM,CAAG,CAACJ,YAAY,CAAGC,OAAhB,EAAyBI,OAAzB,CAAiC,IAAjC,CAAuC,GAAvC,EAA4CA,OAA5C,CAAoD,IAApD,CAA0D,GAA1D,CAAf,CAEA,GAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB,CACA,GAAMK,CAAAA,WAAW,CAAG,GAAIC,CAAAA,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB,CAEA,IAAK,GAAIQ,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,OAAO,CAACH,MAA5B,CAAoC,EAAEQ,CAAtC,CAAyC,CACvCF,WAAW,CAACE,CAAD,CAAX,CAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB,CACD,CACD,MAAOF,CAAAA,WAAP,CACD","sourcesContent":["if (process.env.BROWSER === true) {\n  registerServiceWorker();\n}\n\nfunction registerServiceWorker() {\n  try {\n    navigator.serviceWorker.register('/service-worker.js');\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n  }\n}\n\nexport async function initPushNotifications() {\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    const subscription = await registration.pushManager.getSubscription();\n    if (subscription) return subscription;\n\n    const vapidPublicKey = process.env.VAPID_PUBLIC_KEY;\n    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n    return registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: convertedVapidKey\n    });\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n    return null;\n  }\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"file":"notifications.js"}