{"version":3,"sources":["../../src/utils/s3.js"],"names":["RNFetchBlob","Platform","process","env","WEB","require","OS","default","isDataURL","s","match","regex","dataURItoBlob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","uploadToS3","uri","policy","signature","url","publicUrl","signedObjectName","AWS_ACCESS_KEY","body","FormData","config","fileCache","session","fetch","res","path","alert","file","name","append","method","then","response","dispose","status","success","catch","error","executeOnSignedUrl","fileName","extension","substr","signedPutUrl","API_SERVER","Math","random","toString","credentials","json","resJSON","s3Policy","s3Signature","toS3Advanced"],"mappings":"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","sourcesContent":["import { Alert } from 'app/utils/alert';\n\nlet RNFetchBlob;\nlet Platform = {};\n\nif (process.env.WEB !== 'true') {\n  Platform = require('react-native').Platform;\n  if (Platform.OS === 'android') {\n    RNFetchBlob = require('rn-fetch-blob').default;\n  }\n}\n\nfunction isDataURL(s) {\n  return !!s.match(isDataURL.regex);\n}\n// eslint-disable-next-line\nisDataURL.regex = /^\\s*data:([a-z]+\\/[a-z]+(;[a-z\\-]+\\=[a-z\\-]+)?)?(;base64)?,[a-z0-9\\!\\$\\&\\'\\,\\(\\)\\*\\+\\,\\;\\=\\-\\.\\_\\~\\:\\@\\/\\?\\%\\s]*\\s*$/i;\n\nfunction dataURItoBlob(dataURI) {\n  // convert base64/URLEncoded data component to raw binary data held in a string\n  let byteString;\n  if (dataURI.split(',')[0].indexOf('base64') >= 0) {\n    byteString = atob(dataURI.split(',')[1]);\n  } else {\n    byteString = unescape(dataURI.split(',')[1]);\n  }\n\n  // separate out the mime component\n  const mimeString = dataURI\n    .split(',')[0]\n    .split(':')[1]\n    .split(';')[0];\n\n  // write the bytes of the string to a typed array\n  const ia = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return new Blob([ia], { type: mimeString });\n}\n\nasync function uploadToS3(\n  uri,\n  policy,\n  signature,\n  url,\n  publicUrl,\n  signedObjectName,\n  AWS_ACCESS_KEY\n) {\n  const body = new FormData();\n\n  try {\n    if (Platform.OS === 'android' && (uri.match('http://') || uri.match('https://'))) {\n      const res = await RNFetchBlob.config({\n        fileCache: true,\n        session: 'uploads'\n      }).fetch('GET', uri);\n\n      uri = 'file://' + res.path();\n    }\n  } catch (err) {\n    Alert().alert('Error uploading image ', err);\n  }\n\n  let file = {\n    uri,\n    name: signedObjectName,\n    type: 'image/jpeg'\n  };\n\n  if (isDataURL(uri)) {\n    file = dataURItoBlob(uri);\n  }\n\n  body.append('key', signedObjectName);\n  body.append('AWSAccessKeyId', AWS_ACCESS_KEY);\n  body.append('acl', 'public-read');\n  body.append('success_action_status', '201');\n  body.append('Content-Type', file.type);\n  body.append('policy', policy);\n  body.append('signature', signature);\n  body.append('file', file);\n\n  return fetch(url, {\n    method: 'POST',\n    body\n  })\n    .then(response => {\n      if (Platform.OS === 'android') {\n        RNFetchBlob.session('uploads').dispose();\n        if (response.status === 201) {\n          return { success: true, url: publicUrl };\n        }\n        return { success: false, response };\n      }\n      return { success: true, url: publicUrl };\n    })\n    .catch(error => {\n      if (Platform.OS === 'android') {\n        RNFetchBlob.session('uploads').dispose();\n      }\n      return { success: false, url: null, error };\n    });\n}\n\nfunction executeOnSignedUrl(uri, fileName) {\n  const extension = fileName || uri.substr(uri.length - 4);\n  const signedPutUrl = process.env.API_SERVER + '/api/s3/sign';\n  let signedObjectName = Math.random()\n    .toString(36)\n    .substr(2, 9);\n  signedObjectName += '_' + extension;\n\n  return fetch(\n    signedPutUrl +\n      '?s3_object_type=' +\n      'multipart/form-data' +\n      '&s3_object_name=' +\n      signedObjectName,\n    {\n      credentials: 'include',\n      method: 'GET'\n    }\n  )\n    .then(res => res.json())\n    .then(resJSON =>\n      uploadToS3(\n        uri,\n        resJSON.signature.s3Policy,\n        resJSON.signature.s3Signature,\n        resJSON.url,\n        resJSON.publicUrl,\n        signedObjectName,\n        resJSON.AWS_ACCESS_KEY\n      )\n    )\n    .catch(error => ({ success: false, url: null, error }));\n}\n\nexport function toS3Advanced(uri, fileName) {\n  return executeOnSignedUrl(uri, fileName);\n}\n"],"file":"s3.js"}