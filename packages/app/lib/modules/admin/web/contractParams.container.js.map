{"version":3,"sources":["../../../../src/modules/admin/web/contractParams.container.js"],"names":["ParamsTable","styled","table","AdminActions","div","TokenPanel","ContractParams","userBalance","accounts","send","call","getState","types","initialized","readableMethods","getReadableMethods","allocateAmount","setAllocateAmount","forEach","method","releaseTokens","from","allocateRewards","value","toString","e","target","hasValue","map","ParamRow","propTypes","PropTypes","string","func","state","concat","Object","keys","methods","_"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport pickBy from 'lodash/pickBy';\nimport { abbreviateNumber } from 'app/utils/numbers';\nimport {\n  View,\n  Title,\n  BodyText,\n  SecondaryText,\n  Button,\n  NumericalValue\n} from 'modules/styled/uni';\nimport { useRelevantToken } from 'modules/contract/contract.hooks';\nimport { formatBalanceWrite, parseBN } from 'app/utils/eth';\nimport { Input } from 'app/modules/styled/web';\nimport Test from 'modules/profile/apollo.demo';\nimport { useContract } from 'modules/contract/contract.context';\nimport Treasury from './treasury';\n\nconst ParamsTable = styled.table`\n  margin-top: 10px;\n  margin-left: 20px;\n  th,\n  td {\n    padding: 15px;\n    text-align: left;\n  }\n  tr:nth-child(even) {\n    background-color: #f8f8f8;\n  }\n`;\n\nconst AdminActions = styled.div`\n  max-width: 280px;\n  margin-top: 10px;\n`;\n\nexport default function TokenPanel() {\n  return (\n    <Fragment>\n      <Treasury />\n      <Test />\n      <ContractParams />\n    </Fragment>\n  );\n}\n\nfunction ContractParams() {\n  const { userBalance, accounts, send, call, getState } = useRelevantToken();\n  const { types, initialized } = useContract();\n  const readableMethods = types ? getReadableMethods(types) : [];\n  const [allocateAmount, setAllocateAmount] = useState();\n\n  useEffect(() => {\n    if (!initialized) return;\n    call && readableMethods.forEach(method => call(method));\n  }, [call, initialized]); // eslint-disable-line\n\n  const releaseTokens = () => send('releaseTokens', { from: accounts[0] });\n  const allocateRewards = () =>\n    send(\n      'allocateRewards',\n      { from: accounts[0] },\n      formatBalanceWrite(allocateAmount, 18)\n    );\n\n  return (\n    <View m={4}>\n      <Title>Contract Params</Title>\n      <View>\n        <View>\n          <SecondaryText>\n            User address: {accounts && accounts[0] ? accounts[0] : 'Loading...'}\n          </SecondaryText>\n          <SecondaryText>\n            User balance:{' '}\n            {userBalance && userBalance.value\n              ? parseBN(userBalance.value).toString()\n              : 'Loading...'}\n          </SecondaryText>\n          {accounts && accounts[0] && (\n            <AdminActions>\n              <Button mr={'auto'} mt={4} onClick={() => releaseTokens()}>\n                Release Tokens\n              </Button>\n              <View mt={4} fdirection=\"row\" align={'flex-start'}>\n                <Input\n                  mt={'0'}\n                  p={1.7}\n                  type=\"text\"\n                  value={allocateAmount}\n                  onChange={e => setAllocateAmount(e.target.value)}\n                />\n                <Button mr={'auto'} onClick={() => allocateRewards()}>\n                  Allocate Rewards\n                </Button>\n              </View>\n            </AdminActions>\n          )}\n          <BodyText>\n            <ParamsTable>\n              <tbody>\n                <tr>\n                  <th>Method</th>\n                  <th>Value</th>\n                </tr>\n              </tbody>\n              <tbody>\n                {hasValue(getState) &&\n                  readableMethods.map(method => (\n                    <ParamRow\n                      key={method}\n                      method={method}\n                      getState={getState}\n                      call={call}\n                    />\n                  ))}\n              </tbody>\n            </ParamsTable>\n          </BodyText>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nParamRow.propTypes = {\n  method: PropTypes.string,\n  getState: PropTypes.func,\n  call: PropTypes.func\n};\n\nfunction ParamRow({ method, call, getState }) {\n  return (\n    <tr>\n      <td>{method}</td>\n      <td>\n        <NumericalValue>{abbreviateNumber(getState(method).value)}</NumericalValue>\n      </td>\n      <td>\n        <Button onClick={() => call(method)}>Call</Button>\n      </td>\n      <td>\n        <Input />\n      </td>\n    </tr>\n  );\n}\n\n// Utils\nfunction hasValue(state) {\n  return state && state('name') && state('name').value;\n}\n\nfunction getReadableMethods(types) {\n  return ['allocatedRewards', 'totalReleased'].concat(\n    Object.keys(\n      pickBy(\n        types.methods,\n        (_, method) =>\n          !types.methods[method].send &&\n          method !== 'balanceOf' &&\n          method !== 'isMinter' &&\n          method !== 'allowance' &&\n          method !== 'partialSum' &&\n          method !== 'nonceOf' &&\n          method !== 'isOwner' &&\n          method !== 'allocatedRewards' &&\n          method !== 'totalReleased' &&\n          method !== 'currentRound' &&\n          method !== 'initializeRewardSplit' &&\n          method !== 'airdropSwitchRound'\n      )\n    )\n  );\n}\n"],"file":"contractParams.container.js"}