{"version":3,"sources":["../../../../src/modules/_app/mobile/drawerRouter.js"],"names":["Analytics","MainStack","container","screen","AppContainer","path","navigationOptions","props","discoverTab","screenProps","tab","tabName","routeName","isLocked","index","header","drawerLockMode","drawerType","edgeWidth","fullWidth","overlayColor","minSwipeDistance","useNativeAnimations","contentComponent","SideNav","gesturesEnabled","drawerWidth","Math","min","defaultNavigationOptions","gestureResponseDistance","horizontal","MainNavigator","DrawerRouter","state","navigation","discover","navigatorRef","prevState","currentState","currentScreen","getActiveRouteName","prevScreen","logEvent","viewName","navigationState","route","routes"],"mappings":"+MAAA,oDACA,uCACA,4DACA,iDACA,8DACA,0FACA,8CACA,uCACA,0D,qGAEA,GAAMA,CAAAA,SAAS,CAAG,oCAAlB,CAEO,GAAMC,CAAAA,SAAS,CAAG,iDACvB,CACEC,SAAS,CAAE,CACTC,MAAM,CAAEC,YADC,CAETC,IAAI,CAAE,EAFG,CAGTC,iBAAiB,CAAE,2BAAAC,KAAK,CAAI,IAETC,CAAAA,WAFS,CAGtBD,KAHsB,CAExBE,WAFwB,CAETD,WAFS,2BAIV,gCAJU,CAIlBE,GAJkB,uBAIlBA,GAJkB,CAK1B,GAAMC,CAAAA,OAAO,CAAGD,GAAG,EAAIA,GAAG,CAACE,SAA3B,CACA,GAAMC,CAAAA,QAAQ,CACXL,WAAW,CAAG,CAAd,EAAmBG,OAAO,GAAK,UAAhC,EAAgDD,GAAG,EAAIA,GAAG,CAACI,KAAJ,CAAY,CAAnE,EAAyE,CAACJ,GAD5E,CAEA,MAAO,CACLK,MAAM,CAAE,IADH,CAELC,cAAc,CAAEH,QAAQ,CAAG,eAAH,CAAqB,UAFxC,CAAP,CAID,CAfQ,CADb,CADuB,CAoBvB,CACEI,UAAU,CAAE,OADd,CAEEC,SAAS,CAAEC,iBAFb,CAGEC,YAAY,CAAE,oBAHhB,CAIEC,gBAAgB,CAAE,EAJpB,CAKEC,mBAAmB,CAAE,IALvB,CAMEC,gBAAgB,CAAEC,gBANpB,CAOEC,eAAe,CAAE,IAPnB,CAQEC,WAAW,CAAE,6BAAMC,CAAAA,IAAI,CAACC,GAAL,CAAS,GAAT,CAAcT,kBAAY,GAA1B,CAAN,EARf,CASEU,wBAAwB,CAAE,0CAAO,CAC/BC,uBAAuB,CAAE,CACvBC,UAAU,CAAEZ,iBADW,CADM,CAAP,EAT5B,CApBuB,CAAlB,C,4BAqCP,GAAMa,CAAAA,aAAa,CAAG,wCAAmB/B,SAAnB,CAAtB,CAEe,QAASgC,CAAAA,YAAT,EAAwB,CACrC,GAAMzB,CAAAA,WAAW,CAAG,4BAAY,SAAA0B,KAAK,QAAIA,CAAAA,KAAK,CAACC,UAAN,CAAiBC,QAAjB,CAA0B1B,GAA9B,EAAjB,CAApB,CACA,MACE,8BAAC,aAAD,EACE,WAAW,CAAE,CAAEF,WAAW,CAAXA,WAAF,CADf,CAEE,SAAS,CAAE,6BAFb,CAGE,GAAG,CAAE,aAAA6B,YAAY,CAAI,CACnB,8BAAqBA,YAArB,EACD,CALH,CAME,uBAAuB,CAAE,iCAACC,SAAD,CAAYC,YAAZ,CAA6B,CACpD,GAAMC,CAAAA,aAAa,CAAGC,kBAAkB,CAACF,YAAD,CAAxC,CACA,GAAMG,CAAAA,UAAU,CAAGD,kBAAkB,CAACH,SAAD,CAArC,CAEA,GAAII,UAAU,GAAKF,aAAnB,CAAkC,CAChCxC,SAAS,CAAC2C,QAAV,CAAmB,YAAnB,CAAiC,CAC/BC,QAAQ,CAAEJ,aADqB,CAAjC,EAGD,CACF,CAfH,gEADF,CAmBD,CAGD,QAASC,CAAAA,kBAAT,CAA4BI,eAA5B,CAA6C,CAC3C,GAAI,CAACA,eAAL,CAAsB,CACpB,MAAO,KAAP,CACD,CACD,GAAMC,CAAAA,KAAK,CAAGD,eAAe,CAACE,MAAhB,CAAuBF,eAAe,CAAC/B,KAAvC,CAAd,CAEA,GAAIgC,KAAK,CAACC,MAAV,CAAkB,CAChB,MAAON,CAAAA,kBAAkB,CAACK,KAAD,CAAzB,CACD,CACD,MAAOA,CAAAA,KAAK,CAAClC,SAAb,CACD","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AppContainer from 'modules/_app/mobile/app.container';\nimport { createAppContainer } from 'react-navigation';\nimport { createDrawerNavigator } from 'react-navigation-drawer';\nimport SideNav from 'modules/navigation/mobile/sideNav.component';\nimport { fullWidth } from 'app/styles/global';\nimport { setTopLevelNavigator, getCurrentRouteAndTab } from 'app/utils/nav';\nimport { analytics } from 'react-native-firebase';\n\nconst Analytics = analytics();\n\nexport const MainStack = createDrawerNavigator(\n  {\n    container: {\n      screen: AppContainer,\n      path: '',\n      navigationOptions: props => {\n        const {\n          screenProps: { discoverTab }\n        } = props;\n        const { tab } = getCurrentRouteAndTab();\n        const tabName = tab && tab.routeName;\n        const isLocked =\n          (discoverTab > 0 && tabName === 'discover') || (tab && tab.index > 0) || !tab;\n        return {\n          header: null,\n          drawerLockMode: isLocked ? 'locked-closed' : 'unlocked'\n        };\n      }\n    }\n  },\n  {\n    drawerType: 'slide',\n    edgeWidth: fullWidth,\n    overlayColor: 'rgba(0, 0, 0, 0.3)',\n    minSwipeDistance: 10,\n    useNativeAnimations: true,\n    contentComponent: SideNav,\n    gesturesEnabled: true,\n    drawerWidth: () => Math.min(320, fullWidth * 0.9),\n    defaultNavigationOptions: () => ({\n      gestureResponseDistance: {\n        horizontal: fullWidth\n      }\n    })\n  }\n);\n\nconst MainNavigator = createAppContainer(MainStack);\n\nexport default function DrawerRouter() {\n  const discoverTab = useSelector(state => state.navigation.discover.tab);\n  return (\n    <MainNavigator\n      screenProps={{ discoverTab }}\n      uriPrefix={'https://relevant.community/'}\n      ref={navigatorRef => {\n        setTopLevelNavigator(navigatorRef);\n      }}\n      onNavigationStateChange={(prevState, currentState) => {\n        const currentScreen = getActiveRouteName(currentState);\n        const prevScreen = getActiveRouteName(prevState);\n\n        if (prevScreen !== currentScreen) {\n          Analytics.logEvent('screenView', {\n            viewName: currentScreen\n          });\n        }\n      }}\n    />\n  );\n}\n\n// gets the current screen from navigation state\nfunction getActiveRouteName(navigationState) {\n  if (!navigationState) {\n    return null;\n  }\n  const route = navigationState.routes[navigationState.index];\n  // dive into nested navigators\n  if (route.routes) {\n    return getActiveRouteName(route);\n  }\n  return route.routeName;\n}\n"],"file":"drawerRouter.js"}