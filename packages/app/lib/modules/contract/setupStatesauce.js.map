{"version":3,"sources":["../../../src/modules/contract/setupStatesauce.js"],"names":["web3Sagas","Object","values","sagas","map","saga","web3Reducers","reducers","accounts","blocks","init","network","context","web3","rpcUrl","metamask","tokenAddress","RelevantToken","NETWORK_NUMBER","instance","Statesauce","contractName","abi","at","web3Instance","contract","types","actions","reducer","selectors"],"mappings":"mrBAAA,8FACA,8CACA,uDACA,4BACA,6CACA,2CACA,mGACA,yC,+0BAEiBA,S,EAAV,QAAUA,CAAAA,SAAV,sIACL,MAAM,iDAAQC,MAAM,CAACC,MAAP,CAAcC,mBAAd,EAAqBC,GAArB,CAAyB,SAAAC,IAAI,QAAI,kBAAKA,IAAL,CAAJ,EAA7B,CAAR,EAAN,CADK,sDAIA,GAAMC,CAAAA,YAAY,CAAG,4CAAqBC,sBAArB,EAArB,C,qCAEQC,CAAAA,Q,CAA6CD,sB,CAA7CC,Q,CAAUC,M,CAAmCF,sB,CAAnCE,M,CAAQC,I,CAA2BH,sB,CAA3BG,I,CAAMC,O,CAAqBJ,sB,CAArBI,O,CAASC,O,CAAYL,sB,CAAZK,O,mHAEhD,GAAMC,CAAAA,IAAI,CAAG,qBAAY,CACvBC,MAAM,CAAE,oBADe,CAEvBC,QAAQ,CAAE,sBAFa,CAAZ,CAAb,CAKO,GAAMC,CAAAA,YAAY,CAAG,iBAAIC,sBAAJ,oBAA+BC,sBAA/B,aAArB,C,kCAEA,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,kCAAJ,CAAeH,uBAAcI,YAA7B,CAA2CJ,uBAAcK,GAAzD,CAA8D,CACpFC,EAAE,CAAEP,YADgF,CAEpFQ,YAAY,CAAEX,IAFsE,CAA9D,CAAjB,C,6BAKQY,CAAAA,Q,CAAuDN,Q,CAAvDM,Q,CAAUC,K,CAA6CP,Q,CAA7CO,K,CAAOC,O,CAAsCR,Q,CAAtCQ,O,CAASC,O,CAA6BT,Q,CAA7BS,O,CAASC,S,CAAoBV,Q,CAApBU,S,CAAWxB,I,CAASc,Q,CAATd,I","sourcesContent":["import Statesauce from 'redux-saga-web3-eth-contract';\nimport { getProvider, getRpcUrl, getMetamask } from 'utils/web3.provider';\nimport get from 'lodash/get';\nimport { combineReducers } from 'redux';\nimport { reducers, sagas } from 'redux-saga-web3';\nimport { all, fork } from 'redux-saga/effects';\nimport RelevantToken from '@r3l/common/lib/contracts/RelevantToken.json';\nimport { NETWORK_NUMBER } from 'app/core/config';\n\nexport function* web3Sagas() {\n  yield all([...Object.values(sagas).map(saga => fork(saga))]);\n}\n\nexport const web3Reducers = combineReducers({ ...reducers });\n\nexport const { accounts, blocks, init, network, context } = reducers;\n\nconst web3 = getProvider({\n  rpcUrl: getRpcUrl(),\n  metamask: getMetamask()\n});\n\nexport const tokenAddress = get(RelevantToken, `networks.${NETWORK_NUMBER}.address`);\n\nexport const instance = new Statesauce(RelevantToken.contractName, RelevantToken.abi, {\n  at: tokenAddress,\n  web3Instance: web3\n});\n\nexport const { contract, types, actions, reducer, selectors, saga } = instance;\n"],"file":"setupStatesauce.js"}