{"version":3,"sources":["../../../src/modules/web_ethTools/tools.container.js"],"names":["EthTools","balance","connectedBalance","account","connectedAccount","differentAccount","network","status","nonce","address","RelevantCoin","props","initialized","methods","balanceOf","cacheCall","nonceOf","fromCache","prevProps","prevState","user","ethAddress","queryBalance","state","children","nextProps","decimals","parseInt","Component","PropTypes","string","object","node","number","mapStateToProps","auth","accounts","contracts","web3","networkId","mapDispatchToProps","dispatch","actions","authActions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as authActions from 'modules/auth/auth.actions';\nimport { toNumber } from 'app/utils/numbers';\nimport Eth from './eth.context';\n\nclass EthTools extends Component {\n  static propTypes = {\n    account: PropTypes.string,\n    user: PropTypes.object,\n    RelevantCoin: PropTypes.object,\n    children: PropTypes.node,\n    network: PropTypes.number,\n    status: PropTypes.string\n  };\n\n  state = {\n    balance: 0,\n    connectedBalance: 0,\n    account: null,\n    connectedAccount: null,\n    differentAccount: null,\n    network: null,\n    status: null,\n    nonce: null\n  };\n\n  queryBalance(address) {\n    const { RelevantCoin } = this.props;\n    if (address && RelevantCoin && RelevantCoin.initialized) {\n      RelevantCoin.methods.balanceOf.cacheCall(address);\n      RelevantCoin.methods.nonceOf.fromCache(address);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    const { account, RelevantCoin, network, status, user } = nextProps;\n\n    if (!RelevantCoin || !RelevantCoin.initialized) return null;\n\n    let balance = 0;\n    let connectedAccount = null;\n    let connectedBalance;\n    let differentAccount = true;\n    let nonce = null;\n\n    if (!user) return null;\n\n    const decimals = toNumber(RelevantCoin.methods.decimals.fromCache(), 0);\n\n    connectedAccount = user.ethAddress ? user.ethAddress[0] : null;\n\n    if (!connectedAccount && !account) return null;\n\n    if (account) {\n      balance = toNumber(RelevantCoin.methods.balanceOf.fromCache(account), decimals);\n    }\n\n    if (connectedAccount) {\n      connectedBalance = toNumber(\n        RelevantCoin.methods.balanceOf.fromCache(connectedAccount),\n        decimals\n      );\n    }\n\n    differentAccount = account !== connectedAccount;\n\n    // nonce won't be correct the first time\n    if (RelevantCoin && RelevantCoin.methods && connectedAccount) {\n      nonce = RelevantCoin.methods.nonceOf.fromCache(connectedAccount);\n      nonce = parseInt(nonce, 0);\n    }\n    return {\n      nonce,\n      balance,\n      account,\n      connectedAccount,\n      connectedBalance,\n      differentAccount,\n      network,\n      status\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { account, user } = this.props;\n    if (!user) return;\n    const connectedAccount = user.ethAddress ? user.ethAddress[0] : null;\n    if (connectedAccount && connectedAccount !== prevState.connectedAccount) {\n      this.queryBalance(connectedAccount);\n    }\n    if (account && account !== prevState.account) {\n      this.queryBalance(account);\n    }\n  }\n\n  render() {\n    return <Eth.Provider value={this.state}>{this.props.children}</Eth.Provider>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  account: state.accounts[0],\n  RelevantCoin: state.contracts.RelevantCoin,\n  network: state.web3.networkId,\n  status: state.web3.status\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({ ...authActions }, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EthTools);\n"],"file":"tools.container.js"}