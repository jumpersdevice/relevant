{"version":3,"sources":["../../../src/modules/tooltip/tooltip.actions.js"],"names":["setButtonTooltip","type","id","SET_BUTTON_TOOLTIP","payload","tooltipReady","ready","TOOLTIP_READY","setTooltipData","data","SET_TOOLTIP_DATA","showTooltip","name","SHOW_TOOLTIP","createToggleAction","el","dispatch","measureInWindow","x","y","w","h","parent"],"mappings":"sQAAA,mDAOO,QAASA,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgCC,EAAhC,CAAoC,CACzC,MAAO,CACLD,IAAI,CAAEE,+BADD,CAELC,OAAO,CAAE,CAAEF,EAAE,CAAFA,EAAF,CAAMD,IAAI,CAAJA,IAAN,CAFJ,CAAP,CAID,CAEM,QAASI,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAClC,MAAO,CACLL,IAAI,CAAEM,0BADD,CAELH,OAAO,CAAEE,KAFJ,CAAP,CAID,CAEM,QAASE,CAAAA,cAAT,CAAwBC,IAAxB,CAA8B,CACnC,MAAO,CACLR,IAAI,CAAES,6BADD,CAELN,OAAO,CAAEK,IAFJ,CAAP,CAID,CAEM,QAASE,CAAAA,WAAT,CAAqBC,IAArB,CAA2B,CAChC,MAAO,CACLX,IAAI,CAAEY,yBADD,CAELT,OAAO,CAAEQ,IAFJ,CAAP,CAID,CAEM,QAASE,CAAAA,kBAAT,CAA4BF,IAA5B,CAAkCG,EAAlC,CAAsC,CAC3C,MAAO,UAAAC,QAAQ,CAAI,CACjB,GAAI,CAACD,EAAL,CAAS,OACTA,EAAE,CAACE,eAAH,CAAmB,SAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAgB,CACjC,GAAMC,CAAAA,MAAM,CAAG,CAAEJ,CAAC,CAADA,CAAF,CAAKC,CAAC,CAADA,CAAL,CAAQC,CAAC,CAADA,CAAR,CAAWC,CAAC,CAADA,CAAX,CAAf,CACA,GAAIH,CAAC,CAAGC,CAAJ,CAAQC,CAAR,CAAYC,CAAZ,GAAkB,CAAtB,CAAyB,OACzBL,QAAQ,CACNR,cAAc,CAAC,CACbI,IAAI,CAAJA,IADa,CAEbU,MAAM,CAANA,MAFa,CAAD,CADR,CAAR,CAMAN,QAAQ,CAACL,WAAW,CAACC,IAAD,CAAZ,CAAR,CACD,CAVD,EAWD,CAbD,CAcD","sourcesContent":["import {\n  SHOW_TOOLTIP,\n  SET_TOOLTIP_DATA,\n  TOOLTIP_READY,\n  SET_BUTTON_TOOLTIP\n} from 'core/actionTypes';\n\nexport function setButtonTooltip(type, id) {\n  return {\n    type: SET_BUTTON_TOOLTIP,\n    payload: { id, type }\n  };\n}\n\nexport function tooltipReady(ready) {\n  return {\n    type: TOOLTIP_READY,\n    payload: ready\n  };\n}\n\nexport function setTooltipData(data) {\n  return {\n    type: SET_TOOLTIP_DATA,\n    payload: data\n  };\n}\n\nexport function showTooltip(name) {\n  return {\n    type: SHOW_TOOLTIP,\n    payload: name\n  };\n}\n\nexport function createToggleAction(name, el) {\n  return dispatch => {\n    if (!el) return;\n    el.measureInWindow((x, y, w, h) => {\n      const parent = { x, y, w, h };\n      if (x + y + w + h === 0) return;\n      dispatch(\n        setTooltipData({\n          name,\n          parent\n        })\n      );\n      dispatch(showTooltip(name));\n    });\n  };\n}\n"],"file":"tooltip.actions.js"}