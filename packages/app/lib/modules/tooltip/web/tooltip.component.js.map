{"version":3,"sources":["../../../../src/modules/tooltip/web/tooltip.component.js"],"names":["TextTooltipComponent","text","title","colors","white","propTypes","PropTypes","string","TOOLTIPS","POST","EARNING","EarningTooltip","TEXT","TextTooltip","id","type","rest","dataTip","data","JSON","parse","props","TT","oneOfType","number"],"mappings":"oXAAA,oDACA,6DACA,mEACA,0FAEA,qCACA,uC,0GAEA,GAAMA,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,UAAGC,CAAAA,IAAH,MAAGA,IAAH,CAASC,KAAT,MAASA,KAAT,OAC3B,8BAAC,SAAD,EAAM,QAAQ,CAAE,EAAhB,CAAoB,IAAI,CAAE,CAA1B,CAA6B,UAAU,CAAE,QAAzC,gEACGA,KAAK,CACJ,6BAAC,UAAD,EAAO,CAAC,CAAEC,eAAOC,KAAjB,CAAwB,EAAE,CAAE,CAA5B,gEACGF,KADH,CADI,CAIF,IALN,CAMGD,IAAI,CACH,6BAAC,aAAD,EAAU,CAAC,CAAEE,eAAOC,KAApB,CAA2B,IAAI,CAAE,CAAjC,gEACGH,IADH,CADG,CAID,IAVN,CAD2B,EAA7B,CAeAD,oBAAoB,CAACK,SAArB,CAAiC,CAC/BJ,IAAI,CAAEK,mBAAUC,MADe,CAE/BL,KAAK,CAAEI,mBAAUC,MAFc,CAAjC,CAKA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,IAAI,CAAE,EADS,CAEfC,OAAO,CAAEC,2BAFM,CAGfC,IAAI,CAAEZ,oBAHS,CAAjB,CA4BO,GAAMa,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,WAAGC,CAAAA,EAAH,OAAGA,EAAH,CAAOC,IAAP,OAAOA,IAAP,CAAgBC,IAAhB,kEACzB,8BAAC,qBAAD,wBACE,SAAS,CAAC,cADZ,CAEE,EAAE,CAAEF,EAFN,CAGE,MAAM,CAAC,OAHT,CAIE,IAAI,CAAEC,IAAI,EAAI,OAJhB,CAME,UAAU,CAAE,oBAAAE,OAAO,CAAI,CACrB,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAb,CACA,GAAI,CAACC,IAAL,CAAW,MAAO,KAAP,CAFU,GAIbH,CAAAA,IAJa,CAIGG,IAJH,CAIbH,IAJa,CAIPM,KAJO,CAIGH,IAJH,CAIPG,KAJO,CAKrB,GAAI,CAACb,QAAQ,CAACO,IAAD,CAAb,CAAqB,MAAO,KAAP,CAErB,GAAMO,CAAAA,EAAE,CAAGd,QAAQ,CAACO,IAAD,CAAnB,CACA,MAAO,8BAAC,EAAD,0BAAQM,KAAR,mEAAP,CACD,CAfH,EAgBML,IAhBN,kEADyB,EAApB,C,gCAqBPH,WAAW,CAACR,SAAZ,CAAwB,CACtBS,EAAE,CAAER,mBAAUiB,SAAV,CAAoB,CAACjB,mBAAUkB,MAAX,CAAmBlB,mBAAUC,MAA7B,CAApB,CADkB,CAEtBQ,IAAI,CAAET,mBAAUC,MAFM,CAAxB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTooltip from 'react-tooltip';\nimport EarningTooltip from 'modules/tooltip/web/postEarningTooltip.component';\n// import styled from 'styled-components';\nimport { BodyText, Title, View } from 'modules/styled/uni';\nimport { colors } from 'app/styles';\n\nconst TextTooltipComponent = ({ text, title }) => (\n  <View maxWidth={32} flex={1} fdirection={'column'}>\n    {title ? (\n      <Title c={colors.white} mb={1}>\n        {title}\n      </Title>\n    ) : null}\n    {text ? (\n      <BodyText c={colors.white} flex={1}>\n        {text}\n      </BodyText>\n    ) : null}\n  </View>\n);\n\nTextTooltipComponent.propTypes = {\n  text: PropTypes.string,\n  title: PropTypes.string\n};\n\nconst TOOLTIPS = {\n  POST: {},\n  EARNING: EarningTooltip,\n  TEXT: TextTooltipComponent\n};\n\n// const StyledReactTooltip = styled(ReactTooltip)`\n//   pointer-events: auto !important;\n//   &.show  {\n//     opacity: 1; !important;\n//   }\n//   /*\n//   background-color: ${colors.white} !important;\n//   box-shadow: 0 0 5px 2px #ccc;*/\n//   box-shadow: 0px 2px 10px 0px ${colors.grey};\n//   border-radius: 0 !important;\n//   /* &:after {\n//     display: none !important;\n//   } */\n//   padding: ${sizing(1.5)};\n//   max-width: ${sizing(60)};\n//   max-height: none !important;;\n//   height: auto !important;;\n//   display: flex;\n//   flex: 1;\n//   z-Index: 10000;\n// `;\n\nexport const TextTooltip = ({ id, type, ...rest }) => (\n  <ReactTooltip\n    className=\"reactTooltip\"\n    id={id}\n    effect=\"solid\"\n    type={type || 'light'}\n    // delayHide={100}\n    getContent={dataTip => {\n      const data = JSON.parse(dataTip);\n      if (!data) return null;\n\n      const { type, props } = data; // eslint-disable-line\n      if (!TOOLTIPS[type]) return null;\n\n      const TT = TOOLTIPS[type];\n      return <TT {...props} />;\n    }}\n    {...rest}\n  />\n);\n\nTextTooltip.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  type: PropTypes.string\n};\n\n// export const CustomTooltip = ({ id, type }) => (\n//   <StyledReactTooltip\n//     className='reactTooltip'\n//     id={id}\n//     effect=\"solid\"\n//     type={type || 'light'}\n//     delayHide={100}\n//     getContent={dataTip => {\n//       const data = JSON.parse(dataTip);\n//       if (!data) return null;\n\n//       const { type, props } = data; // eslint-disable-line\n//       if (!TOOLTIPS[type]) return null;\n\n//       const TT = TOOLTIPS[type];\n//       return <TT {...props} />;\n//     }}\n//   />\n// );\n\n// CustomTooltip.propTypes = {\n//   id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n//   type: PropTypes.string\n// };\n"],"file":"tooltip.component.js"}