{"version":3,"sources":["../../../../src/modules/auth/web/resetPassword.component.js"],"names":["ResetPassword","props","vals","user","auth","actions","resetPassword","password","token","then","success","showModal","close","submit","bind","location","route","path","exact","match","pathname","params","handleSubmit","FORM_FIELDS","name","component","ReduxFormField","type","label","validate","required","map","field","index","Component","PropTypes","object","history","func","mapStateToProps","state","mapDispatchToProps","dispatch","hideModal","form","errors","confirmPassword","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, matchPath } from 'react-router-dom';\nimport ReduxFormField from 'modules/styled/form/reduxformfield.component';\nimport { Field, reduxForm } from 'redux-form';\nimport { Button, Form, View } from 'modules/styled/web';\nimport { required } from 'modules/form/validators';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { resetPassword } from 'modules/auth/auth.actions';\nimport { hideModal, showModal } from 'modules/navigation/navigation.actions';\n\nclass ResetPassword extends Component {\n  static propTypes = {\n    match: PropTypes.object,\n    actions: PropTypes.object,\n    history: PropTypes.object,\n    handleSubmit: PropTypes.func,\n    auth: PropTypes.object,\n    close: PropTypes.func,\n    showModal: PropTypes.func,\n    location: PropTypes.object\n  };\n\n  constructor(props) {\n    super(props);\n    this.submit = this.submit.bind(this);\n  }\n\n  componentWillMount() {\n    const { location } = this.props;\n    const route = {\n      path: '/user/resetPassword/:token',\n      exact: true\n    };\n    const match = matchPath(location.pathname, route);\n    this.token = match && match.params && match.params.token;\n  }\n\n  submit = vals => {\n    const { user } = this.props.auth;\n    this.props.actions.resetPassword(vals.password, this.token).then(success => {\n      if (success && !user) {\n        this.props.actions.showModal('login');\n      } else {\n        this.props.close();\n      }\n    });\n  };\n\n  render() {\n    const { handleSubmit } = this.props;\n    const FORM_FIELDS = [\n      {\n        name: 'password',\n        component: ReduxFormField,\n        type: 'password',\n        label: 'Password',\n        validate: [required]\n      },\n      {\n        name: 'confirmPassword',\n        component: ReduxFormField,\n        type: 'password',\n        label: 'Confirm Password',\n        validate: [required]\n      }\n    ];\n    return (\n      <View display=\"flex\" fdirection=\"column\" m={'4 0'}>\n        <Form fdirection=\"column\" onSubmit={handleSubmit(this.submit.bind(this))}>\n          {FORM_FIELDS.map((field, index) => (\n            <Field {...field} key={index} />\n          ))}\n          <View mt={4} ml={0} justify=\"flex-end\">\n            <Button type=\"submit\" p={0}>\n              Update Password\n            </Button>\n          </View>\n        </Form>\n      </View>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  auth: state.auth\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(\n    {\n      resetPassword,\n      hideModal,\n      showModal\n    },\n    dispatch\n  )\n});\n\nexport default reduxForm({\n  form: 'settings',\n  validate: vals => {\n    const errors = {};\n    if (vals.password !== vals.confirmPassword) {\n      const message = 'Passwords must be identical';\n      errors.password = message;\n      errors.confirmPassword = message;\n    }\n    return errors;\n  }\n})(connect(mapStateToProps, mapDispatchToProps)(withRouter(ResetPassword)));\n"],"file":"resetPassword.component.js"}