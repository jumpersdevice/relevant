{"version":3,"sources":["../../../src/modules/wallet/wallet.actions.js"],"names":["Alert","alert","cashOutCall","customAmount","sendCashoutAction","dispatch","api","request","method","endpoint","path","body","JSON","stringify","user","earning","cashOut","amnt","amount","sig","tx","parseFloat","console","log","message","connectAddress","account","salt","msgParams","type","name","value","web3","currentProvider","sendAsync","params","from","err","msg","error","addEthAddress","result","messate","acc"],"mappings":"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","sourcesContent":["import { generateSalt, formatBalanceRead } from 'utils/eth';\nimport { getProvider } from 'utils/web3.provider';\nimport { alert, api } from 'utils';\nimport { updateAuthUser } from 'modules/auth/auth.actions';\nimport { addEarning } from 'modules/wallet/earnings.actions';\n\nconst Alert = alert.Alert();\n\nexport function cashOutCall(customAmount = 0, sendCashoutAction) {\n  return async dispatch => {\n    try {\n      const { user, earning } = await dispatch(\n        api.request({\n          method: 'POST',\n          endpoint: 'user',\n          path: '/cashOut',\n          body: JSON.stringify({ customAmount })\n        })\n      );\n      dispatch(updateAuthUser(user));\n      earning && dispatch(addEarning(earning));\n      const { amount: amnt, sig } = user.cashOut;\n      const tx = sendCashoutAction(amnt, sig);\n      Alert.alert(`Claiming ${parseFloat(formatBalanceRead(amnt))} tokens ðŸ˜„`, 'success');\n      return tx;\n    } catch (err) {\n      console.log(err); // eslint-disable-line\n      return Alert.alert(err.message, 'error');\n    }\n  };\n}\n\nexport function connectAddress(account) {\n  return async dispatch => {\n    try {\n      const salt = generateSalt();\n      const msgParams = [\n        {\n          type: 'string',\n          name: 'Message',\n          value: 'Connect Ethereum address to the Relevant account ' + salt\n        }\n      ];\n      const web3 = getProvider();\n      await web3.currentProvider.sendAsync(\n        {\n          method: 'eth_signTypedData',\n          params: [msgParams, account],\n          from: account\n        },\n        (err, msg) => {\n          if (err || msg.error) {\n            const error = err || msg.error;\n            Alert.alert(error, 'error');\n            return;\n          }\n          dispatch(addEthAddress(msgParams, msg.result, account));\n        }\n      );\n    } catch (err) {\n      Alert.alert('Failed signing message: ' + err.messate, 'error');\n    }\n  };\n}\n\nexport function addEthAddress(msg, sig, acc) {\n  return async dispatch => {\n    try {\n      const result = await dispatch(\n        api.request({\n          method: 'PUT',\n          endpoint: 'user',\n          path: '/ethAddress',\n          body: JSON.stringify({ msg, sig, acc })\n        })\n      );\n      dispatch(updateAuthUser(result));\n      return true;\n    } catch (err) {\n      Alert.alert(err.message, 'error');\n      return false;\n    }\n  };\n}\n"],"file":"wallet.actions.js"}