{"version":3,"sources":["../../../../../src/modules/wallet/web/web3Warning/web3Warning.hooks.js"],"names":["useCurrentWarning","accounts","user","networkId","canClaim","warning","setWarning","metamask","updateWarnings","warnings","connectMetamask","network","connection","account","ethAddress"],"mappings":"2WAAA,4BACA,0DAEA,yEACA,qDAOO,GAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,MAM3B,IALJC,CAAAA,QAKI,MALJA,QAKI,CAJJC,IAII,MAJJA,IAII,CAHJC,SAGI,MAHJA,SAGI,CADJC,QACI,MADJA,QACI,eAC0B,qBAD1B,qDACGC,OADH,eACYC,UADZ,eAEJ,GAAMC,CAAAA,QAAQ,CAAG,2BAAjB,CAEA,qBAAU,UAAM,CACd,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAE3B,GAAI,CAACD,QAAL,CAAe,MAAOE,CAAAA,QAAQ,CAACF,QAAhB,CACf,GAAIA,QAAQ,EAAI,CAAC,6BAAWN,QAAX,CAAjB,CAAuC,MAAOQ,CAAAA,QAAQ,CAACC,eAAhB,CACvC,GAAI,CAAC,oCAAkBP,SAAlB,CAAL,CAAmC,MAAOM,CAAAA,QAAQ,CAACE,OAAhB,CACnC,GAAI,CAAC,sCAAoBT,IAApB,CAAL,CAAgC,MAAOO,CAAAA,QAAQ,CAACG,UAAhB,CAChC,GAAI,CAAC,oCAAkBV,IAAlB,CAAwBD,QAAxB,CAAL,CAAwC,MAAOQ,CAAAA,QAAQ,CAACI,OAAT,CAAiBX,IAAI,CAACY,UAAL,CAAgB,CAAhB,CAAjB,CAAP,CAExC,MAAO,KAAP,CACD,CATD,CAUAR,UAAU,CAACE,cAAc,EAAf,CAAV,CACD,CAZD,CAYG,CAACP,QAAD,CAAWC,IAAI,CAACY,UAAhB,CAA4BX,SAA5B,CAAuCD,IAAvC,CAA6CE,QAA7C,CAAuDG,QAAvD,CAZH,EAaA,MAAOF,CAAAA,OAAP,CACD,CAxBM,C","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useMetamask } from 'modules/contract/contract.hooks';\n// import { CASHOUT_LIMIT } from '@r3l/common';\nimport * as warnings from './web3Warning.constants';\nimport {\n  hasAccount,\n  hasAccountConnected,\n  hasCorrectAccount,\n  hasCorrectNetwork\n} from './web3Warning.selectors';\n\nexport const useCurrentWarning = ({\n  accounts,\n  user,\n  networkId,\n  // unclaimedSig,\n  canClaim\n}) => {\n  const [warning, setWarning] = useState();\n  const metamask = useMetamask();\n\n  useEffect(() => {\n    const updateWarnings = () => {\n      // if (canClaim < CASHOUT_LIMIT && !unclaimedSig) return warnings.balance;\n      if (!metamask) return warnings.metamask;\n      if (metamask && !hasAccount(accounts)) return warnings.connectMetamask;\n      if (!hasCorrectNetwork(networkId)) return warnings.network;\n      if (!hasAccountConnected(user)) return warnings.connection;\n      if (!hasCorrectAccount(user, accounts)) return warnings.account(user.ethAddress[0]);\n\n      return null;\n    };\n    setWarning(updateWarnings());\n  }, [accounts, user.ethAddress, networkId, user, canClaim, metamask]);\n  return warning;\n};\n"],"file":"web3Warning.hooks.js"}