{"version":3,"sources":["../../../src/modules/wallet/earnings.actions.js"],"names":["earningSchema","schema","Entity","post","postSchema","idAttribute","setEarnings","data","status","skip","type","types","SET_EARNINGS","payload","addEarning","earning","ADD_EARNING","updateEarning","UPDATE_EARNING","getEarnings","limit","dispatch","api","request","method","endpoint","query","earnings","updateCashoutLog","_id","params","user"],"mappings":"2kBAAA,oCACA,qEACA,kCACA,0CACA,0CAEA,GAAMA,CAAAA,aAAa,CAAG,GAAIC,mBAAOC,MAAX,CACpB,UADoB,CAEpB,CACEC,IAAI,CAAEC,gBADR,CAFoB,CAKpB,CAAEC,WAAW,CAAE,KAAf,CALoB,CAAtB,CAQO,QAASC,CAAAA,WAAT,MAA6C,IAAtBC,CAAAA,IAAsB,MAAtBA,IAAsB,CAAhBC,MAAgB,MAAhBA,MAAgB,CAARC,IAAQ,MAARA,IAAQ,CAClD,MAAO,CACLC,IAAI,CAAEC,KAAK,CAACC,YADP,CAELC,OAAO,CAAE,CAAEN,IAAI,CAAJA,IAAF,CAAQC,MAAM,CAANA,MAAR,CAAgBC,IAAI,CAAJA,IAAhB,CAFJ,CAAP,CAID,CAEM,QAASK,CAAAA,UAAT,CAAoBC,OAApB,CAA6B,CAClC,MAAO,CACLL,IAAI,CAAEC,KAAK,CAACK,WADP,CAELH,OAAO,CAAEE,OAFJ,CAAP,CAID,CAEM,QAASE,CAAAA,aAAT,CAAuBF,OAAvB,CAAgC,CACrC,MAAO,CACLL,IAAI,CAAEC,KAAK,CAACO,cADP,CAELL,OAAO,CAAEE,OAFJ,CAAP,CAID,CAEM,QAASI,CAAAA,WAAT,CAAqBX,MAArB,CAA6BY,KAA7B,CAAoCX,IAApC,CAA0C,CAC/C,qFAAO,iBAAMY,QAAN,2KAEoBA,CAAAA,QAAQ,CAC7BC,WAAIC,OAAJ,CAAY,CACVC,MAAM,CAAE,KADE,CAEVC,QAAQ,CAAE,UAFA,CAGVC,KAAK,CAAE,CACLlB,MAAM,CAANA,MADK,CAELY,KAAK,CAALA,KAFK,CAGLX,IAAI,CAAJA,IAHK,CAHG,CAAZ,CAD6B,CAF5B,QAEGkB,QAFH,eAaGpB,IAbH,CAaU,yBAAUoB,QAAV,CAAoB,CAAC3B,aAAD,CAApB,CAbV,CAcHqB,QAAQ,CAACf,WAAW,CAAC,CAAEC,IAAI,CAAJA,IAAF,CAAQC,MAAM,CAANA,MAAR,CAAgBC,IAAI,CAAJA,IAAhB,CAAD,CAAZ,CAAR,CACAY,QAAQ,CAAC,yBAAed,IAAf,CAAD,CAAR,CAfG,gCAgBI,IAhBJ,4FAkBI,KAlBJ,uEAAP,gEAqBD,CAEM,QAASqB,CAAAA,gBAAT,CAA0BC,GAA1B,CAA+B,CACpC,qFAAO,kBAAMR,QAAN,gMAE6BA,CAAAA,QAAQ,CACtCC,WAAIC,OAAJ,CAAY,CACVC,MAAM,CAAE,KADE,CAEVC,QAAQ,CAAE,UAFA,CAGVK,MAAM,CAAE,CAAED,GAAG,CAAHA,GAAF,CAHE,CAAZ,CADsC,CAFrC,uCAEKE,IAFL,iBAEKA,IAFL,CAEWhB,OAFX,iBAEWA,OAFX,CASHM,QAAQ,CAAC,yBAAeU,IAAf,CAAD,CAAR,CACAV,QAAQ,CAACJ,aAAa,CAACF,OAAD,CAAd,CAAR,CAVG,iCAWI,IAXJ,gGAaI,KAbJ,yEAAP,iEAgBD","sourcesContent":["import { normalize, schema } from 'normalizr';\nimport * as types from 'core/actionTypes';\nimport { api } from 'app/utils';\nimport { postSchema, setPostsSimple } from 'modules/post/post.actions';\nimport { updateAuthUser } from 'modules/auth/auth.actions';\n\nconst earningSchema = new schema.Entity(\n  'earnings',\n  {\n    post: postSchema\n  },\n  { idAttribute: '_id' }\n);\n\nexport function setEarnings({ data, status, skip }) {\n  return {\n    type: types.SET_EARNINGS,\n    payload: { data, status, skip }\n  };\n}\n\nexport function addEarning(earning) {\n  return {\n    type: types.ADD_EARNING,\n    payload: earning\n  };\n}\n\nexport function updateEarning(earning) {\n  return {\n    type: types.UPDATE_EARNING,\n    payload: earning\n  };\n}\n\nexport function getEarnings(status, limit, skip) {\n  return async dispatch => {\n    try {\n      const earnings = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'earnings',\n          query: {\n            status,\n            limit,\n            skip\n          }\n        })\n      );\n      const data = normalize(earnings, [earningSchema]);\n      dispatch(setEarnings({ data, status, skip }));\n      dispatch(setPostsSimple(data));\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n}\n\nexport function updateCashoutLog(_id) {\n  return async dispatch => {\n    try {\n      const { user, earning } = await dispatch(\n        api.request({\n          method: 'PUT',\n          endpoint: 'earnings',\n          params: { _id }\n        })\n      );\n      dispatch(updateAuthUser(user));\n      dispatch(updateEarning(earning));\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n}\n"],"file":"earnings.actions.js"}