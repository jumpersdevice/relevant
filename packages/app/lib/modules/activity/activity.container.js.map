{"version":3,"sources":["../../../src/modules/activity/activity.container.js"],"names":["Activity","props","context","state","view","renderRow","bind","getViewData","load","needsReload","Date","getTime","hasMore","pageSize","ready","auth","user","notif","count","actions","markRead","prevProps","reload","page","length","getActivity","rowData","screenSize","PostComponent","_id","data","personal","loaded","activity","map","a","p","Component","PropTypes","object","number","mapStateToProps","online","stats","error","posts","navigation","mapDispatchToProps","dispatch","postActions","notifActions","userActions","navigationActions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport InfScroll from 'modules/listview/web/infScroll.component';\nimport * as postActions from 'modules/post/post.actions';\nimport * as userActions from 'modules/user/user.actions';\nimport * as notifActions from 'modules/activity/activity.actions';\nimport * as navigationActions from 'modules/navigation/navigation.actions';\nimport SingleActivity from 'modules/activity/activity.component';\nimport PostComponent from 'modules/post/web/post.component';\n\nclass Activity extends Component {\n  static propTypes = {\n    auth: PropTypes.object,\n    notif: PropTypes.object,\n    actions: PropTypes.object,\n    reload: PropTypes.number,\n    screenSize: PropTypes.number\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      view: 0\n    };\n    this.renderRow = this.renderRow.bind(this);\n    this.getViewData = this.getViewData.bind(this);\n    this.load = this.load.bind(this);\n    this.needsReload = new Date().getTime();\n    this.hasMore = true;\n\n    // TODO should set it here and not on server\n    this.pageSize = 20;\n    this.ready = false;\n  }\n\n  componentDidMount() {\n    if (this.props.auth.user && this.props.notif.count) {\n      this.props.actions.markRead();\n    }\n    this.ready = true;\n    this.load(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.reload !== prevProps.reload) {\n      this.props.actions.markRead();\n      this.load(0, 0);\n    }\n  }\n\n  load(page, length) {\n    if (!this.ready) return;\n    this.hasMore = page * this.pageSize <= length;\n    if (this.hasMore) {\n      this.props.actions.getActivity(length, this.pageSize);\n    }\n  }\n\n  renderRow(rowData) {\n    const { screenSize, actions } = this.props;\n    return (\n      <SingleActivity\n        PostComponent={PostComponent}\n        key={rowData._id}\n        singleActivity={rowData}\n        screenSize={screenSize}\n        actions={actions}\n      />\n    );\n  }\n\n  getViewData(props) {\n    return { data: props.notif.personal, loaded: props.notif.loaded };\n  }\n\n  render() {\n    const { data } = this.getViewData(this.props);\n    const activity = data.map(a => this.renderRow(a));\n    const { length } = activity;\n    return (\n      <div>\n        <InfScroll\n          className={'activityContainer'}\n          data={data}\n          loadMore={p => this.load(p, length)}\n          hasMore={this.hasMore}\n          useWindow\n        >\n          {activity}\n        </InfScroll>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    notif: state.notif,\n    loaded: state.user.loaded,\n    online: state.user.online,\n    stats: state.stats,\n    error: state.error.activity,\n    posts: state.posts,\n    screenSize: state.navigation.screenSize,\n\n    // TODO how do we deal with these?\n    // refresh: state.navigation.activity.refresh,\n    reload: state.navigation.reload\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      {\n        ...postActions,\n        ...notifActions,\n        ...userActions,\n        ...navigationActions\n      },\n      dispatch\n    )\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activity);\n"],"file":"activity.container.js"}