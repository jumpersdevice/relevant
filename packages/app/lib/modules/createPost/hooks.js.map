{"version":3,"sources":["../../../src/modules/createPost/hooks.js"],"names":["useCommunityAuth","dispatch","authError","setAuthError","user","state","auth","ethAddress","ethLogin","sendAuthRequtest","err","component","message","useCreatePost","close","clearPost","setStatus","community","createPost","postData","submitting","error","selectedTags","postUrl","urlPreview","edit","mentions","domain","channel","title","postBody","originalPost","editPost","image","validate","validateInput","Error","newPost","url","tags","body","description","success","history","push","location","pathname","ReactGA","event","category","action","alert","browserAlerts","length","trim","usePreview","setState","createPreview","loadingPreview","loading","preview","images","imageURL","indexOf","split","keywords","postTags","linkPreview","failedUrl"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport { BodyText, ErrorBox, Box } from 'modules/styled/uni';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { refreshTab } from 'modules/navigation/navigation.actions';\nimport { editPost } from 'modules/post/post.actions';\nimport { submitPost, generatePreviewServer } from 'modules/createPost/createPost.actions';\nimport { checkAuth } from 'modules/community/community.actions';\nimport BoxLogin from 'modules/auth/web/login.3box';\nimport ReactGA from 'react-ga';\nimport { alert } from 'app/utils';\nimport history from 'modules/navigation/history';\n\nexport function useCommunityAuth() {\n  const dispatch = useDispatch();\n  const [authError, setAuthError] = useState();\n  const user = useSelector(state => state.auth.user);\n  const ethAddress = user && user.ethLogin;\n  useEffect(() => {\n    const sendAuthRequtest = async () => {\n      const err = await dispatch(checkAuth());\n      err &&\n        setAuthError({\n          component: (\n            <Fragment>\n              <ErrorBox align={'flex-start'}>\n                <BodyText>{err.message}</BodyText>\n                {!ethAddress && (\n                  <Fragment>\n                    <Box mt={3} />\n                    <BoxLogin type={'metamask'} text={'Connect your Ethereum Address'} />\n                  </Fragment>\n                )}\n              </ErrorBox>\n            </Fragment>\n          )\n        });\n    };\n    sendAuthRequtest();\n  }, [dispatch, ethAddress]);\n  return authError;\n}\n\nexport function useCreatePost({ close, clearPost, setStatus }) {\n  const community = useSelector(state => state.auth.community);\n  const dispatch = useDispatch();\n\n  const createPost = async postData => {\n    setStatus({ submitting: true, error: null });\n    const {\n      selectedTags,\n      postUrl,\n      urlPreview,\n      edit,\n      mentions,\n      domain,\n      channel,\n      title,\n      postBody,\n      editPost: originalPost\n    } = postData;\n\n    const image = urlPreview ? urlPreview.image : null;\n\n    try {\n      const validate = validateInput({ postBody, selectedTags, setStatus });\n      if (validate !== true) throw new Error(validate);\n\n      let newPost = {\n        url: postUrl || postUrl,\n        tags: selectedTags,\n        body: postBody,\n        title: urlPreview ? urlPreview.title : title,\n        description: urlPreview ? urlPreview.description : null,\n        image,\n        mentions,\n        domain,\n        channel\n      };\n\n      if (edit) {\n        newPost = { ...originalPost, ...newPost };\n        const success = await dispatch(editPost(newPost));\n        if (success) {\n          clearPost();\n          history.push(history.location.pathname);\n          if (close) close();\n        }\n        return;\n      }\n\n      newPost = await dispatch(submitPost(newPost));\n      if (!newPost) throw new Error('Something went wrong... please try again');\n\n      close && close();\n      clearPost();\n\n      history.push(`/${community}/new/`);\n      dispatch(refreshTab('discover'));\n\n      ReactGA.event({\n        category: 'User',\n        action: 'Created a Post'\n      });\n\n      setStatus({ submitting: false, error: null });\n    } catch (err) {\n      alert.browserAlerts.alert(err.message);\n      setStatus({ error: err.message, submitting: false });\n    }\n  };\n\n  return useCallback(createPost, [community, dispatch, clearPost, close, setStatus]);\n}\n\nfunction validateInput({ postBody, selectedTags, setStatus }) {\n  if (!selectedTags.length) {\n    setStatus({ error: 'Please select at least one topic' });\n    return 'Please select at least one topic';\n  }\n  if (!postBody || !postBody.trim().length) {\n    setStatus({ error: 'Please write something' });\n    return 'Can not create empty post';\n  }\n  return true;\n}\n\nexport function usePreview(setState) {\n  const dispatch = useDispatch();\n\n  const createPreview = async ({ postUrl, postBody }) => {\n    try {\n      setState({\n        loadingPreview: true,\n        urlPreview: {\n          loading: true\n        }\n      });\n\n      const preview = await dispatch(generatePreviewServer(postUrl));\n      if (!preview || !preview.url) throw new Error(\"Couldn't generate preview\");\n\n      const images = preview.image;\n      const imageURL = images && images.indexOf(', ') ? images.split(', ')[0] : images;\n\n      setState({\n        domain: preview.domain,\n        // postBody: postBody.replace(urlText, '').trim(),\n        // postUrl: preview.url,\n        url: preview.url,\n        loadingPreview: false,\n        keywords: preview.keywords,\n        postTags: preview.keywords,\n        urlPreview: {\n          ...preview,\n          image: imageURL,\n          title: preview.title || 'Untitled',\n          loading: false,\n          tags: []\n        },\n        linkPreview: {\n          ...preview,\n          image: imageURL\n        }\n      });\n    } catch (err) {\n      setState({ failedUrl: postUrl, loadingPreview: false, postBody });\n    }\n  };\n  return createPreview;\n}\n"],"file":"hooks.js"}