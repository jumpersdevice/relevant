{"version":3,"sources":["../../../../src/modules/createPost/mobile/categories.component.js"],"names":["Categories","props","context","setTopic","bind","InteractionManager","runAfterInteractions","tags","length","actions","getParentTags","createPost","postCategory","selectedTopic","topic","setPostCategory","community","communityTags","activeCommunity","communities","active","backgroundColor","colors","white","Component","PropTypes","object","array","mapStateToProps","state","user","parentTags","mapDispatchToProps","dispatch","createPostActions","tagActions","setCommunity"],"mappings":"y6BAAA,qDACA,gDACA,6DACA,uDACA,4BACA,uCACA,gFACA,yEACA,6CACA,uCACA,8EACA,0F,knDAEMA,CAAAA,U,wGAQJ,oBAAYC,KAAZ,CAAmBC,OAAnB,CAA4B,yDAC1B,uBAAMD,KAAN,CAAaC,OAAb,EACA,MAAKC,QAAL,CAAgB,MAAKA,QAAL,CAAcC,IAAd,4CAAhB,CAF0B,aAG3B,C,iGAEmB,iBAElBC,mCAAmBC,oBAAnB,CAAwC,UAAM,CAC5C,GAAI,CAAC,MAAI,CAACL,KAAL,CAAWM,IAAX,CAAgBC,MAArB,CAA6B,MAAI,CAACP,KAAL,CAAWQ,OAAX,CAAmBC,aAAnB,GAC9B,CAFD,EAIA,GAAI,KAAKT,KAAL,CAAWU,UAAX,CAAsBC,YAA1B,CAAwC,CACtC,KAAKC,aAAL,CAAqB,KAAKZ,KAAL,CAAWU,UAAX,CAAsBC,YAA3C,CACD,CACF,C,0CAEQE,K,CAAO,CACd,GAAI,KAAKb,KAAL,CAAWU,UAAX,CAAsBC,YAAtB,GAAuCE,KAA3C,CAAkD,CAChD,KAAKD,aAAL,CAAqB,IAArB,CACA,KAAKZ,KAAL,CAAWQ,OAAX,CAAmBM,eAAnB,CAAmC,IAAnC,EACD,CAHD,IAGO,CACL,KAAKF,aAAL,CAAqBC,KAArB,CACA,KAAKb,KAAL,CAAWQ,OAAX,CAAmBM,eAAnB,CAAmCD,KAAnC,EACD,CACD,MAAO,KAAP,CACD,C,uCAEQ,iBACoC,KAAKb,KADzC,CACCU,UADD,aACCA,UADD,CACaF,OADb,aACaA,OADb,CACsBO,SADtB,aACsBA,SADtB,CAEP,GAAIC,CAAAA,aAAa,CAAG,EAApB,CACA,GAAID,SAAJ,CAAe,CACb,GAAME,CAAAA,eAAe,CAAG,iBAAIF,SAAS,CAACG,WAAd,CAA2BH,SAAS,CAACI,MAArC,CAA6C,EAA7C,GAAoD,EAA5E,CACAH,aAAa,CAAG,iBAAIC,eAAJ,CAAqB,QAArB,CAA+B,EAA/B,CAAhB,CACD,CACD,GAAI,CAAC,KAAKjB,KAAL,CAAWM,IAAhB,CAAsB,CACpB,MAAO,KAAP,CACD,CACD,MACE,8BAAC,0BAAD,EAAY,KAAK,CAAE,CAAEc,eAAe,CAAEC,eAAOC,KAA1B,CAAnB,gEACE,6BAAC,2BAAD,EAAoB,OAAO,CAAEd,OAA7B,CAAsC,SAAS,CAAEO,SAAjD,gEADF,CAEE,6BAAC,qBAAD,EACE,KAAK,CAAE,IADT,CAEE,aAAa,CAAEC,aAFjB,CAGE,OAAO,CAAER,OAHX,CAIE,UAAU,CAAEE,UAJd,gEAFF,CADF,CAWD,C,wBAxDsBa,gB,+BAAnBxB,U,aACe,CACjBW,UAAU,CAAEc,mBAAUC,MADL,CAEjBjB,OAAO,CAAEgB,mBAAUC,MAFF,CAGjBnB,IAAI,CAAEkB,mBAAUE,KAHC,CAIjBX,SAAS,CAAES,mBAAUC,MAJJ,C,EA0DrB,QAASE,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CAC9B,MAAO,CACLlB,UAAU,CAAEkB,KAAK,CAAClB,UADb,CAELK,SAAS,CAAEa,KAAK,CAACb,SAFZ,CAGLc,IAAI,CAAED,KAAK,CAACC,IAHP,CAILvB,IAAI,CAAEsB,KAAK,CAACtB,IAAN,CAAWwB,UAJZ,CAAP,CAMD,CAED,QAASC,CAAAA,kBAAT,CAA4BC,QAA5B,CAAsC,CACpC,MAAO,CACLxB,OAAO,CAAE,2EAEFyB,iBAFE,EAGFC,UAHE,MAILC,YAAY,CAAZA,kBAJK,GAMPH,QANO,CADJ,CAAP,CAUD,C,aAEc,wBAAQL,eAAR,CAAyBI,kBAAzB,EAA6ChC,UAA7C,C","sourcesContent":["import React, { Component } from 'react';\nimport { InteractionManager, ScrollView } from 'react-native';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as createPostActions from 'modules/createPost/createPost.actions';\nimport * as tagActions from 'modules/tag/tag.actions';\nimport { setCommunity } from 'modules/auth/auth.actions';\nimport { colors } from 'styles';\nimport TagSelection from './tagSelection.component';\nimport CommunitySelection from './communitySelection.component';\n\nclass Categories extends Component {\n  static propTypes = {\n    createPost: PropTypes.object,\n    actions: PropTypes.object,\n    tags: PropTypes.array,\n    community: PropTypes.object\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.setTopic = this.setTopic.bind(this);\n  }\n\n  componentDidMount() {\n    // TODO check this works\n    InteractionManager.runAfterInteractions(() => {\n      if (!this.props.tags.length) this.props.actions.getParentTags();\n    });\n\n    if (this.props.createPost.postCategory) {\n      this.selectedTopic = this.props.createPost.postCategory;\n    }\n  }\n\n  setTopic(topic) {\n    if (this.props.createPost.postCategory === topic) {\n      this.selectedTopic = null;\n      this.props.actions.setPostCategory(null);\n    } else {\n      this.selectedTopic = topic;\n      this.props.actions.setPostCategory(topic);\n    }\n    return null;\n  }\n\n  render() {\n    const { createPost, actions, community } = this.props;\n    let communityTags = [];\n    if (community) {\n      const activeCommunity = get(community.communities, community.active, {}) || {};\n      communityTags = get(activeCommunity, 'topics', []);\n    }\n    if (!this.props.tags) {\n      return null;\n    }\n    return (\n      <ScrollView style={{ backgroundColor: colors.white }}>\n        <CommunitySelection actions={actions} community={community} />\n        <TagSelection\n          topic={null}\n          communityTags={communityTags}\n          actions={actions}\n          createPost={createPost}\n        />\n      </ScrollView>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    createPost: state.createPost,\n    community: state.community,\n    user: state.user,\n    tags: state.tags.parentTags\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      {\n        ...createPostActions,\n        ...tagActions,\n        setCommunity\n      },\n      dispatch\n    )\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Categories);\n"],"file":"categories.component.js"}