{"version":3,"sources":["../../../src/modules/stats/stats.actions.js"],"names":["setStats","data","type","types","SET_STATS","payload","addStats","ADD_STATS","user","parseStats","dispatch","d","Date","currentHour","getHours","prevHour","dataObj","stats","forEach","item","value","hours","getAllStats","api","request","method","endpoint","path","responseJSON","getStats","id","present","past","res"],"mappings":"2iBAAA,qEACA,kCAEO,QAASA,CAAAA,QAAT,CAAkBC,IAAlB,CAAwB,CAC7B,MAAO,CACLC,IAAI,CAAEC,KAAK,CAACC,SADP,CAELC,OAAO,CAAEJ,IAFJ,CAAP,CAID,CAEM,QAASK,CAAAA,QAAT,CAAkBL,IAAlB,CAAwB,CAC7B,MAAO,CACLC,IAAI,CAAEC,KAAK,CAACI,SADP,CAELF,OAAO,CAAE,CACPG,IAAI,CAAEP,IAAI,CAACO,IADJ,CAEPP,IAAI,CAAEA,IAAI,CAACA,IAFJ,CAFJ,CAAP,CAOD,CAEM,QAASQ,CAAAA,UAAT,CAAoBR,IAApB,CAA0B,CAC/B,MAAO,UAAAS,QAAQ,CAAI,CACjB,GAAMC,CAAAA,CAAC,CAAG,GAAIC,CAAAA,IAAJ,EAAV,CACA,GAAIC,CAAAA,WAAW,CAAGF,CAAC,CAACG,QAAF,EAAlB,CACA,GAAMC,CAAAA,QAAQ,CAAGF,WAAW,EAA5B,CACA,GAAMG,CAAAA,OAAO,CAAG,EAAhB,CACAf,IAAI,CAACgB,KAAL,CAAWC,OAAX,CAAmB,SAAAC,IAAI,CAAI,CACzBH,OAAO,CAACG,IAAI,CAACX,IAAN,CAAP,CAAqB,EAArB,CACAQ,OAAO,CAACG,IAAI,CAACX,IAAN,CAAP,CAAmBY,KAAnB,CAA2B,CAA3B,CACA,GAAID,IAAI,CAACE,KAAL,CAAWN,QAAX,CAAJ,CAA0BC,OAAO,CAACG,IAAI,CAACX,IAAN,CAAP,CAAmBY,KAAnB,CAA2BD,IAAI,CAACE,KAAL,CAAWN,QAAX,CAA3B,CAC3B,CAJD,EAKAL,QAAQ,CAACV,QAAQ,CAACgB,OAAD,CAAT,CAAR,CACD,CAXD,CAYD,CAEM,QAASM,CAAAA,WAAT,EAAuB,CAC5B,oFAAO,iBAAMZ,QAAN,0KAEwBA,CAAAA,QAAQ,CACjCa,WAAIC,OAAJ,CAAY,CACVC,MAAM,CAAE,KADE,CAEVC,QAAQ,CAAE,YAFA,CAGVC,IAAI,CAAE,MAHI,CAAZ,CADiC,CAFhC,QAEGC,YAFH,+CASIlB,QAAQ,CAACD,UAAU,CAACmB,YAAD,CAAX,CATZ,0FAWI,IAXJ,sEAAP,+DAcD,CAEM,QAASC,CAAAA,QAAT,CAAkBC,EAAlB,CAAsB,CAC3B,GAAMC,CAAAA,OAAO,CAAG,GAAInB,CAAAA,IAAJ,EAAhB,CACA,GAAMoB,CAAAA,IAAI,CAAG,GAAIpB,CAAAA,IAAJ,CAASmB,OAAO,CAAG,KAAO,EAAP,CAAY,EAAZ,CAAiB,CAApC,CAAb,CACA,qFAAO,kBAAMrB,QAAN,uKAEeA,CAAAA,QAAQ,CACxBa,WAAIC,OAAJ,CAAY,CACVC,MAAM,CAAE,KADE,CAEVC,QAAQ,CAAE,YAFA,CAGVC,IAAI,mBAAaG,EAAb,uBAA6BE,IAA7B,sBAA8CD,OAA9C,CAHM,CAAZ,CADwB,CAFvB,QAEGE,GAFH,iDASIvB,QAAQ,CAACJ,QAAQ,CAAC,CAAEE,IAAI,CAAEsB,EAAR,CAAY7B,IAAI,CAAEgC,GAAlB,CAAD,CAAT,CATZ,8FAWI,IAXJ,wEAAP,iEAcD","sourcesContent":["import * as types from 'core/actionTypes';\nimport { api } from 'app/utils';\n\nexport function setStats(data) {\n  return {\n    type: types.SET_STATS,\n    payload: data\n  };\n}\n\nexport function addStats(data) {\n  return {\n    type: types.ADD_STATS,\n    payload: {\n      user: data.user,\n      data: data.data\n    }\n  };\n}\n\nexport function parseStats(data) {\n  return dispatch => {\n    const d = new Date();\n    let currentHour = d.getHours();\n    const prevHour = currentHour--;\n    const dataObj = {};\n    data.stats.forEach(item => {\n      dataObj[item.user] = {};\n      dataObj[item.user].value = 0;\n      if (item.hours[prevHour]) dataObj[item.user].value = item.hours[prevHour];\n    });\n    dispatch(setStats(dataObj));\n  };\n}\n\nexport function getAllStats() {\n  return async dispatch => {\n    try {\n      const responseJSON = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'statistics',\n          path: '/all'\n        })\n      );\n      return dispatch(parseStats(responseJSON));\n    } catch (err) {\n      return null;\n    }\n  };\n}\n\nexport function getStats(id) {\n  const present = new Date();\n  const past = new Date(present - 1000 * 60 * 60 * 1);\n  return async dispatch => {\n    try {\n      const res = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'statistics',\n          path: `/change/${id}?startTime=${past}'&endTime=${present}`\n        })\n      );\n      return dispatch(addStats({ user: id, data: res }));\n    } catch (err) {\n      return null;\n    }\n  };\n}\n"],"file":"stats.actions.js"}