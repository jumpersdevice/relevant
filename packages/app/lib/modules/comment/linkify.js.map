{"version":3,"sources":["../../../src/modules/comment/linkify.js"],"names":["linkify","linkifyMatch","text","match","linkifyText","community","omitUrl","matches","offset","forEach","index","lastIndex","txt","url","schema","prependToUrl","isNative","length","substring","link","slice","add","validate","pos","self","tail","re","handle","RegExp","src_ZPCc","test","normalize","replace"],"mappings":"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","sourcesContent":["import Linkify from 'linkify-it';\nimport { isNative } from 'styles';\n\nconst linkify = Linkify();\n\nexport const linkifyMatch = text => linkify.match(text);\n\nexport default function linkifyText(text, community, omitUrl) {\n  const matches = linkify.match(text);\n  if (!matches) return text;\n  let offset = 0;\n  matches.forEach(match => {\n    const { index, lastIndex, text: txt, url, schema } = match;\n    const prependToUrl = schema === '#' && !isNative ? `/${community}` : '';\n    // Already a link\n    if (text[index - 1] === '(' && text[lastIndex] === ')') return;\n    // Omit link if we have preview\n    if (omitUrl && omitUrl[omitUrl.length - 1] === '/')\n      omitUrl = omitUrl.substring(0, omitUrl.length - 1);\n    const link = omitUrl && omitUrl === url ? '' : `[${txt}](${prependToUrl}${url}) `;\n    text = text.slice(0, index + offset) + link + text.slice(lastIndex + offset);\n    offset += link.length - (lastIndex - index);\n  });\n  return text;\n}\n\nlinkify.add('@', {\n  validate: (text, pos, self) => {\n    const tail = text.slice(pos);\n\n    if (!self.re.handle) {\n      self.re.handle = new RegExp(\n        '^([a-zA-Z0-9_]){1,15}(?!_)(?=$|' + self.re.src_ZPCc + ')'\n      );\n    }\n    if (self.re.handle.test(tail)) {\n      // Linkifier allows punctuation chars before prefix,\n      // but we additionally disable `@` (\"@@mention\" is invalid)\n      if (pos >= 2 && tail[pos - 2] === '@') {\n        return false;\n      }\n      return tail.match(self.re.handle)[0].length;\n    }\n    return 0;\n  },\n  normalize: match => {\n    isNative\n      ? (match.url = '__user_profile__' + match.url.replace(/^@/, ''))\n      : (match.url = '/user/profile/' + match.url.replace(/^@/, ''));\n  }\n});\n\nlinkify.add('#', {\n  validate: (text, pos, self) => {\n    const tail = text.slice(pos);\n\n    if (!self.re.handle) {\n      self.re.handle = new RegExp(\n        '^([a-zA-Z0-9_]){1,15}(?!_)(?=$|' + self.re.src_ZPCc + ')'\n      );\n    }\n    if (self.re.handle.test(tail)) {\n      // Linkifier allows punctuation chars before prefix,\n      // but we additionally disable `@` (\"@@mention\" is invalid)\n      if (pos >= 2 && tail[pos - 2] === '@') {\n        return false;\n      }\n      return tail.match(self.re.handle)[0].length;\n    }\n    return 0;\n  },\n  normalize: match => {\n    isNative\n      ? (match.url = '__tag_link__' + match.url.replace(/^#/, ''))\n      : (match.url = `/new/` + match.url.replace(/^#/, ''));\n  }\n});\n"],"file":"linkify.js"}