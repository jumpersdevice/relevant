{"version":3,"sources":["../../../src/modules/comment/comment.actions.js"],"names":["Alert","alert","commentSchema","schema","Entity","idAttribute","addComment","parentId","newComment","type","types","ADD_COMMENT","payload","comment","setComments","comments","childComments","SET_COMMENTS","filterComments","forEach","c","parentComment","parentPost","_id","createComment","commentObj","dispatch","api","request","method","endpoint","path","body","JSON","stringify","message","getComments","post","skip","limit","query","responseJSON","data","entities","updateComment","then","res","catch","error","deleteComment","id"],"mappings":"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","sourcesContent":["import { normalize, schema } from 'normalizr';\nimport { api, alert } from 'app/utils';\nimport * as types from 'core/actionTypes';\nimport { setError } from 'modules/ui/error.actions';\nimport { removePost, updatePost } from 'modules/post/post.actions';\nimport { showPushNotificationPrompt } from 'modules/activity/activity.actions';\n\nconst Alert = alert.Alert();\n\nconst commentSchema = new schema.Entity('comments', {}, { idAttribute: '_id' });\n\nexport function addComment(parentId, newComment) {\n  return {\n    type: types.ADD_COMMENT,\n    payload: {\n      comment: newComment,\n      parentId\n    }\n  };\n}\n\nexport function setComments({ comments, childComments }) {\n  return {\n    type: types.SET_COMMENTS,\n    payload: {\n      comments,\n      childComments\n    }\n  };\n}\n\nfunction filterComments(comments) {\n  const childComments = {};\n  comments.forEach(c => {\n    if (!c.parentComment || c.parentComment === c.parentPost) {\n      return (childComments[c.parentPost] = [\n        ...(childComments[c.parentPost] || []),\n        c._id\n      ]);\n    }\n    return (childComments[c.parentComment] = [\n      ...(childComments[c.parentComment] || []),\n      c._id\n    ]);\n  });\n  return childComments;\n}\n\nexport function createComment(commentObj) {\n  return async dispatch => {\n    try {\n      const comment = await dispatch(\n        api.request({\n          method: 'POST',\n          endpoint: 'comment',\n          path: '/',\n          body: JSON.stringify(commentObj)\n        })\n      );\n      const { parentComment, parentPost } = comment;\n      const parentId = parentComment || parentPost;\n      dispatch(addComment(parentId, comment));\n      dispatch(\n        showPushNotificationPrompt({\n          type: 'createComment'\n        })\n      );\n      return comment;\n    } catch (err) {\n      Alert.alert(err.message);\n      return false;\n    }\n  };\n}\n\nexport function getComments(post, skip, limit) {\n  return async dispatch => {\n    try {\n      if (!skip) skip = 0;\n      if (!limit) limit = 0;\n\n      const responseJSON = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'comment',\n          query: { post, skip, limit }\n        })\n      );\n\n      dispatch(setError('comments', false));\n      const childComments = filterComments(responseJSON.data);\n      const { comments } = normalize(responseJSON.data, [commentSchema]).entities;\n      dispatch(setComments({ comments, childComments }));\n    } catch (err) {\n      dispatch(setError('comments', true, err.message));\n    }\n  };\n}\n\nexport function updateComment(comment) {\n  return dispatch =>\n    dispatch(\n      api.request({\n        method: 'PUT',\n        endpoint: 'comment',\n        body: JSON.stringify(comment)\n      })\n    )\n      .then(res => dispatch(updatePost(res)))\n      .catch(error => Alert.alert(error.message));\n}\n\nexport function deleteComment(id) {\n  return async dispatch => {\n    try {\n      await dispatch(\n        api.request({\n          method: 'DELETE',\n          endpoint: 'comment',\n          path: '/' + id\n        })\n      );\n      return dispatch(removePost(id));\n    } catch (err) {\n      return Alert.alert(err.message);\n    }\n  };\n}\n"],"file":"comment.actions.js"}