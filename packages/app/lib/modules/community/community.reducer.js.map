{"version":3,"sources":["../../../src/modules/community/community.reducer.js"],"names":["CommunitySchema","schema","Entity","idAttribute","MemberSchema","initialState","communities","list","active","members","communityMembers","userMemberships","userCommunities","slugToId","community","state","action","type","types","SET_COMMUNITIES","normalized","payload","result","forEach","cId","c","entities","slug","_id","Set","SET_USER_MEMBERSHIPS","map","m","communityId","ADD_USER_MEMBERSHIP","SET_COMMUNITY","REMOVE_COMMUNITY","updatedCommunities","SET_COMMUNITY_MEMBERS","data","existingCommunityMembers","ADD_COMMUNITY","UPDATE_COMMUNITY"],"mappings":"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","sourcesContent":["import { normalize, schema } from 'normalizr';\nimport * as types from 'core/actionTypes';\nimport { unique } from 'utils/list';\n\nconst CommunitySchema = new schema.Entity('communities', {}, { idAttribute: 'slug' });\nconst MemberSchema = new schema.Entity('members', {}, { idAttribute: '_id' });\n\nconst initialState = {\n  communities: {},\n  list: [],\n  active: null,\n  members: {},\n  communityMembers: {},\n  userMemberships: [],\n  userCommunities: [],\n  slugToId: {}\n};\n\nexport default function community(state = initialState, action) {\n  switch (action.type) {\n    case types.SET_COMMUNITIES: {\n      const normalized = normalize(action.payload, [CommunitySchema]);\n      const slugToId = {};\n      normalized.result.forEach(cId => {\n        const c = normalized.entities.communities[cId];\n        slugToId[c.slug] = c._id;\n      });\n      return {\n        ...state,\n        communities: {\n          ...state.communities,\n          ...normalized.entities.communities\n        },\n        list: [...new Set([...state.list, ...normalized.result])],\n        slugToId: {\n          ...state.slugToId,\n          ...slugToId\n        }\n      };\n    }\n\n    case types.SET_USER_MEMBERSHIPS: {\n      return {\n        ...state,\n        userMemberships: action.payload,\n        userCommunities: action.payload.map(m => m.communityId)\n      };\n    }\n\n    case types.ADD_USER_MEMBERSHIP: {\n      return {\n        ...state,\n        userMemberships: [...state.userMemberships, action.payload],\n        userCommunities: [...state.userCommunities, action.payload.communityId]\n      };\n    }\n\n    case types.SET_COMMUNITY: {\n      return {\n        ...state,\n        active: action.payload\n      };\n    }\n\n    case types.REMOVE_COMMUNITY: {\n      const updatedCommunities = { ...state.communities };\n      delete updatedCommunities[action.payload];\n      delete updatedCommunities[action.payload];\n      return {\n        ...state,\n        communities: {\n          ...updatedCommunities\n        }\n      };\n    }\n\n    case types.SET_COMMUNITY_MEMBERS: {\n      const { members, slug } = action.payload;\n      const data = normalize(members, [MemberSchema]);\n      const existingCommunityMembers = state.communityMembers[slug] || [];\n      return {\n        ...state,\n        communityMembers: {\n          ...state.communityMembers,\n          [slug]: unique([...existingCommunityMembers, ...data.result])\n        },\n        members: {\n          ...state.members,\n          ...data.entities.members\n        }\n      };\n    }\n\n    case types.ADD_COMMUNITY: {\n      return {\n        ...state,\n        communities: {\n          ...state.communities,\n          [action.payload.slug]: action.payload\n        },\n        list: [...new Set([...state.list, action.payload.slug])]\n      };\n    }\n\n    case types.UPDATE_COMMUNITY: {\n      return {\n        ...state,\n        communities: {\n          ...state.communities,\n          [action.payload.slug]: action.payload\n        }\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n"],"file":"community.reducer.js"}