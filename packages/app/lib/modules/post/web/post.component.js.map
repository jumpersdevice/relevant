{"version":3,"sources":["../../../../src/modules/post/web/post.component.js"],"names":["Post","propTypes","post","PropTypes","object","link","noComments","bool","comment","hideDivider","hidePostButtons","hideAvatar","noLink","preview","avatarText","func","singlePost","children","node","screenSize","state","navigation","showPost","setShowPost","isLink","type","data","pagerank","layout","POST_BUTTONS_WIDTH","parentPost","renderComment","postEl","additionalNesting","POST_BUTTONS_NESTING_UNITS","commentEl","previewEl","url","image","MAX_POST_WIDTH"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { layout } from 'app/styles';\nimport SingleComment from 'modules/comment/web/singleComment.container';\nimport PostButtons from 'modules/post/vote-buttons/postbuttons.container';\nimport PostInfo from 'modules/post/postinfo.component';\nimport { View, Text, Divider } from 'modules/styled/uni';\nimport ButtonRow from 'modules/post/web/buttonRow.component';\nimport { MAX_POST_WIDTH } from 'styles/layout';\nimport HiddenPost from 'modules/post/hidden';\n\nPost.propTypes = {\n  post: PropTypes.object,\n  link: PropTypes.object,\n  noComments: PropTypes.bool,\n  comment: PropTypes.object,\n  hideDivider: PropTypes.bool,\n  hidePostButtons: PropTypes.bool,\n  hideAvatar: PropTypes.bool,\n  noLink: PropTypes.bool,\n  preview: PropTypes.bool,\n  avatarText: PropTypes.func,\n  singlePost: PropTypes.bool,\n  children: PropTypes.node\n};\n\nexport default memo(Post);\n\nfunction Post({\n  post,\n  noComments,\n  link,\n  hideDivider,\n  hidePostButtons,\n  comment,\n  hideAvatar,\n  noLink,\n  preview,\n  avatarText,\n  singlePost,\n  children\n}) {\n  const screenSize = useSelector(state => state.navigation.screenSize);\n  const [showPost, setShowPost] = useState(false);\n\n  if (!post) return null;\n\n  const isLink = post.type === 'link';\n\n  if (post?.data?.pagerank <= -8 && !showPost) {\n    return (\n      <View>\n        <View mt={1} mb={1} ml={!screenSize ? layout.POST_BUTTONS_WIDTH : 0}>\n          <HiddenPost onPress={() => setShowPost(true)} />\n        </View>\n        {hideDivider ? null : <Divider m={['0 4', 0]} screenSize={screenSize} />}\n      </View>\n    );\n  }\n\n  if (post === 'notFound') {\n    return (\n      <View>\n        <Text>Post not found</Text>\n      </View>\n    );\n  }\n  if (!post) return null;\n\n  const parentPost = post.parentPost || post;\n  const renderComment = !noComments && comment;\n\n  // TODO pass post buttons as prop to Post?\n  const postEl = isLink ? (\n    <View fdirection={'row'} m={[`4 3 ${renderComment ? 0 : 3} 0`, 0]}>\n      {!hidePostButtons && !screenSize && (\n        <View w={layout.POST_BUTTONS_WIDTH}>\n          <PostButtons post={post} />\n        </View>\n      )}\n      <View flex={1}>\n        <PostInfo post={post} link={link} noLink={noLink} singlePost={singlePost} />\n        {screenSize > 0 ? (\n          <View m={2}>\n            <ButtonRow\n              post={post}\n              hidePostButtons={hidePostButtons}\n              parentPost={parentPost}\n            />\n          </View>\n        ) : null}\n      </View>\n    </View>\n  ) : (\n    <SingleComment\n      hideAvatar={hideAvatar}\n      comment={post}\n      parentPost={post}\n      hidePostButtons={hidePostButtons}\n      additionalNesting={0}\n      nestingLevel={0}\n      hideBorder\n      noLink={noLink}\n      avatarText={avatarText}\n      preview={preview}\n      inMainFeed={!singlePost}\n    />\n  );\n\n  const additionalNesting =\n    hidePostButtons || screenSize ? 0 : layout.POST_BUTTONS_NESTING_UNITS;\n\n  const commentEl = renderComment ? (\n    <SingleComment\n      comment={comment}\n      parentPost={parentPost}\n      hidePostButtons={screenSize === 0}\n      hideBorder={isLink && !screenSize}\n      additionalNesting={additionalNesting}\n      nestingLevel={isLink ? 0 : 1}\n      preview={preview}\n      inMainFeed\n    />\n  ) : null;\n\n  const previewEl = preview && link && (link.url || link.image) && (\n    <View m={['4 0 0 0']}>\n      <PostInfo post={post} link={link} noLink={noLink} preview={preview} />\n    </View>\n  );\n\n  return (\n    <View maxWidth={MAX_POST_WIDTH} fdirection={'column'}>\n      {previewEl}\n      {isLink && previewEl ? <View mt={2} /> : postEl}\n      {commentEl}\n      {children}\n      {hideDivider ? null : <Divider m={['0 4', 0]} screenSize={screenSize} />}\n    </View>\n  );\n}\n\n// TODO use this for editing posts\n// editPost() {\n//   const { post, link = {} } = this.props;\n//   this.props.actions.clearCreatePost();\n//   const editPost = {\n//     edit: true,\n//     editPost: post,\n//     postBody: post.body,\n//     postCategory: post.category,\n//     allTags: post.tags,\n//     selectedTags: post.tags,\n//     // do we need these here?\n//     postImage: link.image,\n//     postUrl: link.url,\n//     urlPreview: {\n//       title: link.title,\n//       url: link.url,\n//       image: link.image,\n//       domain: link.domain\n//     }\n//   };\n//   this.props.actions.setCreatePostState(editPost);\n//   this.props.history.push(history.location.pathname + '#newpost');\n// }\n"],"file":"post.component.js"}