{"version":3,"sources":["../../../../src/modules/post/web/singlePost.container.js"],"names":["SinglePostContainer","props","actions","match","posts","params","post","id","getSelectedPost","getComments","getPost","prevProps","auth","community","comments","hasPost","firstPostId","childComments","_id","firstPost","link","links","metaPost","MAX_POST_WIDTH","dispatch","undefined","fetchComments","fetchPost","postActions","Promise","all","Component","PropTypes","object","location","state","user","investments","isAuthenticated","investActions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as postActions from 'modules/post/post.actions';\nimport * as investActions from 'modules/post/invest.actions';\nimport { getComments } from 'modules/comment/comment.actions';\nimport Comments from 'modules/comment/web/comment.container';\nimport get from 'lodash/get';\nimport { View } from 'modules/styled/uni';\nimport { MAX_POST_WIDTH } from 'styles/layout';\nimport PostComponent from './post.component';\n\nclass SinglePostContainer extends Component {\n  static propTypes = {\n    actions: PropTypes.object,\n    posts: PropTypes.object,\n    match: PropTypes.object,\n    location: PropTypes.object,\n    comments: PropTypes.object,\n    auth: PropTypes.object\n  };\n\n  static async fetchData(dispatch, params) {\n    if (!params.id || params.id === undefined) return null;\n    const fetchComments = dispatch(getComments(params.id));\n    const fetchPost = dispatch(postActions.getSelectedPost(params.id));\n    return Promise.all([fetchComments, fetchPost]);\n  }\n\n  componentDidMount() {\n    this.getPost();\n  }\n\n  getPost = () => {\n    const { actions, match, posts } = this.props;\n    const { params } = match;\n    const post = posts.posts[params.id];\n    if (!post) actions.getSelectedPost(params.id);\n    // TODO - we don't actually need to do this all the time...\n    // but we do want to grab updated comments...\n    actions.getComments(params.id);\n  };\n\n  componentDidUpdate(prevProps) {\n    // TODO this is not needed if we don't wipe post reducer\n    // when switching communities\n    if (prevProps.auth.community !== this.props.auth.community) this.getPost();\n  }\n\n  render() {\n    const { params } = this.props.match;\n    const { posts, comments } = this.props;\n    const post = posts.posts[params.id];\n    if (!post) return null;\n    const hasPost = post && post !== 'notFound';\n\n    const firstPostId = get(comments.childComments, `${post._id}.0`);\n    const firstPost = posts.posts[firstPostId];\n    const link = posts.links[post.metaPost];\n\n    return (\n      <View maxWidth={MAX_POST_WIDTH} mb={20}>\n        {hasPost && (\n          <View>\n            <PostComponent\n              noComments\n              link={link}\n              post={post}\n              firstPost={firstPost}\n              {...this.props}\n              hideDivider\n              singlePost\n            />\n            <Comments post={post} {...this.props} />\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    comments: state.comments,\n    auth: state.auth,\n    posts: state.posts,\n    user: state.user,\n    investments: state.investments,\n    isAuthenticated: state.auth.isAuthenticated\n  }),\n  dispatch => ({\n    actions: bindActionCreators(\n      {\n        ...postActions,\n        ...investActions,\n        getComments\n      },\n      dispatch\n    )\n  })\n)(SinglePostContainer);\n"],"file":"singlePost.container.js"}