{"version":3,"sources":["../../../../src/modules/post/vote-buttons/center-button.js"],"names":["CenterButton","propTypes","post","PropTypes","object","votedUp","bool","horizontal","payoutTime","data","dispatch","openBetModal","postId","_id","timer","CENTER_BUTTON_SIZE","BetButton","size","number","func","earning","state","earnings","pending","map","e","entities","find","ee","tooltipData","text","position","desktopOnly","estimatedRewards","estimatedPostPayout","shares","totalPostShares","colors","gold","white","black","Timer","oneOfType","string","updateTimerParams","now","Date","payoutDate","percent","getTime","PAYOUT_TIME","_date","index","updateTimer","id","setInterval","clearInterval","timeLelft","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  LinkFont,\n  HoverButton\n  // Text\n  // SmallText,\n  // NumericalValue,\n  // Image\n} from 'modules/styled/uni';\nimport { timeLeft, getTimestamp } from 'utils/numbers';\n\n// import { timeLeft, abbreviateNumber as toFixed } from 'utils/numbers';\nimport { colors } from 'styles';\nimport { PAYOUT_TIME } from '@r3l/common';\nimport { showModal } from 'modules/navigation/navigation.actions';\nimport { PieChart } from 'modules/stats/piechart';\nimport CoinStat from 'modules/stats/coinStat.component';\nimport Tooltip from 'modules/tooltip/tooltip.component';\nimport { CENTER_BUTTON_SIZE } from 'styles/layout';\n// import styled from 'styled-components/primitives';\n\n// const coinImage = require('public/img/relevantcoin.png');\n\n// const CoinImage = styled(Image)`\n//   position: absolute;\n//   left: ${() => sizing(-2)};\n//   top: ${() => sizing(-2)};\n// `;\n\nCenterButton.propTypes = {\n  post: PropTypes.object,\n  votedUp: PropTypes.bool,\n  horizontal: PropTypes.bool\n};\n\nexport function CenterButton({ post, votedUp, horizontal }) {\n  const { payoutTime } = post.data;\n\n  const dispatch = useDispatch();\n  const openBetModal = () => dispatch(showModal('investModal', { postId: post._id }));\n\n  const timer = (\n    <View w={CENTER_BUTTON_SIZE} h={CENTER_BUTTON_SIZE}>\n      <Timer payoutTime={payoutTime} post={post} />\n    </View>\n  );\n\n  return (\n    <View p={horizontal ? '0 1.5' : '.75 0'}>\n      {votedUp ? (\n        <BetButton size={CENTER_BUTTON_SIZE} openBetModal={openBetModal} post={post} />\n      ) : (\n        timer\n      )}\n    </View>\n  );\n}\n\nBetButton.propTypes = {\n  size: PropTypes.number,\n  openBetModal: PropTypes.func,\n  post: PropTypes.object\n};\n\nexport function BetButton({ size, openBetModal, post }) {\n  const earning = useSelector(state =>\n    state.earnings.pending\n      .map(e => state.earnings.entities[e])\n      .find(ee => ee.post === post._id)\n  );\n\n  const tooltipData = {\n    text: earning\n      ? 'This is your projected reward for this post, click to increase your bet'\n      : 'Bet on the relevance of this post to earn rewards',\n    position: 'right',\n    desktopOnly: true\n  };\n\n  const estimatedRewards =\n    earning && (earning.estimatedPostPayout * earning.shares) / earning.totalPostShares;\n\n  return (\n    <View>\n      <Tooltip data={tooltipData} name=\"betButton\" globalEventOff={'click'}>\n        <HoverButton\n          w={size}\n          h={size * 0.8}\n          minwidth={'0'}\n          bradius={size / 2}\n          onPress={openBetModal}\n          bg={earning ? 'transparent' : colors.gold}\n          p={'0 0'}\n          c={colors.white}\n          // bc={colors.gold}\n          // bw={1}\n          // border //= {!earning}\n        >\n          {earning ? (\n            <CoinStat\n              mr={0}\n              spaceBetween={0}\n              lh={2}\n              fs={1.5}\n              size={1.5}\n              align={'center'}\n              amount={estimatedRewards}\n            />\n          ) : (\n            <LinkFont c={earning ? colors.white : colors.black}>BET</LinkFont>\n          )}\n        </HoverButton>\n      </Tooltip>\n    </View>\n  );\n}\n\n// <CoinImage resizeMode=\"contain\" w={2} h={2} source={coinImage} />\n// <NumericalValue ls={1.5} fs={1.5}>\n//   {toFixed(earning.stakedTokens)}\n// </NumericalValue>\n\nTimer.propTypes = {\n  payoutTime: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  post: PropTypes.object\n};\n\nexport function Timer({ payoutTime, post }) {\n  const updateTimerParams = useCallback(() => {\n    const now = new Date();\n    const payoutDate = new Date(payoutTime);\n    const percent = 100 - (100 * (payoutDate.getTime() - now.getTime())) / PAYOUT_TIME;\n    const text = timeLeft({ _date: payoutTime, index: 1 });\n    return { percent, text };\n  }, [payoutTime]);\n\n  const [timer, updateTimer] = useState(updateTimerParams);\n\n  useEffect(() => {\n    const id = setInterval(() => updateTimer(updateTimerParams), 10000);\n    return () => clearInterval(id);\n  }, [payoutTime, updateTimerParams]);\n\n  const timeLelft = getTimestamp(post.data.payoutTime, true).toLowerCase();\n\n  const tooltipData = {\n    text: `Upvote this post to be able to bet on it.\\nYou have ${timeLelft} to bet.`,\n    position: 'right'\n  };\n\n  return (\n    <React.Fragment>\n      <PieChart color={colors.black} strokeWidth={1} {...timer} />\n      <Tooltip name=\"bet\" data={tooltipData} />\n    </React.Fragment>\n  );\n}\n"],"file":"center-button.js"}