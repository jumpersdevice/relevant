{"version":3,"sources":["../../../src/modules/post/post.reducer.js"],"names":["repostSchema","schema","Entity","idAttribute","linkSchema","postSchema","repost","post","metaPost","initialState","postError","feedUnread","feed","twitterFeed","top","new","flagged","loading","loaded","userPosts","topics","newFeedAvailable","newPostsAvailable","all","posts","topPosts","related","links","mergePosts","state","mPosts","Object","keys","forEach","id","reposted","undefined","postData","data","action","type","types","SET_RELATED","payload","postId","SET_TOP_POSTS","INC_FEED_COUNT","unread","SET_FEED_COUNT","SET_POSTS_SIMPLE","entities","SET_TOPIC_POSTS","topic","index","slice","result","SET_POSTS","GET_POSTS","UPDATE_POST","_id","updatePost","embeddedUser","relevance","pagerank","REMOVE_POST","newPosts","currentPosts","CLEAR_POSTS","community","POST_ERROR","SET_DISCOVER_TAGS","discoverTags","selectedPostId","SET_COMMENTS","comments","ADD_COMMENT","comment","UNDO_POST_INVESTMENT","myVote","UPDATE_POST_INVESTMENTS"],"mappings":"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","sourcesContent":["import { normalize, schema } from 'normalizr';\nimport * as types from 'core/actionTypes';\nimport get from 'lodash/get';\n\nconst repostSchema = new schema.Entity(\n  'posts',\n  // { comments: [commentSchema], user: userSchema },\n  { idAttribute: '_id' }\n);\n\nconst linkSchema = new schema.Entity('links', {}, { idAttribute: '_id' });\n\nconst postSchema = new schema.Entity(\n  'posts',\n  {\n    repost: { post: repostSchema },\n    metaPost: linkSchema\n  },\n  { idAttribute: '_id' }\n);\n\nconst initialState = {\n  postError: null,\n  feedUnread: null,\n  feed: [],\n  twitterFeed: [],\n  // store top & bottom arrays here for feed render\n  top: [],\n  new: [],\n  flagged: [],\n  loading: true,\n  loaded: {\n    feed: false,\n    top: false,\n    new: false,\n    twitterFeed: false,\n    userPosts: false,\n    topics: {}\n  },\n  newFeedAvailable: false,\n  newPostsAvailable: {},\n  userPosts: {},\n  topics: {\n    new: {},\n    top: {},\n    all: {}\n  },\n  posts: {},\n  topPosts: [],\n  related: {},\n  links: {}\n};\n\nfunction mergePosts(posts, state) {\n  const mPosts = {};\n  if (!posts) return mPosts;\n  Object.keys(posts).forEach(id => {\n    // need to do this so reposted = null doesen't over-write existing value\n    let { reposted } = posts[id];\n    if (!reposted) reposted = state.posts[id] ? state.posts[id].reposted : undefined;\n    const postData =\n      (posts[id] && posts[id].data) || (state.posts[id] && state.posts[id].data);\n    mPosts[id] = {\n      ...state.posts[id],\n      ...posts[id],\n      reposted,\n      postData\n    };\n  });\n  return mPosts;\n}\n\nexport default function post(state = initialState, action) {\n  switch (action.type) {\n    case types.SET_RELATED: {\n      return {\n        ...state,\n        related: {\n          ...state.related,\n          [action.payload.postId]: action.payload.related\n        }\n      };\n    }\n\n    case types.SET_TOP_POSTS: {\n      return {\n        ...state,\n        topPosts: action.payload\n      };\n    }\n\n    case types.INC_FEED_COUNT: {\n      const unread = state.feedUnread || 0;\n      return {\n        ...state,\n        feedUnread: unread + 1\n      };\n    }\n\n    case types.SET_FEED_COUNT: {\n      return {\n        ...state,\n        feedUnread: action.payload\n      };\n    }\n\n    case types.SET_POSTS_SIMPLE: {\n      const posts = mergePosts(action.payload.data.entities.posts, state);\n      return {\n        ...state,\n        posts: { ...state.posts, ...posts },\n        links: {\n          ...state.links,\n          ...action.payload.data.entities.links\n        }\n      };\n    }\n\n    case types.SET_TOPIC_POSTS: {\n      const { type, topic, index } = action.payload;\n      const posts = mergePosts(action.payload.data.entities.posts, state);\n      if (!state.topics[type][topic]) state.topics[type][topic] = [];\n      return {\n        ...state,\n        topics: {\n          ...state.topics,\n          [type]: {\n            ...state.topics[type],\n            [topic]: [\n              ...state.topics[type][topic].slice(0, index),\n              ...action.payload.data.result[type]\n            ]\n          }\n        },\n        posts: { ...state.posts, ...posts },\n        loaded: {\n          ...state.loaded,\n          [type]: true,\n          topics: {\n            ...state.loaded.topics,\n            [topic]: {\n              ...state.loaded.topics[topic],\n              [type]: true\n            }\n          }\n        },\n        links: {\n          ...state.links,\n          ...action.payload.data.entities.links\n        }\n      };\n    }\n\n    case types.SET_POSTS: {\n      const { type } = action.payload;\n      const posts = mergePosts(action.payload.data.entities.posts, state);\n      return {\n        ...state,\n        [type]: [\n          ...state[type].slice(0, action.payload.index),\n          ...action.payload.data.result[type]\n        ],\n        posts: { ...state.posts, ...posts },\n        loaded: {\n          ...state.loaded,\n          [type]: true\n        },\n        links: {\n          ...state.links,\n          ...action.payload.data.entities.links\n        },\n        newPostsAvailable: {}\n      };\n    }\n\n    case types.GET_POSTS: {\n      return {\n        ...state,\n        loaded: {\n          ...state.loaded,\n          [action.payload]: false\n        }\n      };\n    }\n\n    case types.UPDATE_POST: {\n      const id = action.payload._id;\n      const data = normalize(action.payload, postSchema);\n      const updatePost = data.entities.posts[id];\n\n      // need to do this so reposted = null doesen't over-write existing value\n      let { reposted } = action.payload;\n      if (!reposted) reposted = state.posts[id] ? state.posts[id].reposted : undefined;\n      const postData = updatePost.data || get(state.posts[id], 'data');\n      let embeddedUser = state.posts[id] ? state.posts[id].embeddedUser : null;\n      // TODO normalize this — should keep this in users store\n      if (\n        updatePost.embeddedUser &&\n        updatePost.embeddedUser.relevance &&\n        updatePost.embeddedUser.relevance.pagerank !== undefined\n      ) {\n        embeddedUser = updatePost.embeddedUser;\n      }\n\n      return {\n        ...state,\n        links: {\n          ...state.links,\n          ...data.entities.links\n        },\n        posts: {\n          ...state.posts,\n          [id]: {\n            ...state.posts[id],\n            ...updatePost,\n            reposted,\n            data: postData,\n            embeddedUser\n          }\n        }\n      };\n    }\n\n    case types.REMOVE_POST: {\n      const id = action.payload._id || action.payload;\n      const newPosts = { ...state.posts };\n      delete newPosts[id];\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [id]: null\n        }\n      };\n    }\n\n    case 'SET_USER_POSTS': {\n      const { id } = action.payload;\n      const currentPosts = state.userPosts[id] || [];\n      const posts = mergePosts(action.payload.data.entities.posts, state);\n      return {\n        ...state,\n        userPosts: {\n          ...state.userPosts,\n          [id]: [\n            ...currentPosts.slice(0, action.payload.index),\n            ...action.payload.data.result[id]\n          ]\n        },\n        links: {\n          ...state.links,\n          ...action.payload.data.entities.links\n        },\n        posts: { ...state.posts, ...posts },\n        loaded: {\n          ...state.loaded,\n          userPosts: true\n        }\n      };\n    }\n\n    case 'LOADING_USER_POSTS': {\n      return {\n        ...state,\n        loaded: {\n          ...state.loaded,\n          userPosts: false\n        }\n      };\n    }\n\n    case types.CLEAR_POSTS: {\n      const { type } = action.payload;\n      return { ...state, [type]: [] };\n    }\n\n    case 'SET_NEW_POSTS_STATUS': {\n      return {\n        ...state,\n        newPostsAvailable: {\n          ...state.newPostsAvailable,\n          [action.payload.community]:\n            state.newPostsAvailable[action.payload.community] || 0 + 1\n        }\n      };\n    }\n\n    case types.POST_ERROR: {\n      return { ...state, postError: action.payload };\n    }\n\n    case types.SET_DISCOVER_TAGS: {\n      return { ...state, discoverTags: action.payload };\n    }\n\n    case 'SET_SELECTED_POST': {\n      return { ...state, selectedPostId: action.payload };\n    }\n\n    case 'SET_SELECTED_POST_DATA': {\n      const id = action.payload._id;\n      let { reposted } = action.payload;\n      if (!reposted) reposted = state.posts[id] ? state.posts[id].reposted : undefined;\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [id]: {\n            ...state.posts[id],\n            ...action.payload,\n            reposted\n          }\n        }\n      };\n    }\n\n    case 'CLEAR_SELECTED_POST': {\n      return {\n        ...state, // selectedPostData: null,\n        selectedPostId: null\n      };\n    }\n\n    case 'SET_NEW_FEED_STATUS': {\n      return { ...state, newFeedAvailable: action.payload };\n    }\n\n    case 'CLEAR_USER_POSTS': {\n      return { ...state, userPosts: {} };\n    }\n\n    // we store comments in post state\n    case types.SET_COMMENTS: {\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          ...action.payload.comments\n        }\n      };\n    }\n\n    case types.ADD_COMMENT: {\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [action.payload.comment._id]: action.payload.comment\n        }\n      };\n    }\n\n    case types.UNDO_POST_INVESTMENT: {\n      const postId = action.payload;\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [postId]: {\n            ...state.posts[postId],\n            myVote: null\n          }\n        }\n      };\n    }\n\n    case types.UPDATE_POST_INVESTMENTS: {\n      if (!action.payload) return state;\n      const postId = action.payload.post;\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [postId]: {\n            ...state.posts[postId],\n            myVote: action.payload\n          }\n        }\n      };\n    }\n\n    // this wipes feed on login\n    // case types.LOGIN_USER_SUCCESS: {\n    //   return { ...initialState };\n    // }\n\n    // this wipes feed on logout\n    // case types.LOGOUT_USER: {\n    //   return { ...initialState };\n    // }\n\n    default:\n      return state;\n  }\n}\n"],"file":"post.reducer.js"}