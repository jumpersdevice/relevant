{"version":3,"sources":["../../../../src/modules/text/mobile/textEdit.component.js"],"names":["styles","TextEdit","props","context","state","height","setState","text","setTimeout","textInput","focus","buttonAdjust","Platform","OS","flex","placeholder","greyText","c","Math","min","maxHeight","minHeight","paddingBottom","paddingHorizontal","style","onFocus","onBlur","evt","nativeEvent","e","max","contentSize","onContentSizeChange","bug","editingCommentButtons","marginTop","colors","lightGrey","black","toggleFunction","saveEditFunction","Component","PropTypes","string","object","func","localStyles","StyleSheet","create","flexDirection","paddingVertical","justifyContent","alignItems","flexWrap","propTypes","array","globalStyles"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, View, TextInput, Platform } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { globalStyles, greyText } from 'app/styles/global';\nimport TextBody from 'modules/text/mobile/textBody.component';\nimport { Button } from 'modules/styled/uni';\nimport { colors } from 'styles';\n\nlet styles;\n\nclass TextEdit extends Component {\n  static propTypes = {\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    style: PropTypes.object,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onContentSizeChange: PropTypes.func,\n    toggleFunction: PropTypes.func,\n    saveEditFunction: PropTypes.func\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      height: 50\n    };\n  }\n\n  componentWillMount() {\n    this.setState({ text: this.props.text });\n  }\n\n  componentDidMount() {\n    setTimeout(this.textInput.focus, 100);\n  }\n\n  render() {\n    let buttonAdjust = 0;\n    if (Platform.OS === 'android') buttonAdjust = 80;\n\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          multiline\n          underlineColorAndroid={'transparent'}\n          placeholder={this.props.placeholder}\n          placeholderTextColor={greyText}\n          ref={c => (this.textInput = c)}\n          style={[\n            {\n              height: Math.min(this.state.height, 120) + buttonAdjust,\n              maxHeight: 120 + buttonAdjust,\n              minHeight: 50,\n              paddingBottom: buttonAdjust,\n              paddingHorizontal: 0\n            },\n            this.props.style\n          ]}\n          textAlignVertical={'top'}\n          onFocus={this.props.onFocus}\n          onBlur={this.props.onBlur}\n          onChange={evt =>\n            this.setState({\n              text: evt.nativeEvent.text\n            })\n          }\n          onContentSizeChange={e => {\n            this.setState({\n              height: Math.max(e.nativeEvent.contentSize.height, 50)\n            });\n            if (this.props.onContentSizeChange) this.props.onContentSizeChange();\n          }}\n          // fix for android enter bug!\n          blurOnSubmit={false}\n          onSubmitEditing={() => {\n            if (this.bug) {\n              let { text } = this.state.text;\n              text += '\\n';\n              this.setState({\n                text\n              });\n              return (this.bug = false);\n            }\n            return (this.bug = true);\n          }}\n        >\n          <TextBody style={{ flex: 1 }} showAllMentions>\n            {this.state.text}\n          </TextBody>\n        </TextInput>\n\n        <View style={[styles.editingCommentButtons, { marginTop: -1 * buttonAdjust }]}>\n          <Button\n            mr={1}\n            h={5}\n            p={['0 2']}\n            bg={colors.lightGrey}\n            c={colors.black}\n            onPress={() => {\n              this.props.toggleFunction();\n            }}\n          >\n            Cancel\n          </Button>\n\n          <Button\n            h={5}\n            p={['0 2']}\n            onPress={() => this.props.saveEditFunction(this.state.text)}\n          >\n            Save changes\n          </Button>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst localStyles = StyleSheet.create({\n  editingCommentButtons: {\n    flexDirection: 'row',\n    paddingVertical: 30,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  }\n});\n\nTextEdit.propTypes = {\n  text: PropTypes.string,\n  placeholder: PropTypes.string,\n  toggleFunction: PropTypes.func,\n  saveEditFunction: PropTypes.func,\n  style: PropTypes.array\n};\n\nstyles = { ...localStyles, ...globalStyles };\n\nexport default TextEdit;\n"],"file":"textEdit.component.js"}