{"version":3,"sources":["../../../../src/modules/ui/mobile/DrawerLayout.js"],"names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","PanHandler","SPRING_CONFIG","speed","bounciness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","DrawerLayout","props","context","React","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","State","ACTIVE","_handleRelease","_emitStateChanged","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","showing","_accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","_pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","_panGestureHandler","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","spring","start","finished","onDrawerOpen","onDrawerClose","requestAnimationFrame","_updateShowing","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","_onTapHandlerStateChange","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","_handleContainerLayout","containerOnBack","containerInFront","children","_renderOverlay","drawerContainer","renderNavigationView","ref","onGestureRef","_updateAnimatedEvent","_setPanGestureRef","_openingHandlerStateChange","_renderDrawer","Component","Left","Right","propTypes","PropTypes","object","array","enabled","bool","onHandlerStateChange","func","onGestureEvent","renderDrawer","forwardRef","gesture","navigation","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"mappings":"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","sourcesContent":["// @flow\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager\n} from 'react-native';\n\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State\n} from 'react-native-gesture-handler';\n\nconst DRAG_TOSS = 0.7;\n\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\nlet PanHandler = {};\n\nconst SPRING_CONFIG = {\n  // damping: 20,\n  // mass: 10,\n  // stiffness: 210,\n  speed: 20,\n  bounciness: 0,\n  overshootClamping: true,\n  restSpeedThreshold: 0.001,\n  restDisplacementThreshold: 0.001\n};\n\nexport type PropType = {\n  children: any,\n  drawerBackgroundColor?: string,\n  drawerPosition: 'left' | 'right',\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth: number,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  onDrawerClose?: Function,\n  onDrawerOpen?: Function,\n  onDrawerStateChanged?: Function,\n  renderNavigationView: (progressAnimatedValue: any) => any,\n  useNativeAnimations: boolean,\n\n  // brand new properties\n  drawerType: 'front' | 'back' | 'slide',\n  edgeWidth: number,\n  minSwipeDistance: number,\n  hideStatusBar?: boolean,\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\n  overlayColor: string,\n  drawerContainerStyle?: any,\n  contentContainerStyle?: any,\n  onGestureRef?: Function\n  // Properties not yet supported\n  // onDrawerSlide?: Function\n};\n\nexport type StateType = {\n  dragX: any,\n  touchX: any,\n  drawerTranslation: any,\n  containerWidth: number\n};\n\nexport type EventType = {\n  stopPropagation: Function\n};\n\nexport type DrawerMovementOptionType = {\n  velocity?: number\n};\n\nexport default class DrawerLayout extends Component<PropType, StateType> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'black',\n    drawerLockMode: 'unlocked'\n  };\n\n  static positions = {\n    Left: 'left',\n    Right: 'right'\n  };\n\n  _openValue: ?Animated.Interpolation;\n\n  _onGestureEvent: ?Animated.Event;\n\n  _accessibilityIsModalView = React.createRef();\n\n  _pointerEventsView = React.createRef();\n\n  _panGestureHandler = React.createRef();\n\n  _drawerShown = false;\n\n  constructor(props: PropType, context: any) {\n    super(props, context);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n  }\n\n  componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      );\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1]\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth],\n      outputRange: [0, 1],\n      extrapolate: 'clamp'\n    });\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  };\n\n  _handleContainerLayout = ({ nativeEvent }) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\n    this.props.onDrawerStateChanged &&\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\n  };\n\n  _openingHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this._emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (\n      this._drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n\n    if (shouldOpen) {\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX * 2);\n    } else {\n      this._animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  _updateShowing = (showing: boolean) => {\n    this._drawerShown = showing;\n    this._accessibilityIsModalView.current &&\n      this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n    this._pointerEventsView.current &&\n      this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    this._panGestureHandler.current &&\n      this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n  };\n\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\n    if (fromValue !== undefined) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      ...SPRING_CONFIG,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations\n    }).start(({ finished }) => {\n      if (finished) {\n        this._emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\n        } else {\n          this.props.onDrawerClose && this.props.onDrawerClose();\n        }\n      }\n    });\n\n    this.state.dragX.setValue(0);\n\n    requestAnimationFrame(() => {\n      this.state.touchX.setValue(\n        this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n      );\n      this._updateShowing(willShow);\n      this._emitStateChanged(SETTLING, willShow);\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(\n      undefined,\n      this.props.drawerWidth,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered\n    // and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered\n    // and it would be still clickable\n    this.forceUpdate();\n  };\n\n  _renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this._openValue, 'should be set');\n    const overlayOpacity = this._openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 0.7],\n      extrapolate: 'clamp'\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\n          ref={this._pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  _renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth\n    };\n    const openValue = this._openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp'\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }]\n      };\n    }\n\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp'\n      });\n    }\n    const drawerStyles = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front' ? styles.containerOnBack : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle\n          ]}\n        >\n          {typeof this.props.children === 'function'\n            ? this.props.children(this._openValue)\n            : this.props.children}\n          {this._renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this._accessibilityIsModalView}\n          accessibilityViewIsModal={this._drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}\n        >\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this._openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  _setPanGestureRef = ref => {\n    this._panGestureHandler.current = ref;\n    this.props.onGestureRef && this.props.onGestureRef(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanHandler\n        ref={this._setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._openingHandlerStateChange}\n        enabled={drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'}\n        renderDrawer={this._renderDrawer}\n      />\n    );\n  }\n}\n\nPanHandler.propTypes = {\n  hitSlop: PropTypes.object,\n  activeOffsetX: PropTypes.array,\n  enabled: PropTypes.bool,\n  onHandlerStateChange: PropTypes.func,\n  onGestureEvent: PropTypes.func,\n  renderDrawer: PropTypes.func\n};\n\nPanHandler = React.forwardRef(\n  (\n    /* eslint-disable react/prop-types */\n    {\n      hitSlop,\n      activeOffsetX,\n      enabled,\n      onHandlerStateChange,\n      onGestureEvent,\n      renderDrawer\n    },\n    /* eslint-enable react/prop-types */\n    ref\n  ) => {\n    const gesture = useSelector(state => state.navigation.gesture);\n    return (\n      <PanGestureHandler\n        ref={ref}\n        hitSlop={hitSlop}\n        activeOffsetX={activeOffsetX}\n        // failOffsetY={[-15, 15]}\n        onGestureEvent={onGestureEvent}\n        onHandlerStateChange={onHandlerStateChange}\n        enabled={enabled}\n        simultaneousHandlers={gesture || {}}\n        waitFor={gesture || {}}\n      >\n        {renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row'\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000\n  }\n});\n"],"file":"DrawerLayout.js"}