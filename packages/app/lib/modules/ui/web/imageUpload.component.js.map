{"version":3,"sources":["../../../../src/modules/ui/web/imageUpload.component.js"],"names":["Alert","alert","ImageUpload","preview","fileName","file","fileInput","files","img","loadImage","then","dataURL","extension","split","name","substr","lastIndexOf","setState","props","onChange","catch","e","state","s3","toS3Advanced","upload","placeholder","imageComponent","React","cloneElement","source","uri","maxWidth","previewImage","renderPreview","c","processImage","bind","Component","PropTypes","string","node","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { img, s3, alert } from 'app/utils';\nimport { View } from 'modules/styled/uni';\n\nconst Alert = alert.Alert();\n\nexport default class ImageUpload extends Component {\n  static propTypes = {\n    placeholder: PropTypes.string,\n    imageComponent: PropTypes.node,\n    onChange: PropTypes.func\n  };\n\n  state = {\n    preview: null,\n    fileName: null\n  };\n\n  processImage() {\n    const file = this.fileInput.files[0];\n    img\n      .loadImage(file)\n      .then(dataURL => {\n        const extension = dataURL\n          .split(',')[0]\n          .split('/')[1]\n          .split(';')[0];\n        const name = file.name.substr(0, extension.lastIndexOf('.')) + '.' + extension;\n        this.setState({ preview: dataURL, fileName: name });\n        this.props.onChange({ preview: dataURL, fileName: name });\n      })\n      .catch(e => {\n        Alert.alert('Error uploading image ' + e);\n      });\n  }\n\n  async uploadImage() {\n    if (!this.state.fileName || !this.state.preview) {\n      Alert('Please select an image');\n      return null;\n    }\n    const upload = await s3.toS3Advanced(this.state.preview, this.state.fileName);\n    this.setState({ preview: null, fileName: null });\n    this.props.onChange(upload);\n    return upload;\n  }\n\n  renderPreview() {\n    const { placeholder, imageComponent } = this.props;\n    const { preview } = this.state;\n    if (!preview && placeholder) {\n      return React.cloneElement(imageComponent, { source: { uri: placeholder } });\n    }\n    if (preview && imageComponent) {\n      return React.cloneElement(imageComponent, { source: { uri: preview } });\n    }\n    if (preview) {\n      return <img src={preview} style={{ maxWidth: '300px' }} />;\n    }\n    return null;\n  }\n\n  render() {\n    const previewImage = this.renderPreview();\n\n    return (\n      <View display=\"flex\" fdirection=\"row\" align=\"center\">\n        <View mr={2}>{previewImage}</View>\n        <input\n          ref={c => (this.fileInput = c)}\n          onChange={this.processImage.bind(this)}\n          accept={'image/*'}\n          name={'img'}\n          type={'file'}\n        />\n      </View>\n    );\n  }\n}\n"],"file":"imageUpload.component.js"}