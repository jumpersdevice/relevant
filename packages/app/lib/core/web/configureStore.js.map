{"version":3,"sources":["../../../src/core/web/configureStore.js"],"names":["rootSaga","server","process","env","API_SERVER","NODE_ENV","socket","io","BROWSER","require","on","emit","configureStore","initialState","middleware","socketIoMiddleware","_middleware","thunk","sagaMiddleware","applyMiddleware","DEVTOOLS","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","rootReducer","asyncReducers","injectReducer","key","asyncReducer","state","getState","auth","user","type","payload","_id","module","hot","accept","nextRootReducer","replaceReducer"],"mappings":"4VAAA,oEACA,4BACA,+DACA,wDAEA,8D,sCAGUA,Q,EAAV,QAAUA,CAAAA,QAAV,oKAEA,GAAIC,CAAAA,MAAM,CAAGC,OAAO,CAACC,GAAR,CAAYC,UAAzB,CACA,GAAIF,OAAO,CAACC,GAAR,CAAYE,QAAZ,GAAyB,aAA7B,CAA4C,CAC1CJ,MAAM,CAAG,uBAAT,CACD,CACD,GAAIK,CAAAA,MAAJ,CACA,GAAIC,CAAAA,EAAJ,CAEA,GAAIL,OAAO,CAACC,GAAR,CAAYK,OAAhB,CAAyB,CACvBD,EAAE,CAAGE,OAAO,CAAC,kBAAD,CAAZ,CACAH,MAAM,CAAGC,EAAE,CAACN,MAAD,CAAX,CACAK,MAAM,CAACI,EAAP,CAAU,eAAV,CAA2B,UAAM,CAC/BJ,MAAM,CAACK,IAAP,CAAY,cAAZ,EACD,CAFD,EAGD,CAEc,QAASC,CAAAA,cAAT,EAA2C,IAAnBC,CAAAA,YAAmB,2DAAJ,EAAI,CAExD,GAAIC,CAAAA,UAAJ,CAEA,GAAIZ,OAAO,CAACC,GAAR,CAAYK,OAAhB,CAAyB,CAEvB,GAAMO,CAAAA,kBAAkB,CAAG,yBAAyBT,MAAzB,CAAiC,SAAjC,CAA3B,CACA,GAAMU,CAAAA,WAAW,CAAG,CAACC,mBAAD,CAAQF,kBAAR,CAA4BG,kCAA5B,CAApB,CACAJ,UAAU,CAAGK,oCAAmBH,WAAnB,CAAb,CACD,CALD,IAKO,CACLF,UAAU,CAAG,2BAAgBG,mBAAhB,CAAuBC,kCAAvB,CAAb,CACD,CAED,GAAIhB,OAAO,CAACC,GAAR,CAAYK,OAAZ,EAAuBN,OAAO,CAACC,GAAR,CAAYiB,QAAvC,CAAiD,CAC/C,GAAMC,CAAAA,gBAAgB,CAAGC,MAAM,CAACC,oCAAP,EAA+CC,cAAxE,CACAV,UAAU,CAAGO,gBAAgB,CAACP,UAAD,CAA7B,CACD,CAED,GAAMW,CAAAA,KAAK,CAAGvB,OAAO,CAACC,GAAR,CAAYK,OAAZ,CAEV,+CAAuB,CAAER,QAAQ,CAARA,QAAF,CAAvB,CAAqC0B,iBAArC,CAAkDb,YAAlD,CAAgEC,UAAhE,CAFU,CAIV,uBAAYY,iBAAZ,CAAyBb,YAAzB,CAAuCC,UAAvC,CAJJ,CAMAW,KAAK,CAACE,aAAN,CAAsB,EAAtB,CACAF,KAAK,CAACG,aAAN,CAAsB,SAACC,GAAD,CAAMC,YAAN,QAAuB,4BAAcL,KAAd,CAAqBI,GAArB,CAA0BC,YAA1B,CAAvB,EAAtB,CAEA,GAAI5B,OAAO,CAACC,GAAR,CAAYK,OAAhB,CAAyB,CACvBF,MAAM,CAACI,EAAP,CAAU,SAAV,CAAqB,UAAM,CACzB,GAAMqB,CAAAA,KAAK,CAAGN,KAAK,CAACO,QAAN,EAAd,CACA,GAAID,KAAK,CAACE,IAAN,EAAcF,KAAK,CAACE,IAAN,CAAWC,IAA7B,CAAmC,CACjC5B,MAAM,CAACK,IAAP,CAAY,QAAZ,CAAsB,CACpBwB,IAAI,CAAE,kBADc,CAEpBC,OAAO,CAAEL,KAAK,CAACE,IAAN,CAAWC,IAAX,CAAgBG,GAFL,CAAtB,EAID,CACF,CARD,EASD,CAED,GAAIC,MAAM,CAACC,GAAX,CAAgB,CACdD,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,CAAiC,UAAM,CACrC,GAAMC,CAAAA,eAAe,CAAGhC,OAAO,eAA/B,CACAgB,KAAK,CAACiB,cAAN,CAAqBD,eAArB,EACD,CAHD,EAID,CAED,MAAOhB,CAAAA,KAAP,CACD","sourcesContent":["import createSocketIoMiddleware from 'redux-socket.io';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createInjectSagasStore, sagaMiddleware } from 'redux-sagas-injector';\n\nimport rootReducer, { injectReducer } from '../reducers';\n// import rootSaga from '../sagas';\n\nfunction* rootSaga() {} // eslint-disable-line\n\nlet server = process.env.API_SERVER;\nif (process.env.NODE_ENV === 'development') {\n  server = 'http://localhost:3000';\n}\nlet socket;\nlet io;\n\nif (process.env.BROWSER) {\n  io = require('socket.io-client');\n  socket = io(server);\n  socket.on('pingKeepAlive', () => {\n    socket.emit('pingResponse');\n  });\n}\n\nexport default function configureStore(initialState = {}) {\n  // Compose final middleware and use devtools in debug environment\n  let middleware;\n\n  if (process.env.BROWSER) {\n    // only use the socket middleware on client and not on server\n    const socketIoMiddleware = createSocketIoMiddleware(socket, 'server/');\n    const _middleware = [thunk, socketIoMiddleware, sagaMiddleware];\n    middleware = applyMiddleware(..._middleware);\n  } else {\n    middleware = applyMiddleware(thunk, sagaMiddleware);\n  }\n\n  if (process.env.BROWSER && process.env.DEVTOOLS) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    middleware = composeEnhancers(middleware);\n  }\n\n  const store = process.env.BROWSER\n    ? // This causes a small memory leak on server\n      createInjectSagasStore({ rootSaga }, rootReducer, initialState, middleware)\n    : // This doesn't cause leak on server\n      createStore(rootReducer, initialState, middleware);\n\n  store.asyncReducers = {};\n  store.injectReducer = (key, asyncReducer) => injectReducer(store, key, asyncReducer);\n\n  if (process.env.BROWSER) {\n    socket.on('connect', () => {\n      const state = store.getState();\n      if (state.auth && state.auth.user) {\n        socket.emit('action', {\n          type: 'server/storeUser',\n          payload: state.auth.user._id\n        });\n      }\n    });\n  }\n\n  if (module.hot) {\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers');\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}\n"],"file":"configureStore.js"}