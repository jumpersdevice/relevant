{"version":3,"sources":["webpack:///./src/core/config.js","webpack:///./src/modules/contract/contract.hooks.js","webpack:///./src/modules/contract/contract.selectors.js","webpack:///./src/modules/wallet/price.context.js","webpack:///./src/modules/wallet/wallet.actions.js","webpack:///./src/modules/wallet/web/cashoutFooter.js","webpack:///./src/modules/wallet/web/connectMetamaskModal.js","webpack:///./src/modules/wallet/web/web3Warning/web3Warning.component.js","webpack:///./src/modules/wallet/web/web3Warning/web3Warning.constants.js","webpack:///./src/modules/wallet/web/web3Warning/web3Warning.hooks.js","webpack:///./src/modules/wallet/web/web3Warning/web3Warning.selectors.js","webpack:///./src/utils/eth.js","webpack:///./src/utils/web3.provider.js"],"names":["INFURA_PROTOCOL","process","INFURA_NETWORK","INFURA_API_KEY","NETWORK_NUMBER","Alert","alert","_web3","getProvider","useRelevantActions","actions","tokenActions","tokenAddress","useContract","dispatch","useDispatch","getEvent","useCallback","event","events","get","at","subscribeToEvent","subscribe","call","method","args","methods","send","options","useWeb3","useMetamask","web3","useWeb3State","init","web3Instance","_web3Actions","network","bindActionCreators","accounts","useEffect","isInitialized","status","networkId","metamask","getMetamask","autoRefreshOnNetworkChange","enable","err","getAccounts","_accounts","getSuccess","getNetworkId","getId","on","off","useBalance","userBalance","useRelevantState","haveBalance","length","phase","formatBN","value","useRelevantToken","getState","useTxState","tx","callback","txState","payload","selectUserBalance","selectors","state","address","balanceOf","items","selectUserNonce","nonceOf","formatSelection","el","parseBN","useSelector","id","initialized","userNonce","RelevantToken","eventCache","TOKEN_ADDRESS","DISABLE_PRICE","PriceContext","React","createContext","exchangeLink","tokenEnabled","usePrice","amount","type","price","useContext","abbreviateNumber","PriceProvider","children","useReducer","priceReducer","loading","error","data","refresh","didCancel","tokenPrice","getTokenReserves","res","fetch","ethPrice","json","bid","fetchData","setTimeout","ethReserve","tokenReserve","usdPrice","div","times","parseFloat","toString","computePrice","priceString","Provider","propTypes","PropTypes","node","action","Error","cashOutCall","customAmount","sendCashoutAction","user","earning","api","request","endpoint","path","body","JSON","stringify","updateAuthUser","addEarning","amnt","sig","cashOut","formatBalanceRead","console","log","message","connectAddress","account","msgParams","name","generateSalt","currentProvider","sendAsync","params","from","msg","acc","result","addEthAddress","messate","CashoutFooter","customButton","rightEl","getNetworkName","leftEl","truncateAddress","mt","mb","fdirection","justify","AddEthAddress","close","auth","canClaim","balance","airdropTokens","warning","useCurrentWarning","title","Connected","usdAmount","func","string","DEFAULT_BG","DEFAULT_BORDER_C","Web3Warning","bg","bc","onClick","buttonAction","window","open","onClickCreator","disabled","mr","buttonText","p","border","oneOfType","object","inline","to","external","target","colors","errorA","connection","warningA","connectMetamask","CASHOUT_LIMIT","setWarning","useState","hasAccount","warnings","hasCorrectNetwork","ethAddress","hasAccountConnected","toLowerCase","hasCorrectAccount","signMessage","provider","signer","getSigner","now","Date","exp","Math","floor","setMinutes","getMinutes","signature","slice","hex","getBN","decimals","numString","Number","trailingZeroes","getTrailingZeros","withoutZeros","toFixed","crypto","randomBytes","balString","formatBalanceWrite","rpcUrl","defaultOptions","getRpcUrl","parseInt","ethereum","initProvider","createProvider","Web3","protocol","apiKey","buildRpcUrl","providers","WebsocketProvider","HttpProvider"],"mappings":"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","file":"25.bundle.js","sourcesContent":["export const { INFURA_PROTOCOL } = process.env;\nexport const { INFURA_NETWORK } = process.env;\nexport const { INFURA_API_KEY } = process.env;\nexport const { NETWORK_NUMBER } = process.env;\n","import { useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { formatBN } from 'utils/eth';\nimport { getProvider, getMetamask } from 'utils/web3.provider';\nimport { bindActionCreators } from 'redux';\nimport { actions as _web3Actions } from 'redux-saga-web3';\nimport { alert } from 'app/utils';\nimport { useWeb3State, useRelevantState } from './contract.selectors';\nimport { useContract } from './contract.context';\n\nconst Alert = alert.Alert();\nconst _web3 = getProvider();\n\nexport const useWeb3Actions = () => {\n  const dispatch = useDispatch();\n  return {\n    init: useCallback(web3Instance => dispatch(_web3Actions.init.init(web3Instance)), [\n      dispatch\n    ]),\n    network: bindActionCreators({ ..._web3Actions.network }, dispatch),\n    accounts: bindActionCreators({ ..._web3Actions.accounts }, dispatch)\n  };\n};\n\nexport const useRelevantActions = () => {\n  const { actions: tokenActions, tokenAddress } = useContract();\n  const dispatch = useDispatch();\n  const actions = {\n    getEvent: useCallback(\n      event => {\n        dispatch(tokenActions.events[event].get({ at: tokenAddress }));\n      },\n      [dispatch, tokenActions, tokenAddress]\n    ),\n    subscribeToEvent: useCallback(\n      event => {\n        dispatch(tokenActions.events[event].get({ at: tokenAddress }));\n        return dispatch(tokenActions.events[event].subscribe({ at: tokenAddress }));\n      },\n      [dispatch, tokenActions, tokenAddress]\n    ),\n    call: useCallback(\n      (method, args) => {\n        if (args)\n          return dispatch(tokenActions.methods[method]({ at: tokenAddress }).call(args));\n        return dispatch(tokenActions.methods[method]({ at: tokenAddress }).call());\n      },\n      [dispatch, tokenActions, tokenAddress]\n    ),\n    send: useCallback(\n      (method, options, ...args) => {\n        if (args) {\n          return dispatch(\n            tokenActions.methods[method]({\n              at: tokenAddress,\n              ...options\n            }).send(...args)\n          );\n        }\n        return dispatch(\n          tokenActions.methods[method]({\n            at: tokenAddress,\n            ...options\n          }).send()\n        );\n      },\n      [dispatch, tokenActions, tokenAddress]\n    )\n  };\n  return tokenActions ? actions : {};\n};\n\nexport const useWeb3 = () => {\n  useContract();\n  useMetamask();\n  const web3 = useWeb3State();\n  const { init } = useWeb3Actions();\n  useEffect(() => {\n    // TODO this init function opens a connect popup which prevents\n    // the display of a custom popup (like connect/signature)\n    if (!web3.isInitialized) init(_web3);\n  }, [web3.status, web3.isInitialized, init]);\n  return [web3.accounts, web3.isInitialized, web3.networkId];\n};\n\n// Perhaps this should not be an effect?\n// This is just global metamask setup that should be done once.\n// But we need to consider the case where we start out with no metamask and then enable metamask.\nexport const useMetamask = () => {\n  const dispatch = useDispatch();\n  const metamask = getMetamask();\n  if (metamask) metamask.autoRefreshOnNetworkChange = false;\n\n  useEffect(() => {\n    if (!metamask) return () => {};\n    try {\n      metamask.enable();\n    } catch (err) {\n      return () => {};\n    }\n\n    const getAccounts = _accounts =>\n      dispatch(_web3Actions.accounts.getSuccess(_accounts));\n    const getNetworkId = () => dispatch(_web3Actions.network.getId());\n\n    metamask.on('accountsChanged', getAccounts);\n    metamask.on('networkChanged', getNetworkId);\n    return () => {\n      metamask.off('accountsChanged', getAccounts);\n      metamask.off('networkChanged', getNetworkId);\n    };\n  }, [dispatch, metamask]);\n  return metamask;\n};\n\nexport const useBalance = () => {\n  const { accounts } = useWeb3State();\n  const { userBalance } = useRelevantState();\n  const { call, subscribeToEvent } = useRelevantActions();\n  const haveBalance = !!userBalance;\n\n  useEffect(() => {\n    subscribeToEvent && subscribeToEvent('Transfer');\n    if (accounts && accounts.length && !haveBalance) {\n      call && call('balanceOf', accounts[0]);\n    }\n  }, [accounts, haveBalance, call, subscribeToEvent]);\n\n  const relCoins =\n    userBalance && userBalance.phase === 'SUCCESS'\n      ? formatBN(userBalance.value, 18)\n      : null;\n\n  return relCoins;\n};\n\nexport const useEventSubscription = () => {\n  const { subscribeToEvent } = useRelevantActions();\n  useEffect(() => {\n    subscribeToEvent('Released');\n  }, [subscribeToEvent]);\n};\n\n// DEPRECATED backwards compatability\n\n// Rerturns [Accounts, Relevant State, Relevant Actions]\nexport const useTokenContract = () => {\n  useContract();\n  const { getState } = useRelevantState();\n  const web3 = useWeb3State();\n  const { call, send } = useRelevantActions();\n  useWeb3();\n  useBalance();\n  // useEventSubscription(ethActions);\n  return [\n    web3.accounts,\n    { methodCache: { select: getState } },\n    { cacheMethod: call, cacheSend: send }\n  ];\n};\n\n// Rerturns [Accounts, Relevant State, Relevant Actions]\nexport const useRelevantToken = () => {\n  useContract();\n  const { getState } = useRelevantState();\n  const web3 = useWeb3State();\n  const { call, send } = useRelevantActions();\n  useWeb3();\n  useBalance();\n  // useEventSubscription(ethActions);\n  return { accounts: web3.accounts, getState, call, send };\n};\n\nexport const useTxState = ({ tx, method, callback }) => {\n  const { getState } = useRelevantState();\n  if (!tx || !getState) return null;\n\n  const txState = getState(method, ...tx.payload.args);\n\n  if (txState && txState.phase === 'RECEIPT') {\n    Alert.alert('Transaction Completed!', 'success');\n    callback();\n    return 'success';\n  }\n\n  if (txState && txState.phase === 'ERROR') {\n    Alert.alert(txState.value.get('message'));\n    callback();\n    return 'error';\n  }\n\n  return 'pending';\n};\n","import { useSelector } from 'react-redux';\nimport { parseBN } from 'app/utils/eth';\nimport { useContract } from './contract.context';\n\nexport const selectUserBalance = (selectors, state, address) =>\n  selectors.methods.balanceOf({ at: address })(\n    state,\n    state.web3 && state.web3.accounts.items && state.web3.accounts.items[0]\n  );\n\nexport const selectUserNonce = (selectors, state, address) =>\n  selectors.methods.nonceOf({ at: address })(\n    state,\n    state.web3 && state.web3.accounts.items && state.web3.accounts.items[0]\n  );\n\nexport const selectCashOut = (selectors, state, address) =>\n  selectors.methods.cashOut({ at: address })(\n    state,\n    state.web3 && state.web3.accounts.items && state.web3.accounts.items[0]\n  );\n\nexport const formatSelection = el => {\n  if (!el) return {};\n  const value = typeof parseBN(el.value) !== 'number' ? parseBN(el.value) : el.value;\n  return { ...el, value };\n};\n\nexport const useWeb3State = () => {\n  useContract();\n  return useSelector(state => ({\n    web3: state.web3,\n    status: state.web3 && state.web3.init.status,\n    isInitialized: state.web3 && state.web3.init.isInitialized,\n    networkId: state.web3 && state.web3.network.id && state.web3.network.id,\n    accounts: state.web3 && state.web3.accounts.items && state.web3.accounts.items,\n    address: state.web3 && state.web3.accounts.items && state.web3.accounts.items[0]\n  }));\n};\n\nexport const useRelevantState = () => {\n  const { selectors, tokenAddress, initialized } = useContract();\n  return useSelector(state => {\n    return initialized\n      ? {\n          userNonce: selectUserNonce(selectors, state, tokenAddress),\n          userBalance: selectUserBalance(selectors, state, tokenAddress),\n          RelevantToken: state.RelevantToken,\n          getState: (method, ...args) =>\n            selectors.methods[method]\n              ? formatSelection(\n                  selectors.methods[method]({ at: tokenAddress })(state, ...args)\n                )\n              : {},\n          eventCache: event => selectors.events[event]\n        }\n      : { getState: () => ({}) };\n  });\n};\n","import React, { useReducer, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { getTokenReserves } from '@uniswap/sdk';\nimport { abbreviateNumber } from 'utils/numbers';\n\nif (process.env.WEB !== 'true') {\n  require('../../publicenv');\n}\n\nconst { TOKEN_ADDRESS, DISABLE_PRICE } = process.env;\nconst UPDATE_INTERVAL = 1 * 60 * 1000;\n\nexport const PriceContext = React.createContext(0);\n\nexport function exchangeLink() {\n  return `https://uniswap.exchange/swap?theme=dark&outputCurrency=${TOKEN_ADDRESS}`;\n}\n\nexport function tokenEnabled() {\n  return !!TOKEN_ADDRESS;\n}\n\nexport function usePrice(amount, type) {\n  const { price } = useContext(PriceContext);\n  if (!price) return '';\n  if (type === 'number') return abbreviateNumber(price * amount);\n  return ` ($${abbreviateNumber(price * amount, 2)})`;\n}\n\nPriceProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default function PriceProvider({ children }) {\n  const [state, dispatch] = useReducer(priceReducer, {\n    loading: false,\n    error: false,\n    data: null,\n    refresh: 0\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_PRICE_INIT' });\n      if (!TOKEN_ADDRESS || DISABLE_PRICE) return;\n      try {\n        const tokenPrice = await getTokenReserves(TOKEN_ADDRESS);\n        const res = await fetch('https://api.infura.io/v1/ticker/ethusd');\n        const ethPrice = await res.json();\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_PRICE_SUCCESS',\n            payload: { ...tokenPrice, ethPrice: ethPrice.bid }\n          });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_PRICE_ERROR', payload: err });\n        }\n      }\n    };\n    fetchData();\n\n    setTimeout(() => {\n      dispatch({ type: 'REFRESH_PRICE' });\n    }, UPDATE_INTERVAL);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [state.refresh]);\n\n  const price = computePrice(state.data);\n  const priceString = `($${abbreviateNumber(price, 2)})`;\n\n  return (\n    <PriceContext.Provider value={{ price, priceString }}>\n      {children}\n    </PriceContext.Provider>\n  );\n}\n\nconst priceReducer = (state, action) => {\n  switch (action.type) {\n    case 'REFRESH_PRICE':\n      return {\n        ...state,\n        refresh: state.refresh + 1\n      };\n    case 'FETCH_PRICE_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case 'FETCH_PRICE_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload\n      };\n    case 'FETCH_PRICE_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      throw new Error();\n  }\n};\n\nfunction computePrice(data) {\n  if (!data) return null;\n  const { ethReserve, tokenReserve, ethPrice } = data;\n  if (!ethReserve || !tokenReserve) return null;\n  const priceInEth = ethReserve.amount.div(tokenReserve.amount);\n  const usdPrice = priceInEth.times(ethPrice);\n  return parseFloat(usdPrice.toString());\n}\n","import { generateSalt, formatBalanceRead } from 'utils/eth';\nimport { getProvider } from 'utils/web3.provider';\nimport { alert, api } from 'utils';\nimport { updateAuthUser } from 'modules/auth/auth.actions';\nimport { addEarning } from 'modules/wallet/earnings.actions';\n\nconst Alert = alert.Alert();\n\nexport function cashOutCall(customAmount = 0, sendCashoutAction) {\n  return async dispatch => {\n    try {\n      const { user, earning } = await dispatch(\n        api.request({\n          method: 'POST',\n          endpoint: 'user',\n          path: '/cashOut',\n          body: JSON.stringify({ customAmount })\n        })\n      );\n      dispatch(updateAuthUser(user));\n      earning && dispatch(addEarning(earning));\n      const { amount: amnt, sig } = user.cashOut;\n      const tx = sendCashoutAction(amnt, sig);\n      Alert.alert(`Claiming ${parseFloat(formatBalanceRead(amnt))} tokens 😄`, 'success');\n      return tx;\n    } catch (err) {\n      console.log(err); // eslint-disable-line\n      return Alert.alert(err.message, 'error');\n    }\n  };\n}\n\nexport function connectAddress(account) {\n  return async dispatch => {\n    try {\n      const salt = generateSalt();\n      const msgParams = [\n        {\n          type: 'string',\n          name: 'Message',\n          value: 'Connect Ethereum address to the Relevant account ' + salt\n        }\n      ];\n      const web3 = getProvider();\n      await web3.currentProvider.sendAsync(\n        {\n          method: 'eth_signTypedData',\n          params: [msgParams, account],\n          from: account\n        },\n        (err, msg) => {\n          if (err || msg.error) {\n            const error = err || msg.error;\n            Alert.alert(error, 'error');\n            return;\n          }\n          dispatch(addEthAddress(msgParams, msg.result, account));\n        }\n      );\n    } catch (err) {\n      Alert.alert('Failed signing message: ' + err.messate, 'error');\n    }\n  };\n}\n\nexport function addEthAddress(msg, sig, acc) {\n  return async dispatch => {\n    try {\n      const result = await dispatch(\n        api.request({\n          method: 'PUT',\n          endpoint: 'user',\n          path: '/ethAddress',\n          body: JSON.stringify({ msg, sig, acc })\n        })\n      );\n      dispatch(updateAuthUser(result));\n      return true;\n    } catch (err) {\n      Alert.alert(err.message, 'error');\n      return false;\n    }\n  };\n}\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { truncateAddress } from 'utils/eth';\nimport { getNetworkName } from 'utils/web3.provider';\nimport { useWeb3State } from 'modules/contract/contract.selectors';\nimport { BodyText, View, Divider } from 'modules/styled/uni';\n\nCashoutFooter.propTypes = {\n  customButton: PropTypes.node\n};\n\nexport function CashoutFooter({ customButton }) {\n  const web3 = useWeb3State();\n  const rightEl = customButton || (\n    <BodyText>Connected to Ethereum {getNetworkName(web3.networkId)}</BodyText>\n  );\n\n  const account = web3.accounts && web3.accounts[0];\n  const leftEl = account ? <BodyText>{truncateAddress(account)}</BodyText> : <BodyText />;\n  return (\n    <Fragment>\n      <Divider mt={4} mb={4} />\n      <View fdirection=\"row\" justify=\"space-between\">\n        <View>{leftEl}</View>\n        <View>{rightEl}</View>\n      </View>\n    </Fragment>\n  );\n}\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { View, BodyText, Title } from 'modules/styled/uni';\nimport Web3Warning from 'modules/wallet/web/web3Warning/web3Warning.component';\nimport { useWeb3, useMetamask, useBalance } from 'modules/contract/contract.hooks';\nimport { useCurrentWarning } from 'modules/wallet/web/web3Warning/web3Warning.hooks';\nimport { connectAddress } from 'modules/wallet/wallet.actions';\nimport { hideModal } from 'modules/navigation/navigation.actions'; // eslint-disable-line\nimport { usePrice } from 'modules/wallet/price.context';\nimport { CashoutFooter } from './cashoutFooter';\n\nAddEthAddress.propTypes = {\n  close: PropTypes.func\n};\n\nexport default function AddEthAddress({ close }) {\n  const [accounts, , networkId] = useWeb3();\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.auth.user);\n\n  const canClaim = user.balance - (user.airdropTokens || 0);\n  const account = accounts && accounts[0];\n\n  useMetamask();\n\n  const warning = useCurrentWarning({\n    accounts,\n    user,\n    networkId,\n    canClaim\n  });\n\n  const title = warning\n    ? 'Connect Your Ethereum Wallet'\n    : 'Ethereum Address is Connected';\n\n  return (\n    <View>\n      <Title>{title}</Title>\n      {warning ? (\n        <Web3Warning\n          connectAddress={() => dispatch(connectAddress(account))}\n          warning={warning}\n        />\n      ) : (\n        <Connected close={close} account={account} />\n      )}\n    </View>\n  );\n}\n\nConnected.propTypes = {\n  account: PropTypes.string\n};\n\nfunction Connected({ account }) {\n  const balance = useBalance();\n  const usdAmount = usePrice(balance, 'number');\n\n  return (\n    <Fragment>\n      <BodyText mt={4}>Connected account: {account}</BodyText>\n      <BodyText mt={2}>\n        Balance in Ethereum wallet: {balance} REL (${usdAmount})\n      </BodyText>\n      <CashoutFooter />\n    </Fragment>\n  );\n}\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, BodyText, Title, View } from 'modules/styled/uni';\nimport { useMetamask } from 'modules/contract/contract.hooks';\nimport { CashoutFooter } from 'modules/wallet/web/cashoutFooter';\n\nconst DEFAULT_BG = 'rgba(0, 0, 0, 0.05)';\nconst DEFAULT_BORDER_C = '#000000';\n\nWeb3Warning.propTypes = {\n  connectAddress: PropTypes.func,\n  warning: PropTypes.oneOfType([PropTypes.object, PropTypes.func])\n};\n\nexport default function Web3Warning({ connectAddress, warning }) {\n  const { bg = DEFAULT_BG, bc = DEFAULT_BORDER_C } = warning;\n  const metamask = useMetamask();\n  if (!warning) return null;\n\n  const onClickCreator = () => {\n    switch (warning.buttonAction) {\n      case 'connectMetamask':\n        return () => metamask.enable();\n      case 'getMetamask':\n        return () => window.open('https://metamask.io/', '_blank');\n      case 'connectAddress':\n        return () => connectAddress();\n      default:\n        return null;\n    }\n  };\n  const onClick = onClickCreator();\n\n  const customButton = onClick && (\n    <Button disabled={warning.disabled} mr={'auto'} onClick={onClick}>\n      {warning.buttonText}\n    </Button>\n  );\n\n  return (\n    <Fragment>\n      <View mt={2} p={2} id={warning.id} bg={bg} border bc={bc}>\n        <Title>{warning.title}</Title>\n        <BodyText mt={1}>{warning.message}</BodyText>\n      </View>\n      <CashoutFooter customButton={customButton} />\n    </Fragment>\n  );\n}\n","import React from 'react';\nimport { CASHOUT_LIMIT } from '@r3l/common';\nimport { Text } from 'modules/styled/uni';\nimport ULink from 'modules/navigation/ULink.component';\nimport { truncateAddress } from 'utils/eth';\nimport { colors } from 'styles';\n\nexport const metamask = {\n  id: 1,\n  title: 'No Ethereum wallet found',\n  message: (\n    <Text inline={1}>\n      You will need to install an Ethereum wallet, like{' '}\n      <ULink to=\"https://metamask.io/\" external target=\"_blank\">\n        Metamask\n      </ULink>{' '}\n      in order to claim your coins.{'\\n\\n'}*Note: you will also need to purchace a small\n      amount of Ethereum in order to pay for the transaction.\n    </Text>\n  ),\n  bc: colors.error,\n  bg: colors.errorA,\n  buttonText: 'Get Metamask',\n  buttonAction: 'getMetamask'\n};\n\nexport const connection = {\n  id: 2,\n  title: 'Connect Relevant to Metamask',\n  message:\n    \"We'll need to connect your Metamask account before you can transfer coins. Connecting your Metamask to Relevant is not a transaction and totally free.\",\n  buttonText: 'Connect Account',\n  buttonAction: 'connectAddress',\n  bc: colors.warning,\n  bg: colors.warningA\n};\n\nexport const network = {\n  id: 3,\n  title: 'Use Metamask to switch Ethereum networks',\n  message: 'Please connect to Ethereum Mainnet.',\n  buttonText: 'Switch Networks',\n  disabled: true,\n  bc: colors.error,\n  bg: colors.errorA\n};\n\nexport const account = (ethAddress = '0x..') => ({\n  id: 4,\n  title: `Account mismatch (wanted: ${truncateAddress(ethAddress)})`,\n  message: `Your connected wallet address is different from the address linked to your Relevant account. Please select account ${truncateAddress(\n    ethAddress\n  )} in Metamask. Alternately you can connect a new account address to Relevant.`,\n  buttonText: 'Connect Current Account to Relevant',\n  buttonAction: 'connectAddress',\n  bc: colors.warning,\n  bg: colors.warningA\n});\n\nexport const balance = {\n  id: 5,\n  title: 'Your balance is too low',\n  message: `Your current balance is too low, you need to earn more than ${CASHOUT_LIMIT} coins in order to be able to cash out.`,\n  disabled: true,\n  bc: colors.warning,\n  bg: colors.warningA\n};\n\nexport const connectMetamask = {\n  id: 1,\n  title: 'Log into Metamask and Connect it to Relevant',\n  message: 'Make sure you are logged into Metamask and have connected it to Relevant',\n  bc: colors.warning,\n  bg: colors.warningA,\n  buttonText: 'Connect Metamask',\n  buttonAction: 'connectMetamask'\n};\n","import { useState, useEffect } from 'react';\nimport { useMetamask } from 'modules/contract/contract.hooks';\n// import { CASHOUT_LIMIT } from '@r3l/common';\nimport * as warnings from './web3Warning.constants';\nimport {\n  hasAccount,\n  hasAccountConnected,\n  hasCorrectAccount,\n  hasCorrectNetwork\n} from './web3Warning.selectors';\n\nexport const useCurrentWarning = ({\n  accounts,\n  user,\n  networkId,\n  // unclaimedSig,\n  canClaim\n}) => {\n  const [warning, setWarning] = useState();\n  const metamask = useMetamask();\n\n  useEffect(() => {\n    const updateWarnings = () => {\n      // if (canClaim < CASHOUT_LIMIT && !unclaimedSig) return warnings.balance;\n      if (!metamask) return warnings.metamask;\n      if (metamask && !hasAccount(accounts)) return warnings.connectMetamask;\n      if (!hasCorrectNetwork(networkId)) return warnings.network;\n      if (!hasAccountConnected(user)) return warnings.connection;\n      if (!hasCorrectAccount(user, accounts)) return warnings.account(user.ethAddress[0]);\n\n      return null;\n    };\n    setWarning(updateWarnings());\n  }, [accounts, user.ethAddress, networkId, user, canClaim, metamask]);\n  return warning;\n};\n","import { NETWORK_NUMBER } from 'core/config';\n\nexport const hasAccount = accounts => accounts && accounts[0];\n\nexport const hasAccountConnected = user => user.ethAddress && user.ethAddress[0];\n\nexport const hasCorrectNetwork = networkId => networkId && networkId === NETWORK_NUMBER;\n\nexport const hasCorrectAccount = (user, accounts) =>\n  user.ethAddress[0].toLowerCase() === accounts[0].toLowerCase();\n\nexport const hasWarning = (stack, _id) => stack.find(({ id }) => id === _id);\n","import crypto from 'crypto';\n\nexport async function signMessage(provider, address) {\n  const signer = provider.getSigner();\n\n  const now = new Date();\n  const exp = Math.floor(now.setMinutes(now.getMinutes() + 5) / 1000);\n  const msg = {\n    address,\n    exp\n  };\n  const signature = await signer.signMessage(JSON.stringify(msg));\n  return { msg, signature };\n}\n\nexport function truncateAddress(address) {\n  if (!address) return null;\n  return address.slice(0, 6) + '...' + address.slice(address.length - 4, address.length);\n}\n\nexport function parseBN(value) {\n  return value && value.get ? getBN(value) : value;\n}\n\nexport function getBN(value) {\n  const hex = value.get('_hex');\n  if (hex === '0x00') {\n    return 0;\n  }\n  return formatBN(hex, 18);\n}\n\nexport function formatBN(hex, decimals = 18) {\n  const numString = Number(hex).toString();\n  // console.log('numString', numString);\n  if (numString[numString.length - 3] === '+') {\n    const trailingZeroes = getTrailingZeros(numString, decimals);\n    const result = Number(withoutZeros(numString) + trailingZeroes);\n\n    return Number.parseFloat(result).toFixed(0);\n  }\n  if (numString.length > 18) {\n    return Number(numString.slice(0, -18));\n  }\n  if (numString.length === 18) {\n    return Number(`0.${numString}`);\n  }\n  return Number(numString);\n}\n\nexport function generateSalt() {\n  return crypto.randomBytes(16).toString('hex');\n}\n\nexport function formatBalanceRead(balString) {\n  return `${balString.slice(0, -18)}.${balString.slice(-18)}`;\n}\n\nexport function formatBalanceWrite(balString, decimals = 18) {\n  return (balString * 10 ** decimals).toString();\n}\n\nexport function appendZeroes(numString, amount) {\n  return `${numString}${'0'.repeat(amount)}`;\n}\n\nexport function removeDecimal(balString) {\n  return balString.split('.').join('');\n}\n\nexport function withoutZeros(numString) {\n  return numString.slice(0, -2).toString();\n}\n\nexport function getTrailingZeros(numString, decimals) {\n  return Number(Number(numString.slice(-2)) - decimals).toString();\n}\n","import Web3 from 'web3';\nimport { INFURA_PROTOCOL, INFURA_NETWORK, INFURA_API_KEY } from 'core/config';\n\nlet web3;\nlet rpcUrl;\nlet metamask;\n\nconst defaultOptions = { rpcUrl: getRpcUrl(), metamask: null };\n\nexport function getNetworkName(id) {\n  switch (parseInt(id, 10)) {\n    case 1:\n      return 'Mainnet';\n    case 4:\n      return 'Rinkeby';\n    case 3:\n      return 'Ropsten';\n    case 5:\n      return 'Goerli';\n    case 42:\n      return 'Kovan';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function getMetamask() {\n  return metamask || initMetamask();\n}\n\nexport function getProvider(options = defaultOptions) {\n  return options.metamask || options.rpcUrl !== defaultOptions.rpcUrl\n    ? initProvider(options)\n    : web3 || initProvider();\n}\n\nexport function initMetamask() {\n  metamask = typeof window !== 'undefined' && window.ethereum ? window.ethereum : null;\n  return metamask;\n}\n\nexport function initProvider(options = defaultOptions) {\n  const provider = createProvider(options);\n  web3 = new Web3(provider);\n  return web3;\n}\n\nexport function getRpcUrl() {\n  return rpcUrl || buildRpcUrl();\n}\n\nexport function createProvider(options = defaultOptions) {\n  if (options.metamask) return options.metamask;\n  return options.rpcUrl.slice(0, 2) === 'ws'\n    ? new Web3.providers.WebsocketProvider(options.rpcUrl)\n    : new Web3.providers.HttpProvider(options.rpcUrl);\n}\n\nexport function buildRpcUrl(\n  protocol = INFURA_PROTOCOL,\n  network = INFURA_NETWORK,\n  apiKey = INFURA_API_KEY\n) {\n  rpcUrl = `${protocol}s://${network}.infura.io/${\n    protocol === 'ws' ? 'ws/' : ''\n  }v3/${apiKey}`;\n  return rpcUrl;\n}\n"],"sourceRoot":""}