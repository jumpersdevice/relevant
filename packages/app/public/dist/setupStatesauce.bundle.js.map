{"version":3,"sources":["webpack:///./src/core/config.js","webpack:///./src/modules/contract/setupStatesauce.js","webpack:///./src/utils/web3.provider.js"],"names":["INFURA_PROTOCOL","process","INFURA_NETWORK","INFURA_API_KEY","NETWORK_NUMBER","web3Sagas","all","Object","values","sagas","map","saga","fork","web3Reducers","combineReducers","reducers","accounts","blocks","init","network","context","web3","getProvider","rpcUrl","getRpcUrl","metamask","getMetamask","tokenAddress","get","RelevantToken","instance","Statesauce","contractName","abi","at","web3Instance","contract","types","actions","reducer","selectors","defaultOptions","getNetworkName","id","parseInt","window","ethereum","options","initProvider","provider","createProvider","Web3","protocol","apiKey","buildRpcUrl","slice","providers","WebsocketProvider","HttpProvider"],"mappings":"uh9hBAAeA,EAAoBC,KACpBC,EAAmBD,UACnBE,EAAmBF,mCACnBG,EAAmBH,K,4hDCMjBI,GAAV,SAAUA,IAAV,iEACL,OADK,SACCC,cAAI,IAAIC,OAAOC,OAAOC,SAAOC,KAAI,SAAAC,GAAI,OAAIC,eAAKD,QAD/C,uCAIA,IAAME,EAAeC,0B,iWAAgB,CAAD,GAAMC,aAElCC,EAA6CD,WAA7CC,SAAUC,EAAmCF,WAAnCE,OAAQC,EAA2BH,WAA3BG,KAAMC,EAAqBJ,WAArBI,QAASC,EAAYL,WAAZK,QAE1CC,EAAOC,YAAY,CACvBC,OAAQC,cACRC,SAAUC,gBAGCC,EAAeC,IAAIC,EAAD,mBAA4BzB,IAA5B,aAElB0B,EAAW,IAAIC,IAAWF,EAAcG,aAAcH,EAAcI,IAAK,CACpFC,GAAIP,EACJQ,aAAcd,IAGDe,EAAuDN,EAAvDM,SAAUC,EAA6CP,EAA7CO,MAAOC,EAAsCR,EAAtCQ,QAASC,EAA6BT,EAA7BS,QAASC,EAAoBV,EAApBU,UAAW7B,EAASmB,EAATnB,M,4DC7B7D,4IAGIU,EACAE,EACAE,EALJ,qFAOMgB,EAAiB,CAAElB,OAAQC,IAAaC,SAAU,MAEjD,SAASiB,EAAeC,GAC7B,OAAQC,SAASD,EAAI,KACnB,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,SACT,KAAK,GACH,MAAO,QACT,QACE,MAAO,WAIN,SAASjB,IACd,OAAOD,IAUPA,EAA6B,oBAAXoB,QAA0BA,OAAOC,SAAWD,OAAOC,SAAW,MAP3E,SAASxB,IAAsC,IAA1ByB,EAA0B,uDAAhBN,EACpC,OAAOM,EAAQtB,UAAYsB,EAAQxB,SAAWkB,EAAelB,OACzDyB,EAAaD,GACb1B,GAAQ2B,IAQP,SAASA,IAAuC,IAA1BD,EAA0B,uDAAhBN,EAC/BQ,EAAWC,EAAeH,GAEhC,OADA1B,EAAO,IAAI8B,IAAKF,GAIX,SAASzB,IACd,OAAOD,GAUF,WAIL,IAHA6B,EAGA,uDAHWpD,IACXmB,EAEA,uDAFUjB,IACVmD,EACA,uDADSlD,IAKT,OAHAoB,EAAS,GAAH,OAAM6B,EAAN,eAAqBjC,EAArB,sBACS,OAAbiC,EAAoB,MAAQ,GADxB,cAEAC,GAjBWC,GAGZ,SAASJ,IAAyC,IAA1BH,EAA0B,uDAAhBN,EACvC,OAAIM,EAAQtB,SAAiBsB,EAAQtB,SACC,OAA/BsB,EAAQxB,OAAOgC,MAAM,EAAG,GAC3B,IAAIJ,IAAKK,UAAUC,kBAAkBV,EAAQxB,QAC7C,IAAI4B,IAAKK,UAAUE,aAAaX,EAAQxB,U","file":"setupStatesauce.bundle.js","sourcesContent":["export const { INFURA_PROTOCOL } = process.env;\nexport const { INFURA_NETWORK } = process.env;\nexport const { INFURA_API_KEY } = process.env;\nexport const { NETWORK_NUMBER } = process.env;\n","import Statesauce from 'redux-saga-web3-eth-contract';\nimport { getProvider, getRpcUrl, getMetamask } from 'utils/web3.provider';\nimport get from 'lodash/get';\nimport { combineReducers } from 'redux';\nimport { reducers, sagas } from 'redux-saga-web3';\nimport { all, fork } from 'redux-saga/effects';\nimport RelevantToken from 'app/contracts/RelevantToken';\nimport { NETWORK_NUMBER } from 'app/core/config';\n\nexport function* web3Sagas() {\n  yield all([...Object.values(sagas).map(saga => fork(saga))]);\n}\n\nexport const web3Reducers = combineReducers({ ...reducers });\n\nexport const { accounts, blocks, init, network, context } = reducers;\n\nconst web3 = getProvider({\n  rpcUrl: getRpcUrl(),\n  metamask: getMetamask()\n});\n\nexport const tokenAddress = get(RelevantToken, `networks.${NETWORK_NUMBER}.address`);\n\nexport const instance = new Statesauce(RelevantToken.contractName, RelevantToken.abi, {\n  at: tokenAddress,\n  web3Instance: web3\n});\n\nexport const { contract, types, actions, reducer, selectors, saga } = instance;\n","import Web3 from 'web3';\nimport { INFURA_PROTOCOL, INFURA_NETWORK, INFURA_API_KEY } from 'core/config';\n\nlet web3;\nlet rpcUrl;\nlet metamask;\n\nconst defaultOptions = { rpcUrl: getRpcUrl(), metamask: null };\n\nexport function getNetworkName(id) {\n  switch (parseInt(id, 10)) {\n    case 1:\n      return 'Mainnet';\n    case 4:\n      return 'Rinkeby';\n    case 3:\n      return 'Ropsten';\n    case 5:\n      return 'Goerli';\n    case 42:\n      return 'Kovan';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function getMetamask() {\n  return metamask || initMetamask();\n}\n\nexport function getProvider(options = defaultOptions) {\n  return options.metamask || options.rpcUrl !== defaultOptions.rpcUrl\n    ? initProvider(options)\n    : web3 || initProvider();\n}\n\nexport function initMetamask() {\n  metamask = typeof window !== 'undefined' && window.ethereum ? window.ethereum : null;\n  return metamask;\n}\n\nexport function initProvider(options = defaultOptions) {\n  const provider = createProvider(options);\n  web3 = new Web3(provider);\n  return web3;\n}\n\nexport function getRpcUrl() {\n  return rpcUrl || buildRpcUrl();\n}\n\nexport function createProvider(options = defaultOptions) {\n  if (options.metamask) return options.metamask;\n  return options.rpcUrl.slice(0, 2) === 'ws'\n    ? new Web3.providers.WebsocketProvider(options.rpcUrl)\n    : new Web3.providers.HttpProvider(options.rpcUrl);\n}\n\nexport function buildRpcUrl(\n  protocol = INFURA_PROTOCOL,\n  network = INFURA_NETWORK,\n  apiKey = INFURA_API_KEY\n) {\n  rpcUrl = `${protocol}s://${network}.infura.io/${\n    protocol === 'ws' ? 'ws/' : ''\n  }v3/${apiKey}`;\n  return rpcUrl;\n}\n"],"sourceRoot":""}