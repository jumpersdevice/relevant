{"version":3,"sources":["webpack:///./src/modules/wallet/price.context.js"],"names":["process","TOKEN_ADDRESS","DISABLE_PRICE","PriceContext","React","createContext","exchangeLink","tokenEnabled","usePrice","amount","type","price","useContext","abbreviateNumber","PriceProvider","children","useReducer","priceReducer","loading","error","data","refresh","state","dispatch","useEffect","didCancel","a","getTokenReserves","tokenPrice","fetch","res","json","ethPrice","payload","bid","fetchData","setTimeout","ethReserve","tokenReserve","usdPrice","div","times","parseFloat","toString","computePrice","priceString","Provider","value","propTypes","PropTypes","node","action","Error"],"mappings":"65CASyCA,uZAAjCC,E,EAAAA,cAAeC,E,EAAAA,cAGVC,EAAeC,IAAMC,cAAc,GAEzC,SAASC,IACd,wEAAkEL,GAG7D,SAASM,IACd,QAASN,EAGJ,SAASO,EAASC,EAAQC,GAAM,IAC7BC,EAAUC,qBAAWT,GAArBQ,MACR,OAAKA,EACQ,WAATD,EAA0BG,2BAAiBF,EAAQF,GACvD,aAAaI,2BAAiBF,EAAQF,EAAQ,GAA9C,KAFmB,GASN,SAASK,EAAT,GAAqC,IAAZC,EAAY,EAAZA,SAAY,EACxBC,qBAAWC,EAAc,CACjDC,SAAS,EACTC,OAAO,EACPC,KAAM,KACNC,QAAS,IALuC,WAC3CC,EAD2C,KACpCC,EADoC,KAQlDC,qBAAU,WACR,IAAIC,GAAY,EA2BhB,OA1Be,+BAAG,gCAAAC,EAAA,yDAChBH,EAAS,CAAEb,KAAM,qBACZT,IAAiBC,EAFN,0EAIWyB,2BAAiB1B,GAJ5B,cAIR2B,EAJQ,gBAKIC,MAAM,0CALV,cAKRC,EALQ,iBAMSA,EAAIC,OANb,QAMRC,EANQ,OAQTP,GACHF,EAAS,CACPb,KAAM,sBACNuB,QAAS,EAAF,KAAOL,GAAP,IAAmBI,SAAUA,EAASE,QAXnC,kDAeTT,GACHF,EAAS,CAAEb,KAAM,oBAAqBuB,QAAS,EAAF,KAhBjC,0DAAH,oDAoBfE,GAEAC,YAAW,WACTb,EAAS,CAAEb,KAAM,oBAxDC,KA2Db,WACLe,GAAY,KAEb,CAACH,EAAMD,UAEV,IAAMV,EAyCR,SAAsBS,GACpB,IAAKA,EAAM,OAAO,KADQ,IAElBiB,EAAuCjB,EAAvCiB,WAAYC,EAA2BlB,EAA3BkB,aAAcN,EAAaZ,EAAbY,SAClC,IAAKK,IAAeC,EAAc,OAAO,KACzC,IACMC,EADaF,EAAW5B,OAAO+B,IAAIF,EAAa7B,QAC1BgC,MAAMT,GAClC,OAAOU,WAAWH,EAASI,YA/CbC,CAAatB,EAAMF,MAC3ByB,EAAc,KAAH,OAAQhC,2BAAiBF,EAAO,GAAhC,KAEjB,OACE,kBAACR,EAAa2C,SAAd,CAAuBC,MAAO,CAAEpC,QAAOkC,gBACpC9B,GAlDPD,EAAckC,UAAY,CACxBjC,SAAUkC,IAAUC,MAsDtB,IAAMjC,EAAe,SAACK,EAAO6B,GAC3B,OAAQA,EAAOzC,MACb,IAAK,gBACH,cACKY,GADL,IAEED,QAASC,EAAMD,QAAU,IAE7B,IAAK,mBACH,cACKC,GADL,IAEEJ,SAAS,EACTC,OAAO,IAEX,IAAK,sBACH,cACKG,GADL,IAEEJ,SAAS,EACTC,OAAO,EACPC,KAAM+B,EAAOlB,UAEjB,IAAK,oBACH,cACKX,GADL,IAEEJ,SAAS,EACTC,MAAOgC,EAAOlB,UAElB,QACE,MAAM,IAAImB","file":"wallet-price-context.bundle.js","sourcesContent":["import React, { useReducer, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { getTokenReserves } from '@uniswap/sdk';\nimport { abbreviateNumber } from 'utils/numbers';\n\nif (process.env.WEB !== 'true') {\n  require('../../../publicenv');\n}\n\nconst { TOKEN_ADDRESS, DISABLE_PRICE } = process.env;\nconst UPDATE_INTERVAL = 1 * 60 * 1000;\n\nexport const PriceContext = React.createContext(0);\n\nexport function exchangeLink() {\n  return `https://uniswap.exchange/swap?theme=dark&outputCurrency=${TOKEN_ADDRESS}`;\n}\n\nexport function tokenEnabled() {\n  return !!TOKEN_ADDRESS;\n}\n\nexport function usePrice(amount, type) {\n  const { price } = useContext(PriceContext);\n  if (!price) return '';\n  if (type === 'number') return abbreviateNumber(price * amount);\n  return ` ($${abbreviateNumber(price * amount, 2)})`;\n}\n\nPriceProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default function PriceProvider({ children }) {\n  const [state, dispatch] = useReducer(priceReducer, {\n    loading: false,\n    error: false,\n    data: null,\n    refresh: 0\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_PRICE_INIT' });\n      if (!TOKEN_ADDRESS || DISABLE_PRICE) return;\n      try {\n        const tokenPrice = await getTokenReserves(TOKEN_ADDRESS);\n        const res = await fetch('https://api.infura.io/v1/ticker/ethusd');\n        const ethPrice = await res.json();\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_PRICE_SUCCESS',\n            payload: { ...tokenPrice, ethPrice: ethPrice.bid }\n          });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_PRICE_ERROR', payload: err });\n        }\n      }\n    };\n    fetchData();\n\n    setTimeout(() => {\n      dispatch({ type: 'REFRESH_PRICE' });\n    }, UPDATE_INTERVAL);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [state.refresh]);\n\n  const price = computePrice(state.data);\n  const priceString = `($${abbreviateNumber(price, 2)})`;\n\n  return (\n    <PriceContext.Provider value={{ price, priceString }}>\n      {children}\n    </PriceContext.Provider>\n  );\n}\n\nconst priceReducer = (state, action) => {\n  switch (action.type) {\n    case 'REFRESH_PRICE':\n      return {\n        ...state,\n        refresh: state.refresh + 1\n      };\n    case 'FETCH_PRICE_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case 'FETCH_PRICE_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload\n      };\n    case 'FETCH_PRICE_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      throw new Error();\n  }\n};\n\nfunction computePrice(data) {\n  if (!data) return null;\n  const { ethReserve, tokenReserve, ethPrice } = data;\n  if (!ethReserve || !tokenReserve) return null;\n  const priceInEth = ethReserve.amount.div(tokenReserve.amount);\n  const usdPrice = priceInEth.times(ethPrice);\n  return parseFloat(usdPrice.toString());\n}\n"],"sourceRoot":""}