{"version":3,"sources":["webpack:///./public/img/info.png","webpack:///./src/utils/notifications.js","webpack:///./src/modules/activity/activity.actions.js","webpack:///./src/modules/activity/notificationTimes.js","webpack:///./src/modules/community/community.selectors.js","webpack:///./src/modules/stats/piechart.js","webpack:////Users/slavab/local/relevant/node_modules/react-native-web-svg/index.es.js","webpack:///./src/modules/post/bet/smallcoinstat.js","webpack:///./src/modules/post/bet/betstats.js","webpack:///./src/modules/post/bet/circlebutton.js","webpack:///./src/modules/post/bet/bet.js","webpack:///./src/modules/post/invest.actions.js","webpack:///./src/modules/web_ethTools/eth.context.js","webpack:///./src/modules/stats/coinStat.component.js","webpack:///./src/modules/tooltip/mobile/setupTooltips.js","webpack:///./src/modules/tooltip/tooltip.component.js","webpack:///./src/modules/wallet/price.context.js","webpack:///./src/utils/propValidation.js","webpack:///./src/utils/rewards.js"],"names":["registration","navigator","serviceWorker","ready","subscription","pushManager","getSubscription","convertedVapidKey","urlBase64ToUint8Array","process","subscribe","userVisibleOnly","applicationServerKey","err","console","log","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","register","registerServiceWorker","apiServer","reqOptions","tk","credentials","headers","Accept","Authorization","setActivity","data","type","index","types","payload","resetActivity","clearCount","setCount","getActivity","skip","dispatch","res","api","request","method","endpoint","path","auth","query","errorActions","message","markRead","storage","getToken","then","fetch","catch","createNotification","obj","body","JSON","stringify","getNotificationCount","unread","showBannerPrompt","promptType","promptProps","hideBannerPrompt","notification","enableDesktopNotifications","initPushNotifications","updateNotificationSettings","desktop","all","toJSON","showBetPrompt","isDismissed","showPushNotificationPrompt","handleDesktopPrompt","Notification","permission","useCommunity","useSelector","state","community","communities","active","PieChart","percent","color","text","strokeWidth","w","h","r","d","height","width","viewBox","cx","cy","fill","stroke","colors","lightBorder","strokeDasharray","strokeDashoffset","fontSize","x","y","black","textAnchor","fontFamily","propTypes","PropTypes","number","string","SmallCoinStat","amount","rest","size","fs","secondary","c","inline","BetStats","post","earning","maxBet","investments","posts","_id","map","filter","inv","stakedTokens","investor","user","useDispatch","useEffect","getPostInvestments","existingShares","shares","existingStake","bets","users","invText","toFixed","totalShares","computeShares","postRewards","computePostPayout","shareOfRewards","shareOfRewardsPercent","potentialRewards","shareEl","style","top","mb","blue","mt","fdirection","CircleButton","children","onPress","border","minwidth","bradius","bg","white","lh","BetContainer","props","navigation","modalData","postId","Bet","close","earnings","pending","e","entities","find","ee","processingBet","setProcessingBet","useState","title","totalBalance","balance","tokenBalance","lockedTokens","defaultAmount","Math","max","VOTE_COST_RATIO","setAmount","time","setTimer","timeLeftTick","payoutTime","id","setInterval","clearInterval","placeBet","bet","exchageUrl","exchangeLink","power","mr","name","info","align","justify","a","largeStep","smallStep","pr","spaceBetween","min","tokenEnabled","to","external","target","goToUrl","disabled","object","node","func","Alert","alert","linkSchema","schema","Entity","idAttribute","postSchema","metaPost","userSchema","investmentSchema","updatePostVote","voteObj","UPDATE_POST_INVESTMENTS","undoPostVote","UNDO_POST_INVESTMENT","setInvestments","userId","SET_INVESTMENTS","loadingInvestments","LOADING_INVESTMENTS","setPostInvestments","SET_POST_INVESTMENTS","setUsers","SET_USERS","vote","undo","displayBetPrompt","undoInvest","investment","isComment","parentPost","error","getInvestments","limit","normalize","setPostsSimple","loadingPostInvestments","LOADING_POST_INVESTMENTS","React","createContext","wallet","coinImage","require","CoinStat","tokens","isOwner","noNumber","showPrice","usdValue","usePrice","ethAddress","connectedBalance","iconSize","NumberStyle","SecondaryText","NumericalValue","imageMargin","sizing","Wrapper","Text","ImageWrapper","spacer","source","bottom","resizeMode","ml","abbreviateNumber","oneOfType","bool","userProps","lineheight","memo","Consumer","defaultData","vertical","horizontal","horizontalOffset","verticalOffset","InfoImage","AbsoluteWrapper","styled","TooltipContainer","ReactTooltip","rebuild","shouldRegister","initTooltip","el","useRef","toggleTooltip","tooltips","forEach","tooltip","desktopOnly","current","measureInWindow","parent","Dimensions","get","setTooltipData","showTooltip","initTooltips","toggle","setupMobileTooltips","View","ref","data-event-off","data-place","position","data-for","data-tip","onLongPress","TOKEN_ADDRESS","DISABLE_PRICE","PriceContext","price","useContext","PriceProvider","useReducer","priceReducer","loading","refresh","didCancel","tokenPrice","getTokenReserves","ethPrice","json","bid","fetchData","setTimeout","ethReserve","tokenReserve","usdPrice","div","times","parseFloat","toString","computePrice","priceString","Provider","value","action","Error","shape","handle","image","authProps","isRequired","embeddedUser","tags","array","postDate","instanceOf","Date","link","isAuthenticated","elementTypePropTypeChecker","propName","componentName","isValidElementType","postData","pagerank","currentShares","postCount","payoutShare","topPostShares","payout","rewardFund","TOKEN_DECIMALS","computeUserPayout","status","totalPostShares","estimatedPayout","estimatedPostPayout","earned"],"mappings":"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","file":"28.bundle.js","sourcesContent":["export default __webpack_public_path__ + \"public/img/info.png\";","if (process.env.BROWSER === true) {\n  registerServiceWorker();\n}\n\nfunction registerServiceWorker() {\n  try {\n    navigator.serviceWorker.register('/service-worker.js');\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n  }\n}\n\nexport async function initPushNotifications() {\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    const subscription = await registration.pushManager.getSubscription();\n    if (subscription) return subscription;\n\n    const vapidPublicKey = process.env.VAPID_PUBLIC_KEY;\n    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n    return registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: convertedVapidKey\n    });\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n    return null;\n  }\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","import * as types from 'core/actionTypes';\nimport * as errorActions from 'modules/ui/error.actions';\nimport { api, storage } from 'app/utils';\nimport { initPushNotifications } from 'app/utils/notifications';\nimport { updateNotificationSettings } from 'modules/auth/auth.actions';\nimport {\n  SHOW_DESKTOP_PROMPT_AFTER_DAYS,\n  SHOW_MOBILE_PROMPT_AFTER_DAYS,\n  SHOW_BET_PROMPT_AFTER_DAYS\n} from './notificationTimes';\n\nlet PushNotification;\nif (process.env.WEB !== 'true') {\n  PushNotification = require('react-native-push-notification');\n}\n\nconst apiServer = `${process.env.API_SERVER}/api/notification`;\n\nconst reqOptions = tk => ({\n  credentials: 'include',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${tk}`\n  }\n});\n\nexport function setActivity(data, type, index) {\n  return {\n    type: types.SET_ACTIVITY,\n    payload: {\n      data,\n      type,\n      index\n    }\n  };\n}\n\nexport function resetActivity(data) {\n  return {\n    type: 'RESET_ACTIVITY',\n    payload: data\n  };\n}\n\nexport function clearCount() {\n  return {\n    type: 'CLEAR_COUNT'\n  };\n}\n\nexport function setCount(data) {\n  return {\n    type: types.SET_COUNT,\n    payload: data\n  };\n}\n\nexport function getActivity(skip) {\n  return async dispatch => {\n    try {\n      const type = 'personal';\n      const res = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'notification',\n          path: '/',\n          auth: true,\n          query: { skip }\n        })\n      );\n      dispatch(setActivity(res, type, skip));\n      dispatch(errorActions.setError('activity', false));\n    } catch (err) {\n      errorActions.setError('activity', true, err.message);\n    }\n  };\n}\n\nexport function markRead() {\n  return dispatch =>\n    storage\n      .getToken()\n      .then(tk =>\n        fetch(`${apiServer}/markread`, {\n          ...reqOptions(tk),\n          method: 'PUT'\n        })\n      )\n      .then(() => {\n        dispatch(clearCount());\n      })\n      .catch(null);\n}\n\nexport function createNotification(obj) {\n  return () =>\n    storage\n      .getToken()\n      .then(tk =>\n        fetch(`${apiServer}`, {\n          ...reqOptions(tk),\n          method: 'POST',\n          body: JSON.stringify(obj)\n        })\n      )\n      .catch(null);\n}\n\nexport function getNotificationCount() {\n  return async dispatch => {\n    try {\n      const res = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'notification',\n          path: '/unread',\n          auth: true\n        })\n      );\n      dispatch(setCount(res.unread));\n    } catch (err) {} // eslint-disable-line\n  };\n}\n\nexport function showBannerPrompt(promptType, promptProps) {\n  return {\n    type: types.SHOW_BANNER_PROMPT,\n    payload: {\n      promptType,\n      promptProps\n    }\n  };\n}\n\nexport function hideBannerPrompt(notification) {\n  return {\n    type: types.HIDE_BANNER_PROMPT,\n    payload: notification\n  };\n}\n\nexport function enableDesktopNotifications() {\n  return async dispatch => {\n    try {\n      const subscription = await initPushNotifications();\n      dispatch(\n        updateNotificationSettings({ desktop: { all: true } }, subscription.toJSON())\n      );\n      dispatch(hideBannerPrompt());\n    } catch (err) {\n      console.log(err); // eslint-disable-line\n    }\n  };\n}\n\nexport const showBetPrompt = async dispatch => {\n  const isDismissed = await storage.isDismissed(\n    'betDismissed',\n    SHOW_BET_PROMPT_AFTER_DAYS\n  );\n  if (!isDismissed) return dispatch(showBannerPrompt('bet'));\n  return false;\n};\n\nexport const showPushNotificationPrompt = (promptProps = {}) => async dispatch => {\n  if (process.env.BROWSER === true) {\n    return handleDesktopPrompt({ dispatch, promptProps });\n  }\n  return handleMobilePrompt({ dispatch, promptProps });\n};\n\nasync function handleDesktopPrompt({ dispatch, promptProps }) {\n  if (\n    Notification &&\n    (Notification.permission === 'granted' || Notification.permission === 'denied')\n  ) {\n    return false;\n  }\n  const isDismissed = await storage.isDismissed(\n    'pushDismissed',\n    SHOW_DESKTOP_PROMPT_AFTER_DAYS\n  );\n  if (isDismissed) return false;\n\n  return dispatch(showBannerPrompt('push', promptProps));\n}\n\nasync function handleMobilePrompt({ dispatch, promptProps }) {\n  if (!PushNotification) return false;\n\n  const permissions = await new Promise((resolve, reject) => {\n    PushNotification.checkPermissions(resp => {\n      if (!resp) return reject();\n      return resolve(resp);\n    });\n  });\n\n  if (permissions.alert) return false;\n\n  const isDismissed = await storage.isDismissed(\n    'pushDismissed',\n    SHOW_MOBILE_PROMPT_AFTER_DAYS\n  );\n  if (isDismissed) return false;\n\n  return dispatch(showBannerPrompt('push', { ...promptProps, isMobile: true }));\n}\n","export const SHOW_BET_PROMPT_AFTER_DAYS = 14;\nexport const SHOW_DESKTOP_PROMPT_AFTER_DAYS = 30;\nexport const SHOW_MOBILE_PROMPT_AFTER_DAYS = 21;\n","import { useSelector } from 'react-redux';\n\nexport const useCommunity = () =>\n  useSelector(state => state.community.communities[state.community.active]);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { colors } from 'styles';\nimport Svg, { Circle, Text as SVGText } from 'react-native-svg';\n\nPieChart.propTypes = {\n  percent: PropTypes.number,\n  color: PropTypes.string,\n  text: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  w: PropTypes.string,\n  h: PropTypes.string\n};\n\nexport function PieChart({ percent, color, text, strokeWidth, w, h }) {\n  const r = 15.91549430918954;\n  const d = 2 * r + strokeWidth;\n  // const deg = 3.6 * percent;\n  return (\n    <Svg height={h || '100%'} width={w || '100%'} viewBox={`0 0 ${d} ${d}`}>\n      {/*      <Line\n        x1=\"50%\"\n        y1=\"50%\"\n        x2=\"50%\"\n        y2=\"0\"\n        style={{ transform: `rotate(${deg}deg)`, transformOrigin: '50% 50%' }}\n        stroke={colors.grey}\n      /> */}\n      <Circle\n        cx={'50%'}\n        cy={'50%'}\n        r={r}\n        fill=\"none\"\n        strokeWidth={strokeWidth}\n        stroke={colors.lightBorder}\n      />\n      <Circle\n        cx={'50%'}\n        cy={'50%'}\n        r={r}\n        fill=\"none\"\n        strokeWidth={strokeWidth}\n        stroke={color}\n        strokeDasharray={`${100 - percent}, ${percent}`}\n        strokeDashoffset={25 + 100 - percent}\n      />\n      {text && (\n        <SVGText\n          fontSize={'10px'}\n          x={'50%'}\n          y={'60%'}\n          fill={colors.black}\n          textAnchor=\"middle\"\n          fontFamily=\"HelveticaNeue-CondensedBold\"\n        >\n          {text}\n        </SVGText>\n      )}\n    </Svg>\n  );\n}\n","export const Circle = 'circle';\nexport const ClipPath = 'clipPath';\nexport const Defs = 'defs';\nexport const Ellipse = 'ellipse';\nexport const G = 'g';\nexport const Image = 'image';\nexport const Line = 'line';\nexport const LinearGradient = 'linearGradient';\nexport const Path = 'path';\nexport const Polygon = 'polygon';\nexport const Polyline = 'polyline';\nexport const RadialGradient = 'radialGradient';\nexport const Rect = 'rect';\nexport const Stop = 'stop';\nexport const Svg = 'svg';\nexport const Symbol = 'symbol';\nexport const Text = 'text';\nexport const TextPath = 'textPath';\nexport const TSpan = 'tspan';\nexport const Use = 'use';\n\nexport default Svg;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CoinStat from 'modules/stats/coinStat.component';\nimport { colors } from 'styles';\n\nSmallCoinStat.propTypes = {\n  amount: PropTypes.number\n};\n\nexport default function SmallCoinStat({ amount, ...rest }) {\n  return (\n    <CoinStat\n      size={1.5}\n      fs={1.5}\n      secondary\n      c={colors.black}\n      inline={1}\n      amount={amount}\n      {...rest}\n    />\n  );\n}\n","import React, { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { SmallText, Text, View } from 'modules/styled/uni';\nimport { computeShares } from 'app/utils/post';\nimport { computePostPayout } from 'app/utils/rewards';\nimport { useCommunity } from 'modules/community/community.selectors';\nimport { PieChart } from 'modules/stats/piechart';\nimport { getPostInvestments } from 'modules/post/invest.actions';\nimport { colors } from 'styles';\nimport { abbreviateNumber as toFixed } from 'utils/numbers';\nimport SmallCoinStat from './smallcoinstat';\n\nBetStats.propTypes = {\n  post: PropTypes.object,\n  earning: PropTypes.object,\n  amount: PropTypes.number,\n  maxBet: PropTypes.number\n};\n\nexport default function BetStats({ post, amount, earning, maxBet }) {\n  const community = useCommunity();\n\n  const investments = useSelector(state =>\n    (state.investments.posts[post._id] || [])\n      .map(_id => state.investments.investments[_id])\n      .filter(inv => inv.stakedTokens > 0 && inv.investor !== state.auth.user._id)\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPostInvestments(post._id));\n  }, [dispatch, post._id]);\n\n  const existingShares = earning ? earning.shares : 0;\n  const existingStake = earning ? earning.stakedTokens : 0;\n  const bets = investments.length;\n  const users = bets > 1 ? 'users' : 'user';\n  const invText = bets\n    ? `${bets} ${users} bet a total of ${toFixed(\n        post.data.totalShares - existingStake\n      )} coins on this post`\n    : '';\n  // : 'You are the first to bet on this post!';\n\n  const shares = computeShares({ post, stakedTokens: amount });\n  const postRewards = computePostPayout(post.data, community);\n  const shareOfRewards = !bets\n    ? (existingStake + amount) / (maxBet + existingStake)\n    : (shares + existingShares) / (post.data.shares + shares);\n\n  const shareOfRewardsPercent = shareOfRewards * 100;\n  const potentialRewards = postRewards * shareOfRewards;\n  // const showPie = shareOfRewards !== 1;\n\n  const shareEl = (\n    <SmallText inline={1}>\n      {'  '}\n      <Text style={{ top: 2 }} inline={1} mb={-0.5}>\n        <PieChart\n          w={'12px'}\n          h={'12px'}\n          percent={100 - shareOfRewardsPercent}\n          strokeWidth={30}\n          color={colors.blue}\n        />\n      </Text>{' '}\n      {toFixed(shareOfRewardsPercent)}%\n    </SmallText>\n  );\n\n  return (\n    <Fragment>\n      <SmallText>{invText}</SmallText>\n      {potentialRewards > 0 && (\n        <View mt={0.25} fdirection={'row'}>\n          <SmallText inline={1}>\n            Your estimated rewards: <SmallCoinStat amount={potentialRewards} />\n          </SmallText>\n          <SmallText inline={1}>{shareEl} of total</SmallText>\n        </View>\n      )}\n    </Fragment>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { colors } from 'styles';\nimport { LinkFont, HoverButton } from 'modules/styled/uni';\n\nCircleButton.propTypes = {\n  children: PropTypes.node,\n  onPress: PropTypes.func\n};\n\nexport default function CircleButton({ children, onPress }) {\n  return (\n    <HoverButton\n      border={1}\n      w={8}\n      h={8}\n      minwidth={'auto'}\n      bradius={4}\n      bg={colors.white}\n      onPress={onPress}\n    >\n      <LinkFont c={colors.blue} fs={2.5} lh={2.5}>\n        {children}\n      </LinkFont>\n    </HoverButton>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  View,\n  HoverButton,\n  SecondaryText,\n  SmallText,\n  Header\n  // Divider\n} from 'modules/styled/uni';\nimport { timeLeftTick, abbreviateNumber as toFixed } from 'utils/numbers';\nimport { colors } from 'styles';\nimport { VOTE_COST_RATIO } from '@r3l/common';\nimport CoinStat from 'modules/stats/coinStat.component';\nimport { bet } from 'modules/post/invest.actions';\nimport { goToUrl } from 'modules/navigation/navigation.actions';\nimport Tooltip from 'modules/tooltip/tooltip.component';\nimport { exchangeLink, tokenEnabled } from 'modules/wallet/price.context';\nimport ULink from 'modules/navigation/ULink.component';\n// import { NotificationToggle } from 'modules/profile/settings/settings.toggle';\nimport BetStats from './betstats';\nimport CircleButton from './circlebutton';\nimport SmallCoinStat from './smallcoinstat';\n\nexport function BetContainer({ ...props }) {\n  const user = useSelector(state => state.auth.user) || {};\n  const post = useSelector(state => state.posts.posts[state.navigation.modalData.postId]);\n  if (!user || !post) return null;\n  return <Bet user={user} post={post} {...props} />;\n}\n\nBet.propTypes = {\n  user: PropTypes.object,\n  post: PropTypes.object,\n  close: PropTypes.func\n};\n\nfunction Bet({ user, post, close }) {\n  const dispatch = useDispatch();\n  const earning = useSelector(state =>\n    state.earnings.pending\n      .map(e => state.earnings.entities[e])\n      .find(ee => ee.post === post._id)\n  );\n  const [processingBet, setProcessingBet] = useState(false);\n\n  const title = earning ? 'Increase Your Bet' : 'Bet on the Relevance of this Post';\n\n  const totalBalance = user.balance + user.tokenBalance;\n  const maxBet = totalBalance - user.lockedTokens;\n  const defaultAmount = Math.max(maxBet * VOTE_COST_RATIO, 0);\n  const [amount, setAmount] = useState(defaultAmount);\n\n  // const time = getTimestamp(post.data.payoutTime).toLowerCase();\n  const [time, setTimer] = useState(timeLeftTick(post.data.payoutTime));\n\n  useEffect(() => {\n    const id = setInterval(() => setTimer(timeLeftTick(post.data.payoutTime)), 1000);\n    return () => clearInterval(id);\n  }, [post.data.payoutTime, time]);\n\n  if (!user || !post) return null;\n\n  const plusAmount = () =>\n    setAmount(a => {\n      const largeStep = (maxBet - defaultAmount) / 5;\n      const smallStep = defaultAmount / 5;\n      const err = defaultAmount / 100;\n      return a + smallStep <= defaultAmount + err\n        ? a + smallStep\n        : Math.min(a + largeStep, maxBet);\n    });\n\n  const minusAmount = () =>\n    setAmount(a => {\n      const largeStep = (totalBalance - user.lockedTokens - defaultAmount) / 5;\n      const smallStep = defaultAmount / 5;\n      const err = defaultAmount / 100;\n      if (a - smallStep <= 0 + err) return a;\n      return a - largeStep >= defaultAmount - err\n        ? a - largeStep\n        : Math.max(0, a - smallStep);\n    });\n\n  const placeBet = async () => {\n    try {\n      setProcessingBet(true);\n      await dispatch(bet({ postId: post._id, stakedTokens: amount }));\n      setProcessingBet(false);\n      close();\n    } catch (err) {\n      setProcessingBet(false);\n      // console.log(err);\n    }\n  };\n\n  const exchageUrl = exchangeLink();\n\n  const power = (100 * amount) / maxBet;\n\n  const tooltipData = {\n    text:\n      'Posts that get upvoted by lots of users with high Reputation get payouts.\\n\\nBet more coins and bet early in order to win the biggest portion of the payout.'\n  };\n\n  // const renderNoCoin = () => (\n  //   <Overlay flex={1} align={'center'} justify={'center'} bc={'hsla(0,0%, 100%, .9)'}>\n  //     <BodyText>You don't have any Relevant Coins</BodyText>\n  //     <BodyText mt={2}>\n  //       You can get some{' '}\n  //       <ULink to={exchangeLink()} external target=\"_blank\">\n  //         here\n  //       </ULink>\n  //     </BodyText>\n  //   </Overlay>\n  // );\n\n  return (\n    <View>\n      <Header inline={1} mr={2}>\n        {title} <Tooltip inline={1} name={'betInfo'} data={tooltipData} info />\n      </Header>\n\n      <View fdirection={'row'} align={'baseline'}>\n        <SmallText mt={1} mr={1}>\n          Time until payout: {time}\n        </SmallText>\n      </View>\n\n      <View mt={4} fdirection=\"row\" justify=\"space-between\" align={'center'}>\n        <CircleButton onPress={minusAmount}>–</CircleButton>\n        <View pr={1}>\n          <CoinStat\n            align={'center'}\n            fs={4.5}\n            lh={4.5}\n            spaceBetween={1}\n            c={colors.black}\n            amount={amount}\n          />\n        </View>\n        <CircleButton onPress={plusAmount}>+</CircleButton>\n      </View>\n      <View mt={2}>\n        <View h={0.5} fdirection={'row'}>\n          <View w={`${power}%`} bg={colors.blue} />\n          <View w={`${100 - power}%`} bg={colors.lightBorder} />\n        </View>\n        <View fdirection=\"row\" justify=\"space-between\">\n          <SecondaryText mt={0.5}>\n            Available Coins: <SmallCoinStat amount={maxBet - amount} />\n          </SecondaryText>\n          {tokenEnabled() && (\n            <ULink inline={1} to={exchageUrl} external target=\"_blank\">\n              <SecondaryText\n                mt={0.5}\n                c={colors.blue}\n                onPress={() => {\n                  dispatch(goToUrl(exchageUrl));\n                }}\n              >\n                Get more coins\n              </SecondaryText>\n            </ULink>\n          )}\n        </View>\n      </View>\n\n      <View mt={3}>\n        <BetStats maxBet={maxBet} post={post} amount={amount} earning={earning} />\n      </View>\n\n      <HoverButton mt={3} onPress={placeBet} disabled={processingBet || !amount}>\n        Bet {toFixed(amount)} Coins\n      </HoverButton>\n\n      {/*      <Divider mt={2} />\n       */}\n\n      <SmallText mt={2}>\n        *You always get your coins back once the betting round ends.\n      </SmallText>\n\n      {/*      <NotificationToggle\n        notification={user.notificationSettings.bet.manual}\n        parent={'bet'}\n        label={'manual'}\n        togglePosition={'right'}\n        DescriptionComponent={SmallText}\n        text={{\n          description: \"Don't like betting? Disable manual bet mode.\"\n        }}\n      /> */}\n    </View>\n  );\n}\n\nexport default BetContainer;\n","import { normalize, schema } from 'normalizr';\nimport {\n  UPDATE_POST_INVESTMENTS,\n  UNDO_POST_INVESTMENT,\n  SET_POST_INVESTMENTS,\n  SET_INVESTMENTS,\n  LOADING_INVESTMENTS,\n  SET_USERS,\n  LOADING_POST_INVESTMENTS\n} from 'core/actionTypes';\nimport { api, alert } from 'app/utils';\nimport { setPostsSimple } from 'modules/post/post.actions';\nimport {\n  showPushNotificationPrompt,\n  showBetPrompt\n} from 'modules/activity/activity.actions';\n\nconst Alert = alert.Alert();\n\nconst linkSchema = new schema.Entity('links', {}, { idAttribute: '_id' });\n\nconst postSchema = new schema.Entity(\n  'posts',\n  { metaPost: linkSchema },\n  { idAttribute: '_id' }\n);\n\nconst userSchema = new schema.Entity('users', {}, { idAttribute: '_id' });\n\nconst investmentSchema = new schema.Entity(\n  'investments',\n  {\n    post: postSchema,\n    investor: userSchema\n  },\n  { idAttribute: '_id' }\n);\n\nexport function updatePostVote(voteObj) {\n  return {\n    type: UPDATE_POST_INVESTMENTS,\n    payload: voteObj\n  };\n}\n\nexport function undoPostVote(post) {\n  return {\n    type: UNDO_POST_INVESTMENT,\n    payload: post\n  };\n}\n\nexport function setInvestments(investments, userId, index) {\n  return {\n    type: SET_INVESTMENTS,\n    payload: {\n      investments,\n      userId,\n      index\n    }\n  };\n}\n\nexport function loadingInvestments() {\n  return {\n    type: LOADING_INVESTMENTS\n  };\n}\n\nexport function setPostInvestments(data, postId, skip) {\n  return {\n    type: SET_POST_INVESTMENTS,\n    payload: {\n      postId,\n      data,\n      index: skip || 0\n    }\n  };\n}\n\nexport function setUsers(users) {\n  return {\n    type: SET_USERS,\n    payload: users\n  };\n}\n\n// optimistic ui\nexport function vote({ amount, post, user, vote: undo, displayBetPrompt }) {\n  return async dispatch => {\n    try {\n      if (undo) dispatch(undoPostVote(post._id));\n      else dispatch(updatePostVote({ post: post._id, amount }));\n      const res = await dispatch(\n        api.request({\n          method: 'POST',\n          endpoint: 'invest',\n          path: '/',\n          body: JSON.stringify({\n            investor: user._id,\n            amount,\n            post\n          })\n        })\n      );\n      if (res.undoInvest) dispatch(undoPostVote(post._id));\n      else dispatch(updatePostVote(res.investment));\n      const isComment = !!post.parentPost;\n      if (amount > 0 && !undo) {\n        const showingPushBanner = await dispatch(\n          showPushNotificationPrompt({\n            type: isComment ? 'upvoteComment' : 'upvotePost'\n          })\n        );\n        if (!showingPushBanner && displayBetPrompt) dispatch(showBetPrompt);\n      }\n      return res;\n    } catch (error) {\n      if (undo) dispatch(updatePostVote({ post: post._id, amount }));\n      else dispatch(undoPostVote(post._id));\n      return Alert.alert(error.message);\n    }\n  };\n}\n\nexport function getInvestments(userId, skip, limit) {\n  return async dispatch => {\n    try {\n      dispatch(loadingInvestments());\n      const res = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'invest',\n          path: '/' + userId,\n          query: { skip, limit }\n        })\n      );\n      const data = normalize({ investments: res }, { investments: [investmentSchema] });\n      dispatch(setPostsSimple(data));\n      dispatch(setInvestments(data, userId, skip));\n    } catch (err) {\n      // console.log(err);\n    }\n  };\n}\n\nexport function loadingPostInvestments(postId) {\n  return {\n    type: LOADING_POST_INVESTMENTS,\n    payload: postId\n  };\n}\n\nexport function getPostInvestments(postId, limit, skip) {\n  return async dispatch => {\n    try {\n      dispatch(loadingPostInvestments(postId));\n      const res = await dispatch(\n        api.request({\n          method: 'GET',\n          endpoint: 'invest',\n          query: { skip, limit },\n          path: `/post/${postId}`\n        })\n      );\n      const data = normalize({ investments: res }, { investments: [investmentSchema] });\n      dispatch(setUsers(data.entities.users));\n      dispatch(setPostInvestments(data, postId, skip));\n    } catch (err) {\n      // console.warn(err);\n    }\n  };\n}\n\nexport function bet({ postId, stakedTokens }) {\n  return async dispatch => {\n    try {\n      const res = await dispatch(\n        api.request({\n          method: 'POST',\n          endpoint: 'invest',\n          path: '/bet',\n          body: JSON.stringify({\n            postId,\n            stakedTokens\n          })\n        })\n      );\n      return dispatch(updatePostVote(res));\n    } catch (err) {\n      Alert.alert(err.message);\n      throw err;\n    }\n  };\n}\n","import React from 'react';\n// Make sure the shape of the default value passed to\n// createContext matches the shape that the consumers expect!\nexport default React.createContext({\n  wallet: null\n  // toggleTheme: () => {},\n});\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Eth from 'modules/web_ethTools/eth.context';\nimport { abbreviateNumber } from 'app/utils/numbers';\nimport { userProps } from 'app/utils/propValidation';\nimport { sizing } from 'app/styles';\nimport {\n  Image,\n  ImageWrapper,\n  NumericalValue,\n  SecondaryText,\n  Text\n} from 'modules/styled/uni';\nimport { usePrice } from 'modules/wallet/price.context';\n\nconst coinImage = require('public/img/relevantcoin.png');\n\nfunction CoinStat(props) {\n  const {\n    user,\n    isOwner,\n    wallet,\n    size,\n    amount,\n    mr,\n    align,\n    noNumber,\n    secondary,\n    fs,\n    lh,\n    inline,\n    c,\n    spaceBetween,\n    showPrice,\n    ...rest\n  } = props;\n\n  let tokens;\n  if (typeof amount === 'number') tokens = amount;\n  else if (user) {\n    tokens = user.balance;\n    if (user.tokenBalance) tokens += user.tokenBalance;\n  }\n\n  const usdValue = usePrice(tokens);\n\n  if (isOwner && user.ethAddress && user.ethAddress[0] && wallet.connectedBalance) {\n    tokens = wallet.connectedBalance + user.balance;\n  }\n  const iconSize = typeof size === 'number' ? size : 3;\n  const NumberStyle = secondary ? SecondaryText : NumericalValue;\n  const imageMargin = align === 'center' ? 0 : sizing(-1, 'px');\n  const Wrapper = inline ? Text : ImageWrapper;\n\n  let spacer = 0;\n  if (!inline && iconSize) {\n    spacer = iconSize / 4;\n  }\n  if (!inline && spaceBetween) {\n    spacer = spaceBetween;\n  }\n\n  return (\n    <Wrapper\n      {...rest}\n      inline={inline ? 1 : 0}\n      mr={typeof mr === 'number' ? mr : inline ? 0 : 1.5}\n      align={align}\n    >\n      <Image\n        inline={inline ? 1 : 0}\n        source={coinImage}\n        h={iconSize * 1}\n        w={iconSize * 1.05}\n        style={{ bottom: imageMargin }}\n        resizeMode=\"contain\"\n      />\n\n      {noNumber ? null : (\n        <NumberStyle ml={spacer} fs={fs} lh={lh} inline={inline ? 1 : 0} c={c}>\n          {inline ? ' ' : ''}\n          {abbreviateNumber(tokens)}\n          {showPrice ? usdValue : ''}\n        </NumberStyle>\n      )}\n    </Wrapper>\n  );\n}\n\nCoinStat.propTypes = {\n  lh: PropTypes.number,\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  secondary: PropTypes.bool,\n  mr: PropTypes.number,\n  fs: PropTypes.number,\n  amount: PropTypes.number,\n  size: PropTypes.number,\n  user: userProps,\n  isOwner: PropTypes.bool,\n  wallet: PropTypes.object,\n  align: PropTypes.string,\n  lineheight: PropTypes.string,\n  c: PropTypes.string,\n  noNumber: PropTypes.bool,\n  spaceBetween: PropTypes.number,\n  showPrice: PropTypes.bool\n};\n\nexport default memo(props => (\n  <Eth.Consumer>{wallet => <CoinStat wallet={wallet} {...props} />}</Eth.Consumer>\n));\n","import { Dimensions } from 'react-native';\nimport { setTooltipData, showTooltip } from 'modules/tooltip/tooltip.actions';\n\nconst defaultData = {\n  vertical: 'top',\n  horizontal: 'right',\n  horizontalOffset: 0,\n  verticalOffset: 10\n};\n\nexport function setupMobileTooltips({ tooltips, dispatch }) {\n  // this is used to programatically trigger toolitps\n  // needs name refactor\n  const initTooltips = () => {\n    tooltips.forEach(tooltip => {\n      if (tooltip.data.desktopOnly) return null;\n      return dispatch(\n        setTooltipData({\n          name: tooltip.name,\n          toggle: () => toggleTooltip(tooltip.name)\n        })\n      );\n    });\n  };\n\n  const toggleTooltip = name => {\n    tooltips.forEach(tooltip => {\n      if (tooltip.data.desktopOnly) return;\n      if (!tooltip.el.current) return;\n      tooltip.el.current.measureInWindow((x, y, w, h) => {\n        const parent = { x, y, w, h };\n        if (x + y + w + h === 0) return;\n        const fullHeight = Dimensions.get('window').height;\n        if (y > fullHeight - 50) return;\n        dispatch(\n          setTooltipData({\n            name: tooltip.name,\n            parent,\n            ...defaultData,\n            data: tooltip.data\n          })\n        );\n        dispatch(showTooltip(name));\n      });\n    });\n  };\n\n  return { initTooltips, toggleTooltip };\n}\n","import React, { useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { View, Image, Text } from 'modules/styled/uni';\nimport styled from 'styled-components/primitives';\nimport { setupMobileTooltips } from 'modules/tooltip/mobile/setupTooltips';\nimport ReactTooltip from 'react-tooltip';\n\nconst InfoImage = require('public/img/info.png');\n\nconst isNative = process.env.WEB !== 'true';\n\nconst AbsoluteWrapper = styled.Text`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  overflow: hidden;\n  z-index: 1;\n`;\n\nTooltipContainer.propTypes = {\n  name: PropTypes.string,\n  data: PropTypes.object,\n  children: PropTypes.object,\n  info: PropTypes.bool,\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.number])\n};\n\nexport default function TooltipContainer({\n  children,\n  name,\n  data,\n  info,\n  inline,\n  ...rest\n}) {\n  useEffect(() => {\n    if (ReactTooltip.rebuild) ReactTooltip.rebuild();\n  }, [data, name, children]);\n\n  useEffect(() => data.shouldRegister && initTooltip(), [\n    data.shouldRegister,\n    initTooltip\n  ]);\n\n  const dispatch = useDispatch();\n  const el = useRef();\n  const { toggleTooltip, initTooltip } = setupMobileTooltips({\n    tooltips: [{ name, el, data }],\n    dispatch\n  });\n\n  const Wrapper = (children && View) || AbsoluteWrapper;\n\n  return info ? (\n    <Text\n      ref={el}\n      // onLongPress={() => toggleTooltip(name)}\n      onPress={data.desktopOnly || !isNative ? null : () => toggleTooltip(name)}\n      inline={inline}\n    >\n      <Image\n        data-event-off=\"click\"\n        data-place={data.position}\n        data-for=\"mainTooltip\"\n        data-tip={JSON.stringify({\n          type: 'TEXT',\n          props: data\n        })}\n        {...rest}\n        source={InfoImage}\n        resizeMode={'contain'}\n        h={1.7}\n        w={1.7}\n        inline={inline}\n        {...rest}\n      />\n    </Text>\n  ) : (\n    <Wrapper\n      ref={el}\n      data-event-off=\"click\"\n      data-place={data.position}\n      data-for=\"mainTooltip\"\n      data-tip={JSON.stringify({\n        type: 'TEXT',\n        props: data\n      })}\n      onLongPress={() => toggleTooltip(name)}\n      onPress={data.desktopOnly || !isNative ? null : () => toggleTooltip(name)}\n    >\n      {children}\n    </Wrapper>\n  );\n}\n","import React, { useReducer, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { getTokenReserves } from '@uniswap/sdk';\nimport { abbreviateNumber } from 'utils/numbers';\n\nif (process.env.WEB !== 'true') {\n  require('../../publicenv');\n}\n\nconst { TOKEN_ADDRESS, DISABLE_PRICE } = process.env;\nconst UPDATE_INTERVAL = 1 * 60 * 1000;\n\nexport const PriceContext = React.createContext(0);\n\nexport function exchangeLink() {\n  return `https://uniswap.exchange/swap?theme=dark&outputCurrency=${TOKEN_ADDRESS}`;\n}\n\nexport function tokenEnabled() {\n  return !!TOKEN_ADDRESS;\n}\n\nexport function usePrice(amount, type) {\n  const { price } = useContext(PriceContext);\n  if (!price) return '';\n  if (type === 'number') return abbreviateNumber(price * amount);\n  return ` ($${abbreviateNumber(price * amount, 2)})`;\n}\n\nPriceProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default function PriceProvider({ children }) {\n  const [state, dispatch] = useReducer(priceReducer, {\n    loading: false,\n    error: false,\n    data: null,\n    refresh: 0\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_PRICE_INIT' });\n      if (!TOKEN_ADDRESS || DISABLE_PRICE) return;\n      try {\n        const tokenPrice = await getTokenReserves(TOKEN_ADDRESS);\n        const res = await fetch('https://api.infura.io/v1/ticker/ethusd');\n        const ethPrice = await res.json();\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_PRICE_SUCCESS',\n            payload: { ...tokenPrice, ethPrice: ethPrice.bid }\n          });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_PRICE_ERROR', payload: err });\n        }\n      }\n    };\n    fetchData();\n\n    setTimeout(() => {\n      dispatch({ type: 'REFRESH_PRICE' });\n    }, UPDATE_INTERVAL);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [state.refresh]);\n\n  const price = computePrice(state.data);\n  const priceString = `($${abbreviateNumber(price, 2)})`;\n\n  return (\n    <PriceContext.Provider value={{ price, priceString }}>\n      {children}\n    </PriceContext.Provider>\n  );\n}\n\nconst priceReducer = (state, action) => {\n  switch (action.type) {\n    case 'REFRESH_PRICE':\n      return {\n        ...state,\n        refresh: state.refresh + 1\n      };\n    case 'FETCH_PRICE_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case 'FETCH_PRICE_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload\n      };\n    case 'FETCH_PRICE_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      throw new Error();\n  }\n};\n\nfunction computePrice(data) {\n  if (!data) return null;\n  const { ethReserve, tokenReserve, ethPrice } = data;\n  if (!ethReserve || !tokenReserve) return null;\n  const priceInEth = ethReserve.amount.div(tokenReserve.amount);\n  const usdPrice = priceInEth.times(ethPrice);\n  return parseFloat(usdPrice.toString());\n}\n","import PropTypes from 'prop-types';\nimport { isValidElementType } from 'react-is';\n\nexport const userProps = PropTypes.shape({\n  handle: PropTypes.string,\n  balance: PropTypes.number,\n  image: PropTypes.string,\n  name: PropTypes.string\n  // relevance: // TODO shape or null\n});\n\nexport const postProps = PropTypes.shape({\n  _id: PropTypes.string.isRequired, // TODO\n  user: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  embeddedUser: PropTypes.object, // userProp?\n  tags: PropTypes.array,\n  body: PropTypes.string,\n  postDate: PropTypes.instanceOf(Date),\n  data: PropTypes.object, // TODO shape or null\n  link: PropTypes.object, // TODO shape or null\n  parentPost: PropTypes.number,\n  type: PropTypes.string\n});\n\nexport const authProps = PropTypes.shape({\n  isAuthenticated: PropTypes.bool,\n  user: userProps,\n  community: PropTypes.string\n});\n\n// eslint-disable-next-line consistent-return\nexport function elementTypePropTypeChecker(props, propName, componentName) {\n  if (props[propName] && !isValidElementType(props[propName])) {\n    return new Error(\n      `Invalid prop '${propName}' supplied to '${componentName}': the prop is not a valid React component`\n    );\n  }\n}\n","import { TOKEN_DECIMALS } from '@r3l/common';\n\nexport function computePostPayout(postData, community) {\n  if (!community || !postData || postData.parentPost) return null;\n  if (postData.pagerank < community.currentShares / (community.postCount || 1)) {\n    return 0;\n  }\n  postData.payoutShare =\n    postData.pagerank / (community.topPostShares + postData.pagerank || 1);\n  postData.payout = community.rewardFund * postData.payoutShare;\n  return postData.payout / TOKEN_DECIMALS;\n}\n\nexport function computeUserPayout(earning) {\n  if (earning.status === 'pending') {\n    if (earning.totalPostShares === 0) return 0;\n    let estimatedPayout = earning.estimatedPostPayout;\n    if (estimatedPayout > 1e8) estimatedPayout /= TOKEN_DECIMALS;\n    const payout = (estimatedPayout * earning.shares) / earning.totalPostShares;\n    return payout;\n  }\n  if (earning.earned || earning.status === 'paidout') return earning.earned;\n  return 0;\n}\n"],"sourceRoot":""}