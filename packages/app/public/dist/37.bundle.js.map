{"version":3,"sources":["webpack:///./public/img/icons/reddit.png","webpack:///./public/img/icons/twitter_white.png","webpack:///./public/img/uniswap.png","webpack:///./src/modules/getTokens/getTokensModal.component.js","webpack:///./src/modules/getTokens/web/getTokensModal.container.js","webpack:///./src/modules/web_ethTools/eth.context.js","webpack:///./src/modules/stats/coinStat.component.js","webpack:///./src/modules/wallet/price.context.js","webpack:///./src/utils/propValidation.js"],"names":["GetTokensModal","auth","user","actions","sendConfirmation","showModal","push","mobile","twitterButton","tokenEnabled","UniswapButton","mt","confirmed","fdirection","justify","align","c","colors","secondaryText","inline","size","amount","EMAIL_REWARD","to","onClick","onPress","external","mr","fel","w","white","twitterId","TWITTER_REWARD","blue","dispatch","useDispatch","uniIcon","require","exchageUrl","exchangeLink","target","bg","uniswap","m","goToUrl","resizeMode","source","h","propTypes","PropTypes","object","bool","node","twitterIcon","redditIcon","TwitterButton","twitterBlue","RedditButton","redditColor","GetTokensModalContainer","Component","render","this","props","redditButton","close","func","connect","state","get","bindActionCreators","React","createContext","wallet","coinImage","CoinStat","tokens","isOwner","noNumber","secondary","fs","lh","spaceBetween","showPrice","rest","balance","tokenBalance","usdValue","usePrice","ethAddress","connectedBalance","iconSize","NumberStyle","SecondaryText","NumericalValue","imageMargin","sizing","Wrapper","Text","ImageWrapper","spacer","style","bottom","ml","abbreviateNumber","number","oneOfType","userProps","string","lineheight","memo","Consumer","TOKEN_ADDRESS","DISABLE_PRICE","process","PriceContext","type","price","useContext","PriceProvider","children","useReducer","priceReducer","loading","error","data","refresh","useEffect","didCancel","tokenPrice","getTokenReserves","res","fetch","ethPrice","json","payload","bid","err","fetchData","setTimeout","ethReserve","tokenReserve","usdPrice","div","times","parseFloat","toString","computePrice","priceString","Provider","value","action","Error","shape","handle","image","name","authProps","_id","isRequired","title","embeddedUser","tags","array","body","postDate","instanceOf","Date","link","parentPost","isAuthenticated","community","elementTypePropTypeChecker","propName","componentName","isValidElementType"],"mappings":"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","file":"37.bundle.js","sourcesContent":["export default __webpack_public_path__ + \"public/img/icons/reddit.png\";","export default __webpack_public_path__ + \"public/img/icons/twitter_white.png\";","export default __webpack_public_path__ + \"public/img/uniswap.png\";","import React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  Image,\n  HoverButton,\n  BodyText,\n  Divider,\n  LinkFont,\n  SecondaryText,\n  ViewButton,\n  Box\n} from 'modules/styled/uni';\nimport CoinStat from 'modules/stats/coinStat.component';\nimport {\n  TWITTER_REWARD,\n  EMAIL_REWARD\n  // REDDIT_REWARD\n} from '@r3l/common';\nimport ULink from 'modules/navigation/ULink.component';\nimport { colors } from 'app/styles';\nimport { exchangeLink, tokenEnabled } from 'modules/wallet/price.context';\nimport { goToUrl } from 'modules/navigation/navigation.actions';\n\nGetTokensModal.propTypes = {\n  actions: PropTypes.object,\n  auth: PropTypes.object,\n  mobile: PropTypes.bool,\n  twitterButton: PropTypes.node\n  // redditButton: PropTypes.node\n};\n\nfunction GetTokensModal({\n  auth: { user },\n  actions: { sendConfirmation, showModal, push },\n  mobile,\n  twitterButton\n  // redditButton\n}) {\n  return (\n    <Box>\n      {tokenEnabled() && (\n        <Fragment>\n          <UniswapButton />\n          <Divider mt={4} />\n        </Fragment>\n      )}\n      {!user.confirmed && (\n        <View fdirection=\"column\" justify={'space-between'}>\n          <View fdirection=\"row\" align=\"center\" mt={4}>\n            <BodyText c={colors.secondaryText} inline={1}>\n              Confirm your e-mail to earn{' '}\n              <CoinStat inline={1} size={2} amount={EMAIL_REWARD} />{' '}\n              {EMAIL_REWARD > 1 ? 'coins' : 'coin'}\n              <SecondaryText>\n                *if you don't see a confirmation email in your inbox, please check your\n                spam folder\n              </SecondaryText>\n            </BodyText>\n          </View>\n          <ULink\n            to=\"#\"\n            onClick={sendConfirmation}\n            onPress={sendConfirmation}\n            external\n            mr={['auto', 0]}\n            mobile={mobile}\n            fel\n          >\n            <ViewButton w={[22, 'auto']} mt={3} mobile={mobile}>\n              <LinkFont c={colors.white}>Confirm E-mail</LinkFont>\n            </ViewButton>\n          </ULink>\n          <Divider mt={4} />\n        </View>\n      )}\n\n      {!user.twitterId && (\n        <Box>\n          <View fdirection=\"row\" align=\"center\" mt={4}>\n            <BodyText c={colors.secondaryText} inline={1}>\n              Connect your Relevant account with your Twitter account to earn{' '}\n              <CoinStat\n                inline={1}\n                size={2}\n                amount={user.confirmed ? TWITTER_REWARD : TWITTER_REWARD + EMAIL_REWARD}\n              />{' '}\n              {TWITTER_REWARD > 1 ? 'coins' : 'coin'}\n            </BodyText>\n          </View>\n          {twitterButton}\n          <Divider mt={4} />\n        </Box>\n      )}\n      {/*\n      {!user.redditId && redditButton && (\n        <View>\n          <View mt={4} fdirection=\"row\" align=\"center\">\n            <BodyText c={colors.secondaryText} inline={1}>\n              Connect your Relevant account with your Reddit account to earn{' '}\n              <CoinStat inline={1} size={2} amount={REDDIT_REWARD} />{' '}\n              {REDDIT_REWARD > 1 ? 'coins' : 'coin'}\n            </BodyText>\n          </View>\n          {redditButton}\n          <Divider mt={4} />\n        </View>\n      )}\n      */}\n      <View mt={4}>\n        <ULink\n          to=\"#\"\n          onClick={() => showModal('invite')}\n          onPress={() => push('invites')}\n          external\n          mr=\"auto\"\n          mobile={mobile}\n        >\n          <LinkFont c={colors.blue}>Invite Friends</LinkFont>\n        </ULink>\n      </View>\n    </Box>\n  );\n}\n\nfunction UniswapButton() {\n  const dispatch = useDispatch();\n  const uniIcon = require('public/img/uniswap.png');\n  const exchageUrl = exchangeLink();\n\n  return (\n    <ULink inline={1} to={exchageUrl} external mr={['auto', 0]} mt={3} target=\"_blank\">\n      <HoverButton\n        w={[22, 'auto']}\n        bg={colors.uniswap}\n        m={0}\n        c={colors.white}\n        onPress={() => dispatch(goToUrl(exchageUrl))}\n      >\n        <View fdirection=\"row\" justify={'center'} align=\"center\">\n          <Image resizeMode=\"contain\" source={uniIcon} w={3} h={3} mr={1.5} />\n          <LinkFont c={colors.white}>Uniswap Exchange</LinkFont>\n        </View>\n      </HoverButton>\n    </ULink>\n  );\n}\n\nexport default GetTokensModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { sendConfirmation } from 'modules/auth/auth.actions';\nimport { showModal } from 'modules/navigation/navigation.actions';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport GetTokensModal from 'modules/getTokens/getTokensModal.component';\nimport { colors } from 'app/styles';\nimport { Image, HoverButton, LinkFont } from 'modules/styled/uni';\nimport ULink from 'modules/navigation/ULink.component';\n\nconst twitterIcon = require('public/img/icons/twitter_white.png');\nconst redditIcon = require('public/img/icons/reddit.png');\n\nconst TwitterButton = () => (\n  <ULink to=\"/auth/twitter\" external mr={['auto', 0]} mt={3}>\n    <HoverButton\n      w={[22, 'auto']}\n      bg={colors.twitterBlue}\n      m={0}\n      c={colors.white}\n      fdirection=\"row\"\n    >\n      <Image resizeMode=\"contain\" source={twitterIcon} w={3} h={3} mr={1.5} />\n      <LinkFont c={colors.white}>Connect Twitter</LinkFont>\n    </HoverButton>\n  </ULink>\n);\n\nconst RedditButton = () => (\n  <ULink to=\"/auth/reddit\" external mr={['auto', 0]} mt={3}>\n    <HoverButton\n      w={[22, 'auto']}\n      bg={colors.redditColor}\n      m={0}\n      c={colors.white}\n      fdirection=\"row\"\n    >\n      <Image resizeMode=\"contain\" source={redditIcon} w={3} h={3} mr={1.5} />\n      <LinkFont c={colors.white}>Connect Reddit</LinkFont>\n    </HoverButton>\n  </ULink>\n);\n\nclass GetTokensModalContainer extends Component {\n  render() {\n    return (\n      <GetTokensModal\n        {...this.props}\n        twitterButton={<TwitterButton />}\n        redditButton={<RedditButton />}\n      />\n    );\n  }\n}\n\nGetTokensModalContainer.propTypes = {\n  actions: PropTypes.object,\n  close: PropTypes.func,\n  auth: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  auth: get(state, 'auth', {}) || {}\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(\n    {\n      // createInvite,\n      // getInviteCount\n      sendConfirmation,\n      showModal\n    },\n    dispatch\n  )\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GetTokensModalContainer);\n","import React from 'react';\n// Make sure the shape of the default value passed to\n// createContext matches the shape that the consumers expect!\nexport default React.createContext({\n  wallet: null\n  // toggleTheme: () => {},\n});\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Eth from 'modules/web_ethTools/eth.context';\nimport { abbreviateNumber } from 'app/utils/numbers';\nimport { userProps } from 'app/utils/propValidation';\nimport { sizing } from 'app/styles';\nimport {\n  Image,\n  ImageWrapper,\n  NumericalValue,\n  SecondaryText,\n  Text\n} from 'modules/styled/uni';\nimport { usePrice } from 'modules/wallet/price.context';\n\nconst coinImage = require('public/img/relevantcoin.png');\n\nfunction CoinStat(props) {\n  const {\n    user,\n    isOwner,\n    wallet,\n    size,\n    amount,\n    mr,\n    align,\n    noNumber,\n    secondary,\n    fs,\n    lh,\n    inline,\n    c,\n    spaceBetween,\n    showPrice,\n    ...rest\n  } = props;\n\n  let tokens;\n  if (typeof amount === 'number') tokens = amount;\n  else if (user) {\n    tokens = user.balance;\n    if (user.tokenBalance) tokens += user.tokenBalance;\n  }\n\n  const usdValue = usePrice(tokens);\n\n  if (isOwner && user.ethAddress && user.ethAddress[0] && wallet.connectedBalance) {\n    tokens = wallet.connectedBalance + user.balance;\n  }\n  const iconSize = typeof size === 'number' ? size : 3;\n  const NumberStyle = secondary ? SecondaryText : NumericalValue;\n  const imageMargin = align === 'center' ? 0 : sizing(-1, 'px');\n  const Wrapper = inline ? Text : ImageWrapper;\n\n  let spacer = 0;\n  if (!inline && iconSize) {\n    spacer = iconSize / 4;\n  }\n  if (!inline && spaceBetween) {\n    spacer = spaceBetween;\n  }\n\n  return (\n    <Wrapper\n      {...rest}\n      inline={inline ? 1 : 0}\n      mr={typeof mr === 'number' ? mr : inline ? 0 : 1.5}\n      align={align}\n    >\n      <Image\n        inline={inline ? 1 : 0}\n        source={coinImage}\n        h={iconSize * 1}\n        w={iconSize * 1.05}\n        style={{ bottom: imageMargin }}\n        resizeMode=\"contain\"\n      />\n\n      {noNumber ? null : (\n        <NumberStyle ml={spacer} fs={fs} lh={lh} inline={inline ? 1 : 0} c={c}>\n          {inline ? ' ' : ''}\n          {abbreviateNumber(tokens)}\n          {showPrice ? usdValue : ''}\n        </NumberStyle>\n      )}\n    </Wrapper>\n  );\n}\n\nCoinStat.propTypes = {\n  lh: PropTypes.number,\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  secondary: PropTypes.bool,\n  mr: PropTypes.number,\n  fs: PropTypes.number,\n  amount: PropTypes.number,\n  size: PropTypes.number,\n  user: userProps,\n  isOwner: PropTypes.bool,\n  wallet: PropTypes.object,\n  align: PropTypes.string,\n  lineheight: PropTypes.string,\n  c: PropTypes.string,\n  noNumber: PropTypes.bool,\n  spaceBetween: PropTypes.number,\n  showPrice: PropTypes.bool\n};\n\nexport default memo(props => (\n  <Eth.Consumer>{wallet => <CoinStat wallet={wallet} {...props} />}</Eth.Consumer>\n));\n","import React, { useReducer, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { getTokenReserves } from '@uniswap/sdk';\nimport { abbreviateNumber } from 'utils/numbers';\n\nif (process.env.WEB !== 'true') {\n  require('../../publicenv');\n}\n\nconst { TOKEN_ADDRESS, DISABLE_PRICE } = process.env;\nconst UPDATE_INTERVAL = 1 * 60 * 1000;\n\nexport const PriceContext = React.createContext(0);\n\nexport function exchangeLink() {\n  return `https://uniswap.exchange/swap?theme=dark&outputCurrency=${TOKEN_ADDRESS}`;\n}\n\nexport function tokenEnabled() {\n  return !!TOKEN_ADDRESS;\n}\n\nexport function usePrice(amount, type) {\n  const { price } = useContext(PriceContext);\n  if (!price) return '';\n  if (type === 'number') return abbreviateNumber(price * amount);\n  return ` ($${abbreviateNumber(price * amount, 2)})`;\n}\n\nPriceProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default function PriceProvider({ children }) {\n  const [state, dispatch] = useReducer(priceReducer, {\n    loading: false,\n    error: false,\n    data: null,\n    refresh: 0\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_PRICE_INIT' });\n      if (!TOKEN_ADDRESS || DISABLE_PRICE) return;\n      try {\n        const tokenPrice = await getTokenReserves(TOKEN_ADDRESS);\n        const res = await fetch('https://api.infura.io/v1/ticker/ethusd');\n        const ethPrice = await res.json();\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_PRICE_SUCCESS',\n            payload: { ...tokenPrice, ethPrice: ethPrice.bid }\n          });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_PRICE_ERROR', payload: err });\n        }\n      }\n    };\n    fetchData();\n\n    setTimeout(() => {\n      dispatch({ type: 'REFRESH_PRICE' });\n    }, UPDATE_INTERVAL);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [state.refresh]);\n\n  const price = computePrice(state.data);\n  const priceString = `($${abbreviateNumber(price, 2)})`;\n\n  return (\n    <PriceContext.Provider value={{ price, priceString }}>\n      {children}\n    </PriceContext.Provider>\n  );\n}\n\nconst priceReducer = (state, action) => {\n  switch (action.type) {\n    case 'REFRESH_PRICE':\n      return {\n        ...state,\n        refresh: state.refresh + 1\n      };\n    case 'FETCH_PRICE_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case 'FETCH_PRICE_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload\n      };\n    case 'FETCH_PRICE_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      throw new Error();\n  }\n};\n\nfunction computePrice(data) {\n  if (!data) return null;\n  const { ethReserve, tokenReserve, ethPrice } = data;\n  if (!ethReserve || !tokenReserve) return null;\n  const priceInEth = ethReserve.amount.div(tokenReserve.amount);\n  const usdPrice = priceInEth.times(ethPrice);\n  return parseFloat(usdPrice.toString());\n}\n","import PropTypes from 'prop-types';\nimport { isValidElementType } from 'react-is';\n\nexport const userProps = PropTypes.shape({\n  handle: PropTypes.string,\n  balance: PropTypes.number,\n  image: PropTypes.string,\n  name: PropTypes.string\n  // relevance: // TODO shape or null\n});\n\nexport const postProps = PropTypes.shape({\n  _id: PropTypes.string.isRequired, // TODO\n  user: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  embeddedUser: PropTypes.object, // userProp?\n  tags: PropTypes.array,\n  body: PropTypes.string,\n  postDate: PropTypes.instanceOf(Date),\n  data: PropTypes.object, // TODO shape or null\n  link: PropTypes.object, // TODO shape or null\n  parentPost: PropTypes.number,\n  type: PropTypes.string\n});\n\nexport const authProps = PropTypes.shape({\n  isAuthenticated: PropTypes.bool,\n  user: userProps,\n  community: PropTypes.string\n});\n\n// eslint-disable-next-line consistent-return\nexport function elementTypePropTypeChecker(props, propName, componentName) {\n  if (props[propName] && !isValidElementType(props[propName])) {\n    return new Error(\n      `Invalid prop '${propName}' supplied to '${componentName}': the prop is not a valid React component`\n    );\n  }\n}\n"],"sourceRoot":""}