{"version":3,"sources":["webpack:///./src/modules/wallet/price.context.js"],"names":["TOKEN_ADDRESS","DISABLE_PRICE","process","PriceContext","React","createContext","exchangeLink","tokenEnabled","usePrice","amount","type","price","useContext","abbreviateNumber","PriceProvider","children","state","dispatch","useReducer","priceReducer","loading","error","data","refresh","useEffect","didCancel","tokenPrice","getTokenReserves","res","fetch","ethPrice","json","payload","bid","err","fetchData","setTimeout","ethReserve","tokenReserve","usdPrice","div","times","parseFloat","toString","computePrice","priceString","Provider","value","propTypes","PropTypes","node","action","Error"],"mappings":"qxCASA,IAAM,cAAEA,EAAF,cAAiBC,GAAkBC,8YAG5BC,EAAeC,IAAMC,cAAc,GAEzC,SAASC,IACd,wEAAkEN,GAG7D,SAASO,IACd,QAASP,EAGJ,SAASQ,EAASC,EAAQC,GAC/B,IAAM,MAAEC,GAAUC,qBAAWT,GAC7B,OAAKQ,EACQ,WAATD,EAA0BG,2BAAiBF,EAAQF,GACvD,aAAaI,2BAAiBF,EAAQF,EAAQ,GAA9C,KAFmB,GASN,SAASK,EAAT,GAAqC,IAAd,SAAEC,GAAY,GAC3CC,EAAOC,GAAYC,qBAAWC,EAAc,CACjDC,SAAS,EACTC,OAAO,EACPC,KAAM,KACNC,QAAS,IAGXC,oBAAU,KACR,IAAIC,GAAY,EA2BhB,OA1Be,sBAAG,YAEhB,GADAR,EAAS,CAAEP,KAAM,qBACZV,IAAiBC,EACtB,IACE,IAAMyB,QAAmBC,2BAAiB3B,GACpC4B,QAAYC,MAAM,0CAClBC,QAAiBF,EAAIG,OAEtBN,GACHR,EAAS,CACPP,KAAM,sBACNsB,QAAS,EAAF,KAAON,GAAP,IAAmBI,SAAUA,EAASG,QAGjD,MAAOC,GACFT,GACHR,EAAS,CAAEP,KAAM,oBAAqBsB,QAASE,QAhBtC,oDAoBfC,GAEAC,WAAW,KACTnB,EAAS,CAAEP,KAAM,mBAxDC,KA2Db,KACLe,GAAY,IAEb,CAACT,EAAMO,UAEV,IAAMZ,EAyCR,SAAsBW,GACpB,IAAKA,EAAM,OAAO,KAClB,IAAM,WAAEe,EAAF,aAAcC,EAAd,SAA4BR,GAAaR,EAC/C,IAAKe,IAAeC,EAAc,OAAO,KACzC,IACMC,EADaF,EAAW5B,OAAO+B,IAAIF,EAAa7B,QAC1BgC,MAAMX,GAClC,OAAOY,WAAWH,EAASI,YA/CbC,CAAa5B,EAAMM,MAC3BuB,EAAc,KAAH,OAAQhC,2BAAiBF,EAAO,GAAhC,KAEjB,OACE,kBAACR,EAAa2C,SAAd,CAAuBC,MAAO,CAAEpC,QAAOkC,gBACpC9B,GAlDPD,EAAckC,UAAY,CACxBjC,SAAUkC,IAAUC,MAsDtB,IAAM/B,EAAe,CAACH,EAAOmC,KAC3B,OAAQA,EAAOzC,MACb,IAAK,gBACH,cACKM,GADL,IAEEO,QAASP,EAAMO,QAAU,IAE7B,IAAK,mBACH,cACKP,GADL,IAEEI,SAAS,EACTC,OAAO,IAEX,IAAK,sBACH,cACKL,GADL,IAEEI,SAAS,EACTC,OAAO,EACPC,KAAM6B,EAAOnB,UAEjB,IAAK,oBACH,cACKhB,GADL,IAEEI,SAAS,EACTC,MAAO8B,EAAOnB,UAElB,QACE,MAAM,IAAIoB","file":"61.bundle.js","sourcesContent":["import React, { useReducer, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { getTokenReserves } from '@uniswap/sdk';\nimport { abbreviateNumber } from 'utils/numbers';\n\nif (process.env.WEB !== 'true') {\n  require('../../publicenv');\n}\n\nconst { TOKEN_ADDRESS, DISABLE_PRICE } = process.env;\nconst UPDATE_INTERVAL = 1 * 60 * 1000;\n\nexport const PriceContext = React.createContext(0);\n\nexport function exchangeLink() {\n  return `https://uniswap.exchange/swap?theme=dark&outputCurrency=${TOKEN_ADDRESS}`;\n}\n\nexport function tokenEnabled() {\n  return !!TOKEN_ADDRESS;\n}\n\nexport function usePrice(amount, type) {\n  const { price } = useContext(PriceContext);\n  if (!price) return '';\n  if (type === 'number') return abbreviateNumber(price * amount);\n  return ` ($${abbreviateNumber(price * amount, 2)})`;\n}\n\nPriceProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default function PriceProvider({ children }) {\n  const [state, dispatch] = useReducer(priceReducer, {\n    loading: false,\n    error: false,\n    data: null,\n    refresh: 0\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_PRICE_INIT' });\n      if (!TOKEN_ADDRESS || DISABLE_PRICE) return;\n      try {\n        const tokenPrice = await getTokenReserves(TOKEN_ADDRESS);\n        const res = await fetch('https://api.infura.io/v1/ticker/ethusd');\n        const ethPrice = await res.json();\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_PRICE_SUCCESS',\n            payload: { ...tokenPrice, ethPrice: ethPrice.bid }\n          });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_PRICE_ERROR', payload: err });\n        }\n      }\n    };\n    fetchData();\n\n    setTimeout(() => {\n      dispatch({ type: 'REFRESH_PRICE' });\n    }, UPDATE_INTERVAL);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [state.refresh]);\n\n  const price = computePrice(state.data);\n  const priceString = `($${abbreviateNumber(price, 2)})`;\n\n  return (\n    <PriceContext.Provider value={{ price, priceString }}>\n      {children}\n    </PriceContext.Provider>\n  );\n}\n\nconst priceReducer = (state, action) => {\n  switch (action.type) {\n    case 'REFRESH_PRICE':\n      return {\n        ...state,\n        refresh: state.refresh + 1\n      };\n    case 'FETCH_PRICE_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case 'FETCH_PRICE_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload\n      };\n    case 'FETCH_PRICE_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      throw new Error();\n  }\n};\n\nfunction computePrice(data) {\n  if (!data) return null;\n  const { ethReserve, tokenReserve, ethPrice } = data;\n  if (!ethReserve || !tokenReserve) return null;\n  const priceInEth = ethReserve.amount.div(tokenReserve.amount);\n  const usdPrice = priceInEth.times(ethPrice);\n  return parseFloat(usdPrice.toString());\n}\n"],"sourceRoot":""}