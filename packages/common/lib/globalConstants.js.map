{"version":3,"sources":["../src/globalConstants.js"],"names":["HOURS","DAYS","PAYOUT_FREQUENCY","PAYOUT_FREQUENCY_FRACTION","YEARLY_INFLATION","INTERVAL_INFLAITION","INIT_COIN","SHARE_DECAY","TWITTER_DECAY","PAYOUT_TIME","VOTE_COST_RATIO","SLOPE","EXPONENT","POWER_REGEN_INTERVAL","RELEVANCE_DECAY","RELEVANCE_DECAY_POSTS","REP_CUTOFF","REP_CUTOFF_POSTS","MINIMUM_RANK","PUBLIC_LINK_REWARD","REFERRAL_REWARD","TWITTER_REWARD","EMAIL_REWARD","CASHOUT_LIMIT","CASHOUT_MAX","REDDIT_REWARD","TOKEN_DECIMALS","totalAllowedInvites","pagerank","MAX_AIRDROP","getRewardForType","type","newUserCoins","user","reward","email","confirmed","twitterId","BANNED_COMMUNITY_SLUGS","BANNED_USER_HANDLES","userVotePower","Math","round","sqrt"],"mappings":"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","sourcesContent":["export const HOURS = 60 * 60 * 1000;\nexport const DAYS = HOURS * 24;\nexport const PAYOUT_FREQUENCY = 1 * HOURS; // how often we compute payouts\nexport const PAYOUT_FREQUENCY_FRACTION = 1 / (365 * 24); // fraction of year\nexport const YEARLY_INFLATION = 0.1; // 10%\nexport const INTERVAL_INFLAITION =\n  (1 + YEARLY_INFLATION) ** PAYOUT_FREQUENCY_FRACTION - 1;\nexport const INIT_COIN = 1000000;\nexport const SHARE_DECAY = 6 * DAYS; // time it takes to decay payout post shares\n\nexport const TWITTER_DECAY = 12 * HOURS; // time it takes to decay payout post shares\n\nexport const PAYOUT_TIME = 3 * DAYS; // time it takes for post to pay out\nexport const VOTE_COST_RATIO = 0.1; // votes cost 10% of user balance\n// export const NEW_USER_COINS = 20; // amount of coins new users get\n\nexport const SLOPE = 1 / 1; // slope of bonding curve for posts\nexport const EXPONENT = 1; // exponent for bonding curve price formula\nexport const POWER_REGEN_INTERVAL = 24 * 60 * 60 * 1000; // 1 day to fully regenerate vote power\n\nexport const RELEVANCE_DECAY = 90 * DAYS; // half life of relevance\nexport const RELEVANCE_DECAY_POSTS = 90 * DAYS; // half life of relevance\nexport const REP_CUTOFF = 2; // number of years before we ignore votes for users\nexport const REP_CUTOFF_POSTS = 90 * DAYS; // time before we ignore votes for posts\n\nexport const MINIMUM_RANK = 1; // minimum rank to be considered for rewards\n\nexport const PUBLIC_LINK_REWARD = 5; // amount of tokens you get for public referral\nexport const REFERRAL_REWARD = 20; // amount of tokens awarded both the referrer and referee\nexport const TWITTER_REWARD = 20; // amount of tokens awarded for connecting twitter\nexport const EMAIL_REWARD = 20; // amount of tokens awarded for connecting email\n\n// TODO: Deprecate CASHOUT_LIMIT\nexport const CASHOUT_LIMIT = 0; // amount of tokens one needs to earn to cash out\nexport const CASHOUT_MAX = 1000;\n\nexport const REDDIT_REWARD = 5;\nexport const TOKEN_DECIMALS = 1e18;\n\nexport const totalAllowedInvites = pagerank => {\n  if (pagerank < 1) return 0;\n  if (pagerank < 3) return 1;\n  if (pagerank < 5) return 2;\n  if (pagerank < 10) return 3;\n  if (pagerank < 20) return 8;\n  if (pagerank < 40) return 13;\n  if (pagerank < 60) return 23;\n  if (pagerank < 80) return 33;\n  return 100;\n};\n\nexport const MAX_AIRDROP = 300;\n\nexport const getRewardForType = type => {\n  switch (type) {\n    case 'reddit':\n      return REDDIT_REWARD;\n    case 'email':\n      return EMAIL_REWARD;\n    case 'twitter':\n      return TWITTER_REWARD;\n    case 'referral':\n      return REFERRAL_REWARD;\n    case 'referredBy':\n      return REFERRAL_REWARD;\n    case 'publicLink':\n    case 'publicInvite':\n      return PUBLIC_LINK_REWARD;\n    default:\n      return 0;\n  }\n};\n\nexport const newUserCoins = user => {\n  let reward = 0;\n  if (user.email && user.confirmed) reward = EMAIL_REWARD;\n  if (user.twitterId) reward = EMAIL_REWARD + TWITTER_REWARD;\n  return reward;\n};\n\nexport const BANNED_COMMUNITY_SLUGS = [\n  'admin',\n  'user',\n  'channel',\n  'home',\n  'auth',\n  'profile',\n  'communities',\n  'subscriptions',\n  'graphql'\n];\n\nexport const BANNED_USER_HANDLES = [\n  ...BANNED_COMMUNITY_SLUGS,\n  'everyone',\n  'group',\n  'all',\n  'invite'\n];\n\nexport const userVotePower = pagerank => Math.round(Math.sqrt(1 + pagerank * 4));\n"],"file":"globalConstants.js"}