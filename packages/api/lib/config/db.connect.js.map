{"version":3,"sources":["../../src/config/db.connect.js"],"names":["SEED_DB","process","env","NODE_ENV","mongoose","require","set","db","connection","config","socketTimeoutMS","keepAlive","reconnectTries","useNewUrlParser","useFindAndModify","useUnifiedTopology","connectWithRetry","connect","MONGO_URI","catch","err","console","log","error","setTimeout","on","disconnect","host","seedDb","once","Error","clear","Object","keys","collections","map","i","deleteMany","Promise","all","communities","Community","find","pagerank","forEach","c","communityId","_id","community","slug","module","exports"],"mappings":"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","sourcesContent":["import { setupTestData } from 'server/test/seedData';\nimport computePageRank from 'server/pagerank/pagerankCompute';\nimport Community from 'server/api/community/community.model';\n\nconst SEED_DB = process.env.SEED_DB === 'true' && process.env.NODE_ENV !== 'production';\n/* eslint no-console: 0 */\nconst mongoose = require('mongoose');\n\nmongoose.set('useCreateIndex', true);\n\nconst db = mongoose.connection;\n\nconst config = {\n  socketTimeoutMS: 30000,\n  keepAlive: 1,\n  reconnectTries: 30,\n  useNewUrlParser: true,\n  useFindAndModify: false,\n  useUnifiedTopology: true\n};\n\nfunction connectWithRetry() {\n  return mongoose.connect(process.env.MONGO_URI, config).catch(err => {\n    console.log('catch ', err);\n    console.error('Failed to connect to mongo on startup - retrying in 5 sec', err);\n    setTimeout(connectWithRetry, 5000);\n  });\n}\n\ndb.on('connecting', () => {\n  console.log('connecting to MongoDB...');\n});\n\ndb.on('error', error => {\n  console.error('Error in MongoDb connection: ' + error);\n  mongoose.disconnect();\n});\ndb.on('connected', () => {\n  console.log('MongoDB connected!', mongoose.connection.host);\n  if (SEED_DB && mongoose.connection.host === 'localhost') {\n    seedDb();\n  }\n});\ndb.once('open', () => {\n  console.log('MongoDB connection opened!');\n});\ndb.on('reconnected', () => {\n  console.log('MongoDB reconnected!');\n});\n\nasync function seedDb() {\n  if (!SEED_DB || mongoose.connection.host !== 'localhost') {\n    throw new Error('should not seed db');\n  }\n  console.log('SEEDING DB');\n  const clear = Object.keys(mongoose.connection.collections).map(async i => {\n    // await mongoose.connection.collections[i].dropIndexes();\n    return mongoose.connection.collections[i].deleteMany();\n  });\n  await Promise.all(clear);\n  await setupTestData();\n  const communities = await Community.find({});\n  const pagerank = communities.forEach(c =>\n    computePageRank({ communityId: c._id, community: c.slug })\n  );\n  await Promise.all(pagerank);\n}\n\nmodule.exports = {\n  db: connectWithRetry()\n};\n"],"file":"db.connect.js"}