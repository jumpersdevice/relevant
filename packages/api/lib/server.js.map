{"version":3,"sources":["../src/server.js"],"names":["bodyParser","require","mongoose","cookieParser","session","favicon","MongoStore","cookiesMiddleware","path","expressStaticGzip","app","Express","Promise","global","validateTokenLenient","verify","whitelist","corsOptions","origin","methods","preflightContinue","credentials","optionsSuccessStatus","allowedHeaders","use","limiter","windowMs","max","console","log","process","env","NODE_ENV","EventEmitter","prototype","_maxListeners","isDevelopment","relevantEnv","RELEVANT_ENV","urlencoded","extended","json","join","__dirname","db","secret","SESSION_SECRET","resave","saveUninitialized","cookie","maxAge","store","mongooseConnection","connection","autoRemove","autoRemoveInterval","touchAfter","clear_interval","passport","initialize","requireHTTPS","req","res","next","headers","redirect","get","url","NO_SSL","resolve","replace","index","port","PORT","WEB_CONCURRENCY","server","ApolloServer","schema","playground","context","user","applyMiddleware","cors","socketServer","default","listen","error","info","now","Date","time","getTime","pingTimeout","SubscriptionServer","create","onOperation","message","params","token","payload","err","execute","subscribe","keepAlive","init","exports"],"mappings":";;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAAvB;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMK,UAAU,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBG,OAAzB,CAAnB;;AACA,IAAMG,iBAAiB,GAAGN,OAAO,CAAC,0BAAD,CAAjC;;AACA,IAAMO,IAAI,GAAGP,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMQ,iBAAiB,GAAGR,OAAO,CAAC,qBAAD,CAAjC;;AAEA,IAAMS,GAAG,GAAG,IAAIC,gBAAJ,EAAZ;AACAT,QAAQ,CAACU,OAAT,GAAmBC,MAAM,CAACD,OAA1B;;AAEA,IAAM;AAAEE,EAAAA,oBAAF;AAAwBC,EAAAA;AAAxB,IAAmCd,OAAO,uBAAhD;;AAEA,IAAMe,SAAS,GAAG,CAAC,uBAAD,EAA0B,4BAA1B,CAAlB,C,CAA2E;;AAE3E,IAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAEF,SADU;AAElBG,EAAAA,OAAO,EAAE,gCAFS;AAGlBC,EAAAA,iBAAiB,EAAE,KAHD;AAIlBC,EAAAA,WAAW,EAAE,IAJK;AAKlBC,EAAAA,oBAAoB,EAAE,GALJ;AAMlBC,EAAAA,cAAc,EAAE,CACd,cADc,EAEd,eAFc,EAGd,kBAHc,EAId,uBAJc,EAKd,6BALc,EAMd,QANc,EAOd,QAPc;AANE,CAApB;AAiBAb,GAAG,CAACc,GAAJ,CAAQ,mBAAKP,WAAL,CAAR;AAEA,IAAMQ,OAAO,GAAG,+BAAU;AACxBC,EAAAA,QAAQ,EAAE,IAAI,EAAJ,GAAS,IADK;AACC;AACzBC,EAAAA,GAAG,EAAE,IAFmB,CAEb;;AAFa,CAAV,CAAhB;AAKAC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,OAAO,CAACC,GAAR,CAAYC,QAApC;AAEA/B,OAAO,CAAC,QAAD,CAAP,CAAkBgC,YAAlB,CAA+BC,SAA/B,CAAyCC,aAAzC,GAAyD,GAAzD,C,CAEA;;AACA,IAAMC,aAAa,GACjBN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACAF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MADzB,IAEAF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,QAH3B;AAKA,IAAMK,WAAW,GAAGP,OAAO,CAACC,GAAR,CAAYO,YAAhC;AAEA5B,GAAG,CAACc,GAAJ,CAAQC,OAAR;AACAf,GAAG,CAACc,GAAJ,CAAQxB,UAAU,CAACuC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACA9B,GAAG,CAACc,GAAJ,CAAQxB,UAAU,CAACyC,IAAX,EAAR;AACA/B,GAAG,CAACc,GAAJ,CAAQrB,YAAY,EAApB;AACAO,GAAG,CAACc,GAAJ,CAAQnB,OAAO,CAACG,IAAI,CAACkC,IAAL,CAAUC,SAAV,EAAqB,gBAArB,CAAD,CAAf,E,CAEA;;AACA,IAAM;AAAEC,EAAAA;AAAF,IAAS3C,OAAO,uBAAtB,C,CAEA;AACA;;;AACAS,GAAG,CAACc,GAAJ,CACEpB,OAAO,CAAC;AACNyC,EAAAA,MAAM,EAAEf,OAAO,CAACC,GAAR,CAAYe,cADd;AAENC,EAAAA,MAAM,EAAE,KAFF;AAGNC,EAAAA,iBAAiB,EAAE,KAHb;AAINC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAM,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB;AAA9B,GAJF;AAKNC,EAAAA,KAAK,EAAE,IAAI7C,UAAJ,CAAe;AACpB8C,IAAAA,kBAAkB,EAAElD,QAAQ,CAACmD,UADT;AAEpBC,IAAAA,UAAU,EAAE,UAFQ;AAGpBC,IAAAA,kBAAkB,EAAE,EAHA;AAGI;AACxBC,IAAAA,UAAU,EAAE,KAAK,IAJG;AAIG;AACvBC,IAAAA,cAAc,EAAE;AALI,GAAf;AALD,CAAD,CADT;AAgBA/C,GAAG,CAACc,GAAJ,CAAQkC,kBAASC,UAAT,EAAR;AACAjD,GAAG,CAACc,GAAJ,CAAQkC,kBAAStD,OAAT,EAAR;;AAEA,SAASwD,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AACpC,MACEF,GAAG,CAACG,OAAJ,CAAY,mBAAZ,MAAqC,OAArC,IACAlC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAF3B,EAGE;AACA,WAAO8B,GAAG,CAACG,QAAJ,CAAa,aAAaJ,GAAG,CAACK,GAAJ,CAAQ,MAAR,CAAb,GAA+BL,GAAG,CAACM,GAAhD,CAAP;AACD;;AACD,SAAOJ,IAAI,EAAX;AACD;;AAED,IAAIjC,OAAO,CAACC,GAAR,CAAYqC,MAAZ,KAAuB,MAA3B,EAAmC;AACjC1D,EAAAA,GAAG,CAACc,GAAJ,CAAQoC,YAAR;AACD,C,CAED;;;AACAlD,GAAG,CAACc,GAAJ,CACE,GADF,EAEEf,iBAAiB,CACfR,OAAO,CAACoE,OAAR,CAAgB,gCAAhB,EAAkDC,OAAlD,CAA0D,oBAA1D,EAAgF,EAAhF,CADe,EAEf;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAFe,CAFnB;AAOA7D,GAAG,CAACc,GAAJ,CAAQjB,iBAAiB,EAAzB;AACAG,GAAG,CAACc,GAAJ,CAAQ,qBAAO,OAAP,CAAR;AAEA,IAAMgD,IAAI,GAAG1C,OAAO,CAACC,GAAR,CAAY0C,IAAZ,IAAoB,IAAjC;AAEA7C,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,OAAO,CAACC,GAAR,CAAY2C,eAA5C;AAEA,IAAIC,MAAM,GAAG,IAAIC,iCAAJ,CAAiB;AAC5BC,EAAAA,MAAM,EAANA,eAD4B;AAE5BC,EAAAA,UAAU,EAAEhD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAFT;AAG5B+C,EAAAA,OAAO,EAAE;AAAA,QAAC;AAAElB,MAAAA,GAAF;AAAOR,MAAAA;AAAP,KAAD;AAAA,WACPA,UAAU,GAAGA,UAAU,CAAC0B,OAAd,GAAwB;AAAEC,MAAAA,IAAI,EAAEnB,GAAG,CAACmB,IAAJ,IAAY;AAApB,KAD3B;AAAA;AAHmB,CAAjB,CAAb;AAOAtE,GAAG,CAACc,GAAJ,CAAQ,UAAR,EAAoBV,oBAApB;AACA6D,MAAM,CAACM,eAAP,CAAuB;AAAEvE,EAAAA,GAAF;AAAOwE,EAAAA,IAAI,EAAE;AAAb,CAAvB;;AAEA,IAAMC,YAAY,GAAGlF,OAAO,YAAP,CAAoBmF,OAAzC;;AAEAT,MAAM,GAAGjE,GAAG,CAAC2E,MAAJ,CAAW;AAAEb,EAAAA;AAAF,CAAX,EAAsBc,KAAD,IAAW;AACvC,MAAIA,KAAJ,EAAW;AACT1D,IAAAA,OAAO,CAAC0D,KAAR,CAAcA,KAAd;AACD,GAFD,MAEO;AACL1D,IAAAA,OAAO,CAAC2D,IAAR,+CAC+Bf,IAD/B,wCACiEA,IADjE;AAGA,QAAMgB,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AACAxF,IAAAA,OAAO,YAAP,CAAoBS,GAApB;;AACA,QAAMgF,IAAI,GAAG,IAAID,IAAJ,GAAWE,OAAX,KAAuBH,GAAG,CAACG,OAAJ,EAApC;AACA/D,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC6D,IAAI,GAAG,IAA1C,EAAgD,GAAhD;AACD;AACF,CAZQ,CAAT;AAaAP,YAAY,CAACR,MAAD,EAAS;AAAEiB,EAAAA,WAAW,EAAE;AAAf,CAAT,CAAZ;;AAEAC,6CAAmBC,MAAnB,CACE;AACEC,EAAAA,WAAW;AAAA,uDAAE,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AACtC,UAAM;AAAEC,QAAAA;AAAF,UAAYF,OAAO,CAACG,OAA1B;AACA,UAAInB,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,SAASjE,MAAM,CAACmF,KAAD,CAAnB;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY,CACZ;AACD;;AACD,6CACKH,MADL;AAEElB,QAAAA,OAAO,kCACFkB,MAAM,CAAClB,OADL;AAELC,UAAAA;AAFK;AAFT;AAOD,KAfU;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADb;AAiBEqB,EAAAA,OAAO,EAAPA,gBAjBF;AAkBEC,EAAAA,SAAS,EAATA,kBAlBF;AAmBEzB,EAAAA,MAAM,EAANA,eAnBF;AAoBE0B,EAAAA,SAAS,EAAE;AApBb,CADF,EAuBE;AACE5B,EAAAA,MADF;AAEEnE,EAAAA,IAAI,EAAE;AAFR,CAvBF;;AA6BA2E,YAAY,CAACR,MAAD,EAAS;AAAEiB,EAAAA,WAAW,EAAE;AAAf,CAAT,CAAZ,C,CAEA;;AACA,IAAIvD,WAAW,KAAK,SAAhB,IAA6BD,aAA7B,IAA8CN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,QAA3E,EAAqF;AACnF/B,EAAAA,OAAO,WAAP;AACD;;AAEDA,OAAO,sBAAP;;AACAA,OAAO,oBAAP,CAA4BuG,IAA5B,G,CACA;;;AAEAC,OAAO,CAAC/F,GAAR,GAAcA,GAAd;AACA+F,OAAO,CAAC9B,MAAR,GAAiBA,MAAjB;AACA8B,OAAO,CAAC7D,EAAR,GAAaA,EAAb","sourcesContent":["/* eslint-disable no-console, no-use-before-define */\nimport 'dotenv/config';\nimport 'sqreen';\nimport Express from 'express';\nimport morgan from 'morgan';\nimport passport from 'passport';\nimport { ApolloServer } from 'apollo-server-express';\nimport schema from 'server/graphql/schema';\nimport rateLimit from 'express-rate-limit';\nimport cors from 'cors';\n\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { execute, subscribe } from 'graphql';\n\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\nconst favicon = require('serve-favicon');\nconst MongoStore = require('connect-mongo')(session);\nconst cookiesMiddleware = require('universal-cookie-express');\nconst path = require('path');\nconst expressStaticGzip = require('express-static-gzip');\n\nconst app = new Express();\nmongoose.Promise = global.Promise;\n\nconst { validateTokenLenient, verify } = require('server/auth/auth.service');\n\nconst whitelist = ['http://localhost:3000', 'https://relevant.community']; //white list consumers\n\nconst corsOptions = {\n  origin: whitelist,\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  credentials: true,\n  optionsSuccessStatus: 200,\n  allowedHeaders: [\n    'Content-Type',\n    'Authorization',\n    'X-Requested-With',\n    'device-remember-token',\n    'Access-Control-Allow-Origin',\n    'Origin',\n    'Accept',\n  ],\n};\n\napp.use(cors(corsOptions));\n\nconst limiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 1000, // limit each IP to 1000 requests per windowMs\n});\n\nconsole.log('NODE_ENV', process.env.NODE_ENV);\n\nrequire('events').EventEmitter.prototype._maxListeners = 100;\n\n// -------------Dev server watch and hot reload---------------\nconst isDevelopment =\n  process.env.NODE_ENV !== 'production' &&\n  process.env.NODE_ENV !== 'test' &&\n  process.env.NODE_ENV !== 'native';\n\nconst relevantEnv = process.env.RELEVANT_ENV;\n\napp.use(limiter);\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(cookieParser());\napp.use(favicon(path.join(__dirname, '../favicon.ico')));\n\n// Connect to db\nconst { db } = require('./config/db.connect');\n\n// Persist sessions with MongoStore\n// We need to enable sessions for passport twitter because its an oauth 1.0 strategy\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 },\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n      autoRemove: 'interval',\n      autoRemoveInterval: 10, // In minutes. Default\n      touchAfter: 24 * 3600, // time period in seconds\n      clear_interval: 3600,\n    }),\n  })\n);\n\napp.use(passport.initialize());\napp.use(passport.session());\n\nfunction requireHTTPS(req, res, next) {\n  if (\n    req.headers['x-forwarded-proto'] !== 'https' &&\n    process.env.NODE_ENV === 'production'\n  ) {\n    return res.redirect('https://' + req.get('host') + req.url);\n  }\n  return next();\n}\n\nif (process.env.NO_SSL !== 'true') {\n  app.use(requireHTTPS);\n}\n\n// public folder\napp.use(\n  '/',\n  expressStaticGzip(\n    require.resolve('@r3l/app/public/service-worker').replace('/service-worker.js', ''),\n    { index: false }\n  )\n);\napp.use(cookiesMiddleware());\napp.use(morgan('short'));\n\nconst port = process.env.PORT || 3000;\n\nconsole.log('WEB CONCURRENCY ', process.env.WEB_CONCURRENCY);\n\nlet server = new ApolloServer({\n  schema,\n  playground: process.env.NODE_ENV !== 'production',\n  context: ({ req, connection }) =>\n    connection ? connection.context : { user: req.user || {} },\n});\n\napp.use('/graphql', validateTokenLenient);\nserver.applyMiddleware({ app, cors: false });\n\nconst socketServer = require('./socket').default;\n\nserver = app.listen({ port }, (error) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.info(\n      `==> 🌎  Listening on port ${port}. Open up http://localhost:${port}/ in your browser.`\n    );\n    const now = new Date();\n    require('./routes')(app);\n    const time = new Date().getTime() - now.getTime();\n    console.log('done loading routes', time / 1000, 's');\n  }\n});\nsocketServer(server, { pingTimeout: 30000 });\n\nSubscriptionServer.create(\n  {\n    onOperation: async (message, params) => {\n      const { token } = message.payload;\n      let user;\n      try {\n        user = await verify(token);\n      } catch (err) {\n        // console.log(err);\n      }\n      return {\n        ...params,\n        context: {\n          ...params.context,\n          user,\n        },\n      };\n    },\n    execute,\n    subscribe,\n    schema,\n    keepAlive: 10000,\n  },\n  {\n    server,\n    path: '/graphql',\n  }\n);\n\nsocketServer(server, { pingTimeout: 30000 });\n\n// in production this is a worker\nif (relevantEnv === 'staging' || isDevelopment || process.env.NODE_ENV === 'native') {\n  require('./queue');\n}\n\nrequire('./utils/tokenAudit');\nrequire('./utils/ethereum').init();\n// require('./utils/dbMigrate-v1.1.1');\n\nexports.app = app;\nexports.server = server;\nexports.db = db;\n"],"file":"server.js"}