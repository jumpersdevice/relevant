{"version":3,"sources":["../../src/test/setup.eth.js"],"names":["require","config","key","process","env","TEST_KEY","provider","ethers","providers","Web3Provider","ganache","network_id","accounts","secretKey","balance","wallet","Wallet","deployContract","factory","ContractFactory","RelevantTokent","abi","bytecode","contract","deploy","deployed","initContract","console","log","address","err","testName","testDecimals","p","testSymbol","testVersion","testDevFundAddress","halfLife","timeConstant","Math","LN2","targetInflation","initRoundReward","roundLength","roundDecay","targetRound","totalPremint","airdropSwitchRound","airdropRoundDecay","firstNewAirdrop","airdropRoundDecayBNString","BN","toString","toFixed","firstNewAirdropBNString","initRoundRewardBNString","timeConstantBNString","totalPremintBNString","roundDecayBNString","initialize","initializeRewardSplit"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport RelevantTokent from '@r3l/common/lib/contracts/RelevantToken.json';\nimport ganache from 'ganache-cli';\nimport BN from 'bignumber.js';\n\nrequire('dotenv').config();\n\nconst key = process.env.TEST_KEY;\n\nexport const provider = new ethers.providers.Web3Provider(\n  ganache.provider({\n    network_id: 99,\n    accounts: [\n      {\n        secretKey: '0x' + key,\n        balance: 99e18\n      }\n    ]\n  })\n);\n\nconst wallet = new ethers.Wallet(key, provider);\n\nexport async function deployContract() {\n  try {\n    const factory = new ethers.ContractFactory(\n      RelevantTokent.abi,\n      RelevantTokent.bytecode,\n      wallet\n    );\n\n    const contract = await factory.deploy();\n\n    await contract.deployed();\n    await initContract(contract);\n    console.log('CONTRACT_ADDRESS', contract.address); // eslint-disable-line\n    return { address: contract.address, provider };\n  } catch (err) {\n    console.log('failed to deploy contract', err); // eslint-disable-line\n    return null;\n  }\n}\n\nasync function initContract(contract) {\n  const testName = 'Relevant Token';\n  const testDecimals = 18;\n  const p = 1e18;\n  const testSymbol = 'REL';\n  const testVersion = '1.0';\n  const testDevFundAddress = '0xffcf8fdee72ac11b5c542428b35eef5769c409f0';\n  const halfLife = 8760; // # of rounds to decay by half\n  const timeConstant = (halfLife / Math.LN2) * p;\n  const targetInflation = 10880216701148;\n  const initRoundReward = 2500 * p;\n  const roundLength = 1; // 240;\n  const roundDecay = 999920876739935000;\n  const targetRound = 26704;\n  const totalPremint = 27777044629743800000000000;\n\n  const airdropSwitchRound = 8352;\n  const airdropRoundDecay = 999762649000782000;\n  const firstNewAirdrop = 3442799625893100000000;\n\n  // transform big number parameters for contract initialization\n  // (ugh is there a better way to do this?)\n\n  const airdropRoundDecayBNString = new BN(airdropRoundDecay.toString())\n    .toFixed(0)\n    .toString();\n  const firstNewAirdropBNString = new BN(firstNewAirdrop.toString())\n    .toFixed(0)\n    .toString();\n\n  const initRoundRewardBNString = new BN(initRoundReward.toString())\n    .toFixed(0)\n    .toString();\n  const timeConstantBNString = new BN(timeConstant.toString()).toFixed(0).toString();\n  const totalPremintBNString = new BN(totalPremint.toString()).toFixed(0).toString();\n  const roundDecayBNString = new BN(roundDecay.toString()).toFixed(0).toString();\n\n  await contract.initialize(\n    testName,\n    testDecimals,\n    testSymbol,\n    testVersion,\n    testDevFundAddress,\n    initRoundRewardBNString,\n    timeConstantBNString,\n    targetInflation,\n    targetRound,\n    roundLength,\n    roundDecayBNString,\n    totalPremintBNString\n  );\n\n  await contract.initializeRewardSplit(\n    airdropSwitchRound,\n    airdropRoundDecayBNString,\n    firstNewAirdropBNString\n  ); // feature was added in contract upgrade\n\n  return contract;\n}\n"],"file":"setup.eth.js"}