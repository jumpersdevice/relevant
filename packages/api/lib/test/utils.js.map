{"version":3,"sources":["../../src/test/utils.js"],"names":["defaultKeys","sanitize","data","keys","split","reducer","result","key","val","map","r","includes","Object","reduce","toObject","constructor","name","newData","forEach","k"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA,IAAMA,WAAW,GAAG,CAClB,KADkB,EAElB,IAFkB,EAGlB,WAHkB,EAIlB,WAJkB,EAKlB,YALkB,EAMlB,UANkB,EAOlB,eAPkB,EAQlB,MARkB,CAApB;;AAWO,SAASC,QAAT,CAAkBC,IAAlB,EAA4C;AAAA,MAApBC,IAAoB,uEAAbH,WAAa;AACjD,MAAI,CAACE,IAAL,EAAW,OAAOA,IAAP;AACX,MAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8BA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,GAAX,CAAP;AAC9BD,EAAAA,IAAI,GAAG,oBAAOH,WAAP,EAAoBG,IAApB,CAAP;;AACA,MAAME,OAAO,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC/B,QAAMC,GAAG,GAAGF,MAAM,CAACC,GAAD,CAAlB;AACA,QAAI,CAACC,GAAL,EAAU,OAAOF,MAAP;AACV,QAAI,qBAAQE,GAAR,CAAJ,EACE,OAAO,aACLD,GADK,EAELC,GAAG,CAACC,GAAJ,CAAQC,CAAC,IAAIT,QAAQ,CAACS,CAAD,EAAIP,IAAJ,CAArB,CAFK,EAGLG,MAHK,CAAP;AAKF,QAAI,2BAAcE,GAAd,CAAJ,EAAwB,OAAO,aAAID,GAAJ,EAASN,QAAQ,CAACO,GAAD,EAAML,IAAN,CAAjB,EAA8BG,MAA9B,CAAP;AACxB,QAAIH,IAAI,CAACQ,QAAL,CAAcJ,GAAd,CAAJ,EAAwB,OAAO,aAAIA,GAAJ,EAAS,aAAT,EAAwBD,MAAxB,CAAP;AACxB,WAAOA,MAAP;AACD,GAZD;;AAaA,SAAOM,MAAM,CAACT,IAAP,CAAYD,IAAZ,EAAkBW,MAAlB,CAAyBR,OAAzB,EAAkCH,IAAlC,CAAP;AACD;;AAEM,SAASY,QAAT,CAAkBZ,IAAlB,EAAwB;AAC7B,MAAI,CAACA,IAAL,EAAW,OAAOA,IAAP;AACX,MAAI,qBAAQA,IAAR,CAAJ,EAAmB,OAAOA,IAAI,CAACO,GAAL,CAASK,QAAT,CAAP;;AACnB,MAAIZ,IAAI,CAACa,WAAL,IAAoBb,IAAI,CAACa,WAAL,CAAiBC,IAAjB,KAA0B,OAAlD,EAA2D;AACzD,WAAOd,IAAI,CAACY,QAAL,EAAP;AACD;;AACD,MAAI,2BAAcZ,IAAd,CAAJ,EAAyB;AACvB,QAAMe,OAAO,GAAG,EAAhB;AACAL,IAAAA,MAAM,CAACT,IAAP,CAAYD,IAAZ,EAAkBgB,OAAlB,CAA0BC,CAAC,IAAKF,OAAO,CAACE,CAAD,CAAP,GAAaL,QAAQ,CAACZ,IAAI,CAACiB,CAAD,CAAL,CAArD;AACA,WAAOF,OAAP;AACD;;AACD,SAAOf,IAAP;AACD","sourcesContent":["import { isArray, isPlainObject, concat } from 'lodash';\nimport { set } from 'lodash/fp';\n\nconst defaultKeys = [\n  '_id',\n  'id',\n  'createdAt',\n  'updatedAt',\n  'payoutTime',\n  'postDate',\n  'latestComment',\n  'rank'\n];\n\nexport function sanitize(data, keys = defaultKeys) {\n  if (!data) return data;\n  if (typeof keys === 'string') keys = keys.split(' ');\n  keys = concat(defaultKeys, keys);\n  const reducer = (result, key) => {\n    const val = result[key];\n    if (!val) return result;\n    if (isArray(val))\n      return set(\n        key,\n        val.map(r => sanitize(r, keys)),\n        result\n      );\n    if (isPlainObject(val)) return set(key, sanitize(val, keys), result);\n    if (keys.includes(key)) return set(key, '[SANITIZED]', result);\n    return result;\n  };\n  return Object.keys(data).reduce(reducer, data);\n}\n\nexport function toObject(data) {\n  if (!data) return data;\n  if (isArray(data)) return data.map(toObject);\n  if (data.constructor && data.constructor.name === 'model') {\n    return data.toObject();\n  }\n  if (isPlainObject(data)) {\n    const newData = {};\n    Object.keys(data).forEach(k => (newData[k] = toObject(data[k])));\n    return newData;\n  }\n  return data;\n}\n"],"file":"utils.js"}