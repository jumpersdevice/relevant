{"version":3,"sources":["../../src/notifications/emailPushNotifications.js"],"names":["sendEmail","require","inlineCss","notificationStyle","User","getUrls","handleEmailNotifications","params","toUser","ensureUserEamil","emailNotificationIsEnabled","html","subject","getHtml","data","from","to","email","err","console","log","urls","noteType","getNewPostHtml","getRewardHtml","getDefaultEmailHtml","user","notificationSettings","findOne","_id","Error","isPersonal","personal","general","fromUser","post","action","userUrl","postUrl","settingsUrl","noteHtml","name","isReplyOrMention","body","title","url","community","fromHtml","postHtml","walletUrl","process","env","API_SERVER","toLowerCase","replace"],"mappings":"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","sourcesContent":["const { sendEmail } = require('server/utils/mail');\nconst inlineCss = require('inline-css');\nconst { notificationStyle } = require('server/utils/emailStyle');\nconst User = require('server/api/user/user.model');\nconst { getUrls } = require('./notificationHelper');\n\nexport async function handleEmailNotifications(params) {\n  try {\n    params.toUser = await ensureUserEamil(params.toUser);\n    if (!params.toUser) return null;\n    if (!emailNotificationIsEnabled(params)) return null;\n\n    const { html, subject } = await getHtml(params);\n\n    const data = {\n      from: 'Relevant <info@relevant.community>',\n      to: params.toUser.email,\n      subject,\n      html\n    };\n    return sendEmail(data);\n  } catch (err) {\n    return console.log(err); // eslint-disable-line\n  }\n}\n\nasync function getHtml(params) {\n  params.urls = getUrls(params);\n  const { noteType } = params;\n  switch (noteType) {\n    case 'newPost':\n      return getNewPostHtml(params);\n    case 'reward':\n      return getRewardHtml(params);\n    default:\n      return getDefaultEmailHtml(params);\n  }\n}\n\nasync function ensureUserEamil(user) {\n  if (user.email && user.notificationSettings) return user;\n  user = await User.findOne({ _id: user._id }, '+email');\n  if (!user.email) throw new Error('user is missing email');\n  return user;\n}\n\nfunction emailNotificationIsEnabled({ noteType, toUser }) {\n  const isPersonal =\n    noteType === 'reward' || noteType === 'reply' || noteType === 'mention';\n  if (isPersonal && toUser.notificationSettings.email.personal) {\n    return true;\n  }\n  if (!isPersonal && toUser.notificationSettings.email.general) {\n    return true;\n  }\n  return false;\n}\n\nasync function getDefaultEmailHtml({ urls, fromUser, post, toUser, action, noteType }) {\n  const { userUrl, postUrl, settingsUrl } = urls;\n\n  const noteHtml = fromUser\n    ? `<a href=\"${userUrl}\">${fromUser.name}</a> ${action}`\n    : action;\n  const subject = fromUser ? `${fromUser.name} ${action}` : action;\n\n  const isReplyOrMention = noteType === 'reply' || noteType === 'mention';\n\n  let html = `\n    <br/>\n    ${toUser.name}, ${isReplyOrMention ? 'you have a new notification' : noteHtml}:\n    <br />\n    <br />\n    <div class=\"post\" />\n      ${isReplyOrMention ? '<div class=\"head\">' + noteHtml + '</div>' : ''}\n      <a class=\"body\" href=\"${postUrl}\">\n        ${post.body || post.title}\n      </a>\n    </div>\n    <br />\n    <br />\n    <p class='footer'>You can adjust your email notification settings <a href=\"${settingsUrl}\">here</a></p>\n    `;\n\n  html = await inlineCss(notificationStyle + html, { url: 'https://relevant.community' });\n\n  return { html, subject };\n}\n\nasync function getNewPostHtml({ urls, fromUser, toUser, action, community }) {\n  const { userUrl, postUrl, settingsUrl } = urls;\n\n  const fromHtml = `<a href=\"${userUrl}\">${fromUser.name}</a>`;\n  const postHtml = `<a href=\"${postUrl}\">post</a>`;\n\n  const noteHtml = `there is a new ${postHtml} from ${fromHtml} in the ${community} community`;\n  const subject = action;\n\n  let html = `\n    <br/>\n    ${toUser.name}, ${noteHtml}\n    <br />\n    <br />\n    <p class='footer'>You can adjust your email notification settings <a href=\"${settingsUrl}\">here</a></p>\n    `;\n\n  html = await inlineCss(notificationStyle + html, { url: 'https://relevant.community' });\n  return { html, subject };\n}\n\nasync function getRewardHtml({ urls, toUser, action }) {\n  const { postUrl, settingsUrl } = urls;\n\n  const walletUrl = `${process.env.API_SERVER}/user/wallet`;\n\n  const postHtml = `<a href=\"${postUrl}\">post</a>`;\n  const noteHtml = action.toLowerCase().replace('post', postHtml);\n  const subject = action;\n\n  let html = `\n    <br/>\n    ${toUser.name}, ${noteHtml}\n    <br />\n    <br />\n    You can see all of your earnings in your <a href=\"${walletUrl}\">wallet</a>.\n    <br />\n    <br />\n    <p class='footer'>You can adjust your email notification settings <a href=\"${settingsUrl}\">here</a></p>\n    `;\n\n  html = await inlineCss(notificationStyle + html, { url: 'https://relevant.community' });\n  return { html, subject };\n}\n"],"file":"emailPushNotifications.js"}