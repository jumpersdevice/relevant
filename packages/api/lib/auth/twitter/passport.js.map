{"version":3,"sources":["../../../src/auth/twitter/passport.js"],"names":["passport","require","TwitterStrategy","Strategy","promisify","config","User","Invite","auth","exports","nativeAuth","req","res","next","profile","twitterAuth","invitecode","body","userID","Error","getProfile","user","handleTwitterAuth","token","signToken","_id","role","json","err","setup","use","consumerKey","process","env","TWITTER_ID","consumerSecret","TWITTER_SECRET","callbackURL","twitter","passReqToCallback","includeEmail","tokenSecret","done","authToken","authTokenSecret","query","connectedToUser","isConnectedToDifferentUser","findOne","twitterId","id","_json","email","length","confirmed","isNewUser","handle","username","addNewTwitterUser","addTwitterProfile","initialCoins","processInvite","addReward","type","console","log","save","props","user_id","url","userProfile","bind","description","entities","urls","forEach","u","replace","display_url","image","profile_image_url_https","twitterHandle","twitterEmail","twitterImage","bio","updateMeta","name","displayName","twitterAuthToken","twitterAuthSecret","$ne","toString","handleExists","Math","random","substr","provider"],"mappings":"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","sourcesContent":["import { handleAdminInvite } from 'server/api/invites/invite.controller';\nimport { addUserToEmailList } from 'server/utils/mail';\n\nconst passport = require('passport');\nconst TwitterStrategy = require('passport-twitter').Strategy;\nconst { promisify } = require('util');\nconst config = require('../../config/config');\nconst User = require('../../api/user/user.model');\nconst Invite = require('../../api/invites/invite.model');\nconst auth = require('../auth.service');\n\n// Handles both login and signup via http POST request - native\nexports.nativeAuth = async (req, res, next) => {\n  try {\n    const { profile: twitterAuth, invitecode } = req.body;\n    if (!twitterAuth || !twitterAuth.userID) throw new Error('Missing twitter id');\n\n    const profile = await getProfile(twitterAuth);\n    const user = await handleTwitterAuth({ req, twitterAuth, profile, invitecode });\n\n    const token = auth.signToken(user._id, user.role);\n    return res.json({ token, user });\n  } catch (err) {\n    return next(err);\n  }\n};\n\n// Handles both login and signup via http GET request - web\nexports.setup = () => {\n  passport.use(\n    new TwitterStrategy(\n      {\n        consumerKey: process.env.TWITTER_ID,\n        consumerSecret: process.env.TWITTER_SECRET,\n        callbackURL: config.twitter.callbackURL,\n        passReqToCallback: true,\n        includeEmail: true\n      },\n      async (req, token, tokenSecret, profile, done) => {\n        try {\n          const twitterAuth = {\n            authToken: token,\n            authTokenSecret: tokenSecret\n          };\n          const { invitecode } = req.query;\n          const user = await handleTwitterAuth({ req, twitterAuth, profile, invitecode });\n          return done(null, user);\n        } catch (err) {\n          return done(err);\n        }\n      }\n    )\n  );\n};\n\nexport async function handleTwitterAuth({ req, twitterAuth, profile, invitecode }) {\n  if (!profile) throw new Error('missing twitter profile');\n\n  let { user } = req;\n\n  const connectedToUser = await isConnectedToDifferentUser({ user, profile });\n\n  if (connectedToUser) {\n    throw new Error('A user with this twitter account already exists');\n  }\n\n  if (!user) user = await User.findOne({ twitterId: profile.id });\n\n  // check if we have someone with a matching email\n  // SECURITY RISK (could potentially add email account to another person's email?)\n  if (!user && profile._json.email && profile._json.email.length) {\n    user = await User.findOne({\n      email: profile._json.email,\n      confirmed: true\n    });\n  }\n\n  const isNewUser = !user || false;\n\n  const handle = profile.username;\n  if (isNewUser) {\n    user = await addNewTwitterUser({ handle, invitecode });\n    user = await addTwitterProfile({ profile, user, twitterAuth });\n    await addUserToEmailList(user);\n    user = await user.initialCoins();\n    if (invitecode && invitecode !== 'undefined') {\n      user = await Invite.processInvite({ invitecode, user });\n      // const invite = await Invite.findOne({ code: invitecode, redeemed: { $ne: true } });\n      // if (invite) user = await invite.referral(user);\n    }\n  } else if (!user.twitterId) {\n    user = await addTwitterProfile({ profile, user, twitterAuth });\n    user = await user.addReward({ type: 'twitter' });\n  }\n\n  if (!isNewUser && invitecode && invitecode !== 'undefined') {\n    try {\n      user = await handleAdminInvite({ invitecode, user });\n    } catch (err) {\n      console.log(err); // eslint-disable-line\n    }\n  }\n\n  return user.save();\n}\n\nexport async function getProfile(props) {\n  const { authToken, authTokenSecret } = props;\n  const user_id = props.userID; // eslint-disable-line\n  const url = 'https://api.twitter.com/1.1/users/show.json';\n  const twitter = new TwitterStrategy(\n    {\n      consumerKey: process.env.TWITTER_ID,\n      consumerSecret: process.env.TWITTER_SECRET,\n      callbackURL: config.twitter.callbackURL,\n      passReqToCallback: true,\n      includeEmail: true\n    },\n    () => null\n  );\n\n  // need to bind original object\n  const userProfile = promisify(twitter.userProfile.bind(twitter));\n\n  const profile = await userProfile(authToken, authTokenSecret, { url, user_id });\n  return profile;\n}\n\nexport async function addTwitterProfile({ profile, twitterAuth, user }) {\n  let { description } = profile._json;\n  if (profile._json.entities.description && profile._json.entities.description.urls) {\n    profile._json.entities.description.urls.forEach(u => {\n      description = description.replace(u.url, u.display_url);\n    });\n  }\n  const image = profile._json.profile_image_url_https;\n  const twitterHandle = profile.username;\n  const twitterEmail = profile._json.email;\n  const twitterImage = image.replace('_normal', '');\n\n  const twitterId = profile.id;\n\n  // TODO include twitter bio URL?\n  description += `\\ntwitter.com/${profile.username}`;\n\n  if (!user.bio || !user.bio.length) user.bio = description;\n\n  if (!user.image || !user.image.length) {\n    user.image = twitterImage;\n    // update existing posts using this\n    await user.updateMeta();\n  }\n\n  if (!user.name) user.name = profile.displayName;\n\n  if (!user.email && twitterEmail && twitterEmail.length) {\n    user.email = twitterEmail;\n    user.confirmed;\n  }\n\n  user.twitter = profile._json;\n  user.twitterHandle = twitterHandle;\n  user.twitterImage = twitterImage;\n  user.twitterEmail = twitterEmail;\n  user.twitterId = twitterId;\n\n  user.twitterAuthToken = twitterAuth.authToken;\n  user.twitterAuthSecret = twitterAuth.authTokenSecret;\n\n  return user.save();\n}\n\nasync function isConnectedToDifferentUser({ user, profile }) {\n  if (!user) return null;\n  return User.findOne({ twitterId: profile.id, _id: { $ne: user._id.toString() } });\n}\n\nexport async function addNewTwitterUser({ handle }) {\n  const handleExists = await User.findOne({ handle });\n  if (handleExists) {\n    handle += Math.random()\n      .toString(36)\n      .substr(2, 3);\n  }\n\n  const user = new User({\n    role: 'temp',\n    handle,\n    provider: 'twitter'\n  });\n  return user.save();\n}\n"],"file":"passport.js"}