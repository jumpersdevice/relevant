{"version":3,"sources":["../../../src/auth/reddit/passport.js"],"names":["passport","require","RedditStrategy","Strategy","config","User","Invite","use","clientID","reddit","clientSecret","callbackURL","passReqToCallback","req","accessToken","refreshToken","profile","done","redditAuth","query","queryString","parse","state","invitecode","user","handleAuth","err","Error","isConnectAccount","alreadyInUse","isConnectedToDifferentUser","findOne","redditId","_json","id","isNewUser","handle","name","extraRewards","Math","round","log10","comment_karma","addNewRedditUser","addRedditProfile","addReward","type","processInvite","console","log","save","_id","$ne","handleExists","random","toString","substr","role","provider","redditUser","image","icon_img","length","updateMeta"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\nimport { handleAdminInvite } from 'server/api/invites/invite.controller';\n\nconst passport = require('passport');\nconst RedditStrategy = require('passport-reddit').Strategy;\nconst config = require('../../config/config');\nconst User = require('../../api/user/user.model');\nconst Invite = require('../../api/invites/invite.model');\n\n// User.find({ 'reddit.id': { $exists: true } })\n// .remove()\n// .exec();\n\n// User.findOne({ 'reddit.id': { $exists: true } }, '+reddit')\n// .then(async user => {\n//   user.redditId = null;\n//   user.reddit = null;\n//   await user.save();\n// });\n\npassport.use(\n  new RedditStrategy(\n    {\n      clientID: config.reddit.clientID,\n      clientSecret: config.reddit.clientSecret,\n      callbackURL: config.reddit.callbackURL,\n      passReqToCallback: true\n    },\n    async (req, accessToken, refreshToken, profile, done) => {\n      try {\n        const redditAuth = { accessToken, refreshToken };\n        req.query = queryString.parse(req.query.state);\n        const { invitecode } = req.query;\n        const user = await handleAuth({ req, redditAuth, profile, invitecode });\n        return done(null, user);\n      } catch (err) {\n        return done(err);\n      }\n    }\n  )\n);\n\nexport async function handleAuth({ req, redditAuth, profile, invitecode }) {\n  if (!profile) throw new Error('missing reddit profile');\n\n  let { user } = req;\n\n  const isConnectAccount = user || false;\n  const alreadyInUse =\n    isConnectAccount && (await isConnectedToDifferentUser({ user, profile }));\n\n  if (alreadyInUse) {\n    throw new Error('A user with this reddit account already exists');\n  }\n\n  if (!isConnectAccount) user = await User.findOne({ redditId: profile._json.id });\n\n  const isNewUser = !user || false;\n\n  const handle = profile._json.name;\n  if (isNewUser) {\n    const extraRewards = Math.round(Math.log10(profile._json.comment_karma || 1) * 10);\n    user = await addNewRedditUser({ handle });\n    user = await addRedditProfile({ profile, user, redditAuth });\n    user = await user.addReward({ type: 'reddit', extraRewards });\n    if (invitecode && invitecode !== 'undefined') {\n      user = await Invite.processInvite({ invitecode, user });\n    }\n  } else if (!user.redditId) {\n    user = await addRedditProfile({ profile, user, redditAuth });\n    user = await user.addReward({ type: 'reddit' });\n  }\n\n  if (!isNewUser && invitecode && invitecode !== 'undefined') {\n    try {\n      user = await handleAdminInvite({ invitecode, user });\n    } catch (err) {\n      console.log(err); // eslint-disable-line\n    }\n  }\n\n  return user.save();\n}\n\nasync function isConnectedToDifferentUser({ user, profile }) {\n  return User.findOne({ redditId: profile._json.id, _id: { $ne: user._id } });\n}\n\nexport async function addNewRedditUser({ handle }) {\n  const handleExists = await User.findOne({ handle });\n  if (handleExists) {\n    handle += Math.random()\n      .toString(36)\n      .substr(2, 3);\n  }\n\n  const user = new User({\n    role: 'temp',\n    handle,\n    provider: 'reddit'\n  });\n  return user.save();\n}\n\nexport async function addRedditProfile({ profile, redditAuth, user }) {\n  const redditUser = profile._json;\n  const image = redditUser.icon_img;\n\n  if (!user.image || !user.image.length) {\n    user.image = image;\n    // update existing posts\n    await user.updateMeta();\n  }\n  if (!user.name) user.name = redditUser.name;\n\n  user.reddit = redditUser;\n  user.redditId = redditUser.id;\n\n  user.redditAuth = redditAuth;\n  return user.save();\n}\n"],"file":"passport.js"}