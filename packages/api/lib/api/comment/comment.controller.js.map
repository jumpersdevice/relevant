{"version":3,"sources":["../../../src/api/comment/comment.controller.js"],"names":["exports","index","req","user","community","post","query","Error","cObj","Community","findOne","slug","communityId","_id","parentPost","hidden","$ne","myVote","path","match","investor","comments","Post","find","populate","select","sort","pagerank","createdAt","data","map","c","toObject","create","res","next","communityMember","linkParent","text","body","repost","metaPost","parentComment","mentions","tags","type","words","mentionsFromBody","tagsFromBody","Set","commentObj","eligibleForRewards","postDate","Date","comment","User","banned","addUserInfo","addPostData","sendOutMentions","updateTime","updateRank","length","addTags","save","updateClient","postAuthor","commentAuthor","otherCommentors","comm","filter","u","push","voters","Invest","commentVoters","v","i","findIndex","equals","status","json","m","handle","forEach","commentor","sendNotifications","err","ownPost","ownComment","noteType","note","forUser","byUser","amount","source","personal","read","Notification","noteAction","payload","socketEvent","emit","action","alert","name","fromUser","toUser","update","newMentions","newComment","indexOf","delete","userId","id","params","remove","findOneAndUpdate","$inc","commentCount","new","exec"],"mappings":"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","sourcesContent":["import Community from 'server/api/community/community.model';\nimport { getMentions, getWords, getTags } from 'app/utils/text';\nimport { sendNotification as sendPushNotification } from 'server/notifications';\nimport socketEvent from 'server/socket/socketEvent';\nimport Post from 'server/api/post/post.model';\nimport User from 'server/api/user/user.model';\nimport Notification from 'server/api/notification/notification.model';\nimport Invest from 'server/api/invest/invest.model';\nimport { checkCommunityAuth } from 'server/api/community/community.auth';\n\n// COMMENTS ARE USING POST SCHEMA\nexports.index = async req => {\n  // TODO - pagination\n  // const limit = parseInt(req.query.limit, 10) || 10;\n  // const skip = parseInt(req.query.skip, 10) || 0;\n  const { user } = req;\n  const { community, post } = req.query;\n  if (!post) throw Error('missing parent post id');\n\n  const cObj = await Community.findOne({ slug: community }, '_id');\n  const communityId = cObj._id;\n\n  const query = { parentPost: post, hidden: { $ne: true }, communityId };\n\n  const myVote = user\n    ? [\n        {\n          path: 'myVote',\n          match: { investor: user._id, communityId }\n        }\n      ]\n    : [];\n\n  const comments = await Post.find(query)\n    .populate([\n      ...myVote,\n      {\n        path: 'embeddedUser.relevance',\n        select: 'pagerank',\n        match: { communityId }\n      },\n      {\n        path: 'data',\n        match: { communityId }\n      }\n    ])\n    .sort({ pagerank: -1, createdAt: 1 });\n\n  return { data: comments.map(c => c.toObject()) };\n};\n\nexports.create = async (req, res, next) => {\n  try {\n    let user = req.user._id;\n    const { communityMember } = req;\n\n    const { community, communityId } = communityMember;\n\n    await checkCommunityAuth({ user: req.user, communityId, communityMember });\n\n    const { linkParent, text: body, repost = false, metaPost } = req.body;\n    let { parentPost, parentComment, mentions = [], tags = [] } = req.body;\n\n    const type = !parentComment || parentComment === parentPost ? 'post' : 'comment';\n\n    const words = getWords(body);\n    const mentionsFromBody = getMentions(words);\n    const tagsFromBody = getTags(words);\n\n    tags = [...new Set([...tags, ...tagsFromBody])];\n    mentions = [...new Set([...mentions, ...mentionsFromBody])];\n\n    const commentObj = {\n      body,\n      mentions,\n      tags,\n      parentPost,\n      linkParent,\n      parentComment,\n      user,\n      type,\n      eligibleForRewards: true,\n      postDate: new Date(),\n      community,\n      communityId,\n      metaPost\n    };\n\n    let comment = new Post(commentObj);\n    user = await User.findOne({ _id: user });\n\n    if (user.banned) {\n      throw new Error(\n        'You are temporarily blocked from making comments, if you think this is an error, please reach out to info@relevant.community'\n      );\n    }\n\n    parentPost = await Post.findOne({ _id: parentPost });\n    parentComment = await Post.findOne({ _id: parentComment });\n\n    comment = await comment.addUserInfo(user);\n    comment = await comment.addPostData();\n\n    // this will also save the new comment\n    comment = await Post.sendOutMentions(mentions, comment, user, comment);\n\n    const updateTime = type === 'post' || false;\n    await parentPost.updateRank({ communityId, updateTime });\n\n    if (tags && tags.length) {\n      parentPost = await parentPost.addTags({ tags, communityId });\n    }\n\n    parentPost = await parentPost.save();\n    parentPost.updateClient();\n\n    const postAuthor = await User.findOne(\n      { _id: parentPost.user },\n      'name _id deviceTokens handle email notificationSettings'\n    );\n    const commentAuthor =\n      parentComment &&\n      (await User.findOne(\n        { _id: parentComment.user },\n        'name _id deviceTokens handle email notificationSettings'\n      ));\n\n    let otherCommentors = await Post.find({ parentPost: parentPost._id }).populate(\n      'user',\n      'name _id deviceTokens handle email notificationSettings'\n    );\n\n    otherCommentors = otherCommentors.map(comm => comm.user).filter(u => u);\n    if (postAuthor) otherCommentors.push(postAuthor);\n    if (commentAuthor) otherCommentors.push(commentAuthor);\n\n    let voters = await Invest.find({ post: parentPost._id }).populate(\n      'investor',\n      'name _id deviceTokens handle email notificationSettings'\n    );\n\n    let commentVoters =\n      parentComment &&\n      (await Invest.find({ post: parentComment._id }).populate(\n        'investor',\n        'name _id deviceTokens handle email notificationSettings'\n      ));\n\n    commentVoters = commentVoters ? commentVoters.map(v => v.investor) : [];\n    voters = voters.map(v => v.investor);\n    otherCommentors = [...otherCommentors, ...voters, ...commentVoters];\n    otherCommentors = otherCommentors.filter(u => u);\n\n    // filter out duplicates\n    otherCommentors = otherCommentors.filter((u, i) => {\n      const index = otherCommentors.findIndex(c => (c ? c._id.equals(u._id) : false));\n      return index === i;\n    });\n\n    await comment.save();\n    res.status(200).json(comment);\n\n    otherCommentors = otherCommentors.filter(u => !mentions.find(m => m === u.handle));\n    otherCommentors.forEach(commentor =>\n      sendNotifications({\n        commentor,\n        postAuthor,\n        commentAuthor,\n        repost,\n        parentPost,\n        user,\n        comment,\n        type\n      })\n    );\n  } catch (err) {\n    next(err);\n  }\n};\n\nasync function sendNotifications({\n  commentor,\n  postAuthor,\n  commentAuthor,\n  repost,\n  user,\n  comment,\n  type\n}) {\n  if (user._id.equals(commentor._id)) return;\n\n  const ownPost = postAuthor && commentor._id.equals(postAuthor._id);\n  const ownComment = commentAuthor && commentor._id.equals(commentAuthor._id);\n\n  const noteType = !ownPost && !ownComment ? 'commentAlso' : 'comment';\n\n  if (repost && ownPost) type = 'repost';\n\n  let note = {\n    post: comment._id,\n    forUser: commentor._id,\n    byUser: user._id,\n    amount: null,\n    type: noteType,\n    source: type,\n    personal: true,\n    read: false\n  };\n\n  note = new Notification(note);\n  note = await note.save();\n\n  const noteAction = {\n    _id: commentor._id,\n    type: 'ADD_ACTIVITY',\n    payload: note\n  };\n  socketEvent.emit('socketEvent', noteAction);\n\n  let action = ` replied to ${ownPost || ownComment ? 'your' : 'a'} ${type}`;\n  if (type === 'repost' && ownPost) action = ` reposted your ${type}`;\n\n  const alert = user.name + action;\n  const payload = {\n    fromUser: user,\n    toUser: commentor,\n    post: comment,\n    action,\n    noteType: ownPost || ownComment ? 'reply' : 'general'\n  };\n  sendPushNotification(commentor, alert, payload);\n}\n\nexports.update = async (req, res, next) => {\n  try {\n    const comment = req.body;\n    const { user } = req;\n    const { mentions } = comment;\n    let newMentions;\n\n    const newComment = await Post.findOne({ _id: comment._id });\n    if (!user._id.equals(newComment.user)) throw new Error(\"Can't edit other's comments\");\n\n    newComment.body = req.body.body;\n    newMentions = mentions.filter(m => newComment.mentions.indexOf(m) < 0);\n    newComment.mentions = mentions;\n    newMentions = newMentions || [];\n\n    if (newMentions.length) {\n      Post.sendOutMentions(mentions, newComment, newComment.user, newComment);\n    }\n\n    await newComment.save();\n\n    res.json(200, newComment);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.delete = async (req, res, next) => {\n  try {\n    const userId = req.user._id;\n    const { id } = req.params;\n    const query = { _id: id, user: userId };\n    const comment = await Post.findOne(query);\n    if (!comment) throw new Error(\"Comment doesn't exist\");\n    if (comment.repost) {\n      await Post.findOne({ 'repost.comment': id }).remove();\n    }\n\n    const post = await Post.findOneAndUpdate(\n      { _id: comment.parentPost },\n      { $inc: { commentCount: -1 } },\n      { new: true }\n    ).exec();\n\n    await comment.remove();\n\n    if (post) post.updateClient();\n    return res.json(200, true);\n  } catch (err) {\n    return next(err);\n  }\n};\n"],"file":"comment.controller.js"}