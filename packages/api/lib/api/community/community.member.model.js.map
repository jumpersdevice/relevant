{"version":3,"sources":["../../../src/api/community/community.member.model.js"],"names":["mongoose","require","Schema","CommunityMemberSchema","user","type","Types","ObjectId","ref","index","embeddedUser","_id","String","name","image","handle","communityId","community","superAdmin","Boolean","default","role","reputation","Number","invites","degree","postDegree","pagerank","pagerankNeg","pagerankRaw","pagerankRawNeg","unread","deletedCommunity","customAdminWeight","defaultWeight","totalUsers","level","percentRank","relevanceRecord","relevance","time","Date","timestamps","virtual","get","getProfile","methods","updateRelevanceRecord","unshift","slice","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\n\nconst { Schema } = mongoose;\n\nconst CommunityMemberSchema = new Schema(\n  {\n    user: { type: Schema.Types.ObjectId, ref: 'User', index: true },\n    embeddedUser: {\n      _id: String,\n      name: String,\n      image: String,\n      handle: String\n    },\n    communityId: { type: Schema.Types.ObjectId, ref: 'Community' },\n    community: String,\n    superAdmin: { type: Boolean, default: false },\n    role: { type: String, default: 'user' },\n    reputation: { type: Number, default: 0 },\n    invites: { type: Number, default: 0 },\n    degree: { type: Number, default: 0 },\n    postDegree: { type: Number, default: 0 },\n    pagerank: { type: Number, default: 0 },\n    pagerankNeg: { type: Number, default: 0 },\n    pagerankRaw: { type: Number, default: 0 },\n    pagerankRawNeg: { type: Number, default: 0 },\n    unread: { type: Number, default: 0 },\n    deletedCommunity: { type: Boolean, default: false },\n    customAdminWeight: { type: Number },\n    defaultWeight: { type: Number },\n\n    totalUsers: Number,\n    level: Number,\n    percentRank: Number,\n    relevanceRecord: [\n      {\n        relevance: Number,\n        time: Date\n      }\n    ]\n  },\n  {\n    timestamps: true\n  }\n);\n\nCommunityMemberSchema.index({ community: 1 });\nCommunityMemberSchema.index({ communityId: 1 });\nCommunityMemberSchema.index({ deletedCommunity: 1 });\n\nCommunityMemberSchema.index({ communityId: 1, deletedCommunity: 1 });\nCommunityMemberSchema.index({ communityId: 1, user: 1 });\nCommunityMemberSchema.index({ community: 1, user: 1 });\n\nCommunityMemberSchema.index({ community: 1, reputation: -1 });\nCommunityMemberSchema.index({ community: 1, reputation: -1, role: 1 });\nCommunityMemberSchema.index({ community: 1, reputation: -1, user: 1 });\n\nCommunityMemberSchema.index({ deletedCommunity: 1, user: 1 });\n\n// TODO rep key to search by\nCommunityMemberSchema.virtual('repKey').get(function getProfile() {\n  return this.user + '_' + this.communityId;\n});\n\n// update user relevance and save record\nCommunityMemberSchema.methods.updateRelevanceRecord = function updateRelevanceRecord() {\n  let { relevanceRecord } = this;\n  if (!relevanceRecord) relevanceRecord = [];\n  relevanceRecord.unshift({\n    time: new Date(),\n    relevance: this.pagerank\n  });\n  relevanceRecord = this.relevanceRecord.slice(0, 10);\n  this.relevanceRecord = relevanceRecord;\n  return this;\n};\n\nexport default mongoose.model('CommunityMember', CommunityMemberSchema);\n"],"file":"community.member.model.js"}