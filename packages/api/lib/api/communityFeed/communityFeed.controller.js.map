{"version":3,"sources":["../../../src/api/communityFeed/communityFeed.controller.js"],"names":["exports","index","req","community","query","user","skip","parseInt","limit","tag","sort","sortQuery","commentarySort","cObj","Community","findOne","slug","private","Error","member","CommunityMember","communityId","_id","role","isInFeed","rank","pagerank","$gt","MINIMUM_RANK","latestComment","postDate","blocked","blockedBy","tags","$regex","$options","myVote","path","match","investor","feed","PostData","find","populate","type","$nin","hidden","$ne","options","select","posts","forEach","f","post","data","toObject","push","console","log"],"mappings":"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","sourcesContent":["import PostData from 'server/api/post/postData.model';\nimport { MINIMUM_RANK } from 'server/config/globalConstants';\nimport Community from 'server/api/community/community.model';\nimport CommunityMember from 'server/api/community/community.member.model';\n\nexports.index = async req => {\n  // try {\n  // TODO - right now sorting commentary by latest and relevance\n  // only works for community's own posts\n  // solution: populate postData then populate with postData post\n  // TODO - for now isolate commentary to given community\n  const { community } = req.query;\n  const { user } = req;\n  const skip = parseInt(req.query.skip, 10) || 0;\n  const limit = parseInt(req.query.limit, 10) || 5;\n  const tag = req.query.tag || null;\n  const { sort } = req.query;\n  let sortQuery;\n  let commentarySort;\n\n  if (!community) return [];\n\n  const cObj = await Community.findOne({ slug: community }, '_id private');\n  if (!cObj) return [];\n\n  if (cObj.private) {\n    if (!user) throw new Error('This community is private');\n    const member = await CommunityMember.findOne({\n      communityId: cObj._id,\n      user: user._id\n    });\n    if (!member && user.role !== 'admin') throw new Error('This community is private');\n  }\n  const communityId = cObj._id;\n\n  let query = { communityId, isInFeed: true };\n  if (sort === 'rank') {\n    sortQuery = { rank: -1 };\n    query.pagerank = { $gt: MINIMUM_RANK };\n    commentarySort = { pagerank: -1 };\n  } else {\n    sortQuery = { latestComment: -1 };\n    commentarySort = { postDate: -1 };\n  }\n\n  let blocked = [];\n  if (req.user) {\n    blocked = [...(req.user.blocked || []), ...(req.user.blockedBy || [])];\n  }\n\n  if (tag) query = { ...query, tags: { $regex: `${tag}`, $options: 'i' } };\n\n  const myVote = user\n    ? [\n        {\n          path: 'myVote',\n          match: { investor: user._id, communityId }\n        }\n      ]\n    : [];\n\n  const feed = await PostData.find(query)\n    .sort(sortQuery)\n    .skip(skip)\n    .limit(limit)\n    .populate({\n      path: 'post',\n      populate: [\n        ...myVote,\n        {\n          path: 'commentary',\n          match: {\n            // TODO implement intra-community commentary\n            communityId,\n            type: 'post',\n\n            // TODO - we should probably sort the non-community commentary\n            // with some randomness on client side\n            // repost: { $exists: false },\n            user: { $nin: blocked },\n            hidden: { $ne: true }\n          },\n          options: { sort: commentarySort },\n          populate: [\n            ...myVote,\n            { path: 'data' },\n            {\n              path: 'embeddedUser.relevance',\n              select: 'pagerank',\n              match: { communityId }\n            }\n          ]\n        },\n        { path: 'metaPost' },\n        {\n          path: 'embeddedUser.relevance',\n          select: 'pagerank',\n          match: { communityId }\n        }\n      ]\n    });\n\n  const posts = [];\n  feed.forEach(async f => {\n    if (f.post) {\n      // if (f.post.commentary.length && f.post.commentary.find(p => p.twitter)) {\n      //   console.log(f.post.toObject());\n      // }\n      const data = { ...f.toObject() };\n      delete data.post;\n      f.post.data = data;\n      posts.push(f.post.toObject());\n    } else {\n      // just in case - this shouldn't happen\n      console.log('error: post is null!', f.toObject()); // eslint-disable-line\n      // await f.remove();\n    }\n  });\n\n  return posts;\n};\n"],"file":"communityFeed.controller.js"}