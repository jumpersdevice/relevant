{"version":3,"sources":["../../../src/api/post/post.model.js"],"names":["mongoose","require","socketEvent","default","Schema","sendNotification","TENTH_LIFE","PostSchema","body","String","title","description","channel","type","Boolean","community","communityId","Types","ObjectId","ref","tags","category","repost","post","comment","commentBody","user","index","embeddedUser","_id","handle","name","image","flagged","flaggedBy","select","flaggedTime","Date","mentions","metaPost","url","unique","inputUrl","link","links","text","href","position","Number","linkParent","parentPost","parentComment","postDate","latestComment","commentCount","rank","relevance","pagerank","upVotes","downVotes","paidOut","payoutTime","twitter","hidden","twitterUser","twitterId","twitterScore","twitterUrl","seenInFeedNumber","version","timestamps","toJSON","virtuals","toObject","virtual","localField","foreignField","justOne","communitId","pre","next","countQuery","model","countDocuments","err","console","log","save","methods","addPostData","postObject","eligibleForReward","now","data","relevanceNeg","updateClient","postNote","payload","emit","addUserInfo","id","updateLatestComment","findOne","$ne","sort","updateRank","updateTime","getTime","Math","log10","round","topComment","max","statics","newLinkPost","linkObject","populate","path","match","parentObj","combinedTags","Set","upsertMetaPost","upsertLinkParent","parent","insertIntoFeed","Error","findOneAndUpdate","isInFeed","new","newPostEvent","metaId","MetaPost","meta","set","getPostData","addTags","sendOutMentions","mUser","textParent","promises","map","mention","blocked","blockedBy","find","u","filter","m","query","group","role","createMentionNotification","Notification","users","forEach","action","alert","fromUser","toUser","noteType","Promise","all","dbNotificationObj","forUser","byUser","amount","personal","read","newDbNotification","note","newNotifObj","pruneFeed","shares","children","remove","communityChildren","deleteOne","exec","updateParentPostOnRemovingChild","shouldUpdateTime","shouldUpdateRank","deleteMany","feed","commentNote","postRemove","incrementUnread","updateMany","$inc","unread","pubsub","publish","UPDATE_UNREAD","toString","module","exports"],"mappings":"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","sourcesContent":["import { pubsub } from 'server/graphql/pubsub';\nimport { UPDATE_UNREAD } from 'server/api/community/member.schema';\n\nconst mongoose = require('mongoose');\nconst socketEvent = require('server/socket/socketEvent').default;\n\nconst { Schema } = mongoose;\nconst { sendNotification } = require('server/notifications');\n\nconst TENTH_LIFE = 3 * 24 * 60 * 60 * 1000;\n\nconst PostSchema = new Schema(\n  {\n    body: String,\n    title: String,\n    description: String,\n    channel: { type: Boolean, default: false },\n    community: String,\n    communityId: { type: Schema.Types.ObjectId, ref: 'Community' },\n    tags: [{ type: String, ref: 'Tag' }],\n    category: { type: String, ref: 'Tag' },\n    repost: {\n      post: { type: Schema.Types.ObjectId, ref: 'Post' },\n      comment: { type: Schema.Types.ObjectId, ref: 'Post' },\n      commentBody: String\n    },\n    user: { type: Schema.Types.ObjectId, ref: 'User', index: true },\n    embeddedUser: {\n      _id: String,\n      handle: String,\n      name: String,\n      image: String\n    },\n\n    flagged: { type: Boolean, default: false },\n    flaggedBy: [{ type: String, ref: 'User', select: false }],\n    flaggedTime: Date,\n    mentions: [{ type: String, ref: 'User' }],\n\n    // store link info here\n    metaPost: { type: Schema.Types.ObjectId, ref: 'MetaPost' },\n    url: { type: String, unique: false },\n    inputUrl: { type: String, unique: false },\n    image: { type: String },\n\n    // TEMP Deprecate remove after migrate 0.20\n    link: { type: String, unique: false },\n\n    // Should be array of links used instead of metaPost\n    // TODO: Implement this\n    links: [\n      {\n        text: String,\n        href: String,\n        position: Number,\n        metaPost: { type: Schema.Types.ObjectId, ref: 'MetaPost' }\n      }\n    ],\n\n    // aboutLink: { type: Schema.Types.ObjectId, ref: 'Post' },\n    linkParent: { type: Schema.Types.ObjectId, ref: 'Post' },\n    // top-level comments have parent\n    parentPost: { type: Schema.Types.ObjectId, ref: 'Post' },\n    // replies have parent comment\n    parentComment: { type: Schema.Types.ObjectId, ref: 'Post' },\n\n    postDate: { type: Date, index: true },\n    latestComment: { type: Date, index: true },\n    commentCount: { type: Number, default: 0 },\n\n    // todo should be diff table - diff communities will have diff payouts\n\n    rank: { type: Number, default: 0 },\n    relevance: { type: Number, default: 0 },\n    pagerank: { type: Number, default: 0 },\n    upVotes: { type: Number, default: 0 },\n    downVotes: { type: Number, default: 0 },\n\n    paidOut: { type: Boolean, default: false },\n    payoutTime: { type: Date },\n\n    // TODO twitter stuff should go into data model\n    twitter: { type: Boolean, default: false },\n    // Use this to hide twitter posts\n    // TODO this should also go into a data model\n    // and data should be used to query community feed\n    hidden: { type: Boolean, default: false },\n    twitterUser: Number,\n    twitterId: Number,\n    twitterScore: { type: Number, default: 0 },\n    // feedRelevance: Number,\n    twitterUrl: String,\n    seenInFeedNumber: { type: Number, default: 0 },\n\n    // link, comment, repost, post\n    type: { type: String, default: 'post' },\n\n    version: { type: String, default: 'metaRework' }\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n);\n\nPostSchema.virtual('myVote', {\n  ref: 'Invest',\n  localField: '_id',\n  foreignField: 'post',\n  justOne: true\n});\n\nPostSchema.virtual('reposted', {\n  ref: 'Post',\n  localField: '_id',\n  foreignField: 'repost.post'\n});\n\nPostSchema.virtual('commentary', {\n  ref: 'Post',\n  localField: '_id',\n  foreignField: 'parentPost'\n});\n\nPostSchema.virtual('embeddedUser.relevance', {\n  ref: 'CommunityMember',\n  localField: 'user',\n  foreignField: 'user',\n  justOne: true\n});\n\nPostSchema.virtual('data', {\n  ref: 'PostData',\n  localField: '_id',\n  foreignField: 'post',\n  justOne: true\n});\n\nPostSchema.virtual('children', {\n  ref: 'Post',\n  localField: '_id',\n  foreignField: 'parentPost',\n  justOne: false\n});\n\nPostSchema.index({ twitter: 1 });\nPostSchema.index({ parentPost: 1, hidden: 1 });\nPostSchema.index({ parentPost: 1, pagerank: 1, hidden: 1 });\n\nPostSchema.index({ twitter: 1, twitterId: 1 });\n\nPostSchema.index({ rank: 1 });\nPostSchema.index({ postDate: -1 });\nPostSchema.index({ postDate: -1, community: 1 });\n\nPostSchema.index({ postDate: -1, communitId: 1, parentPost: 1 });\nPostSchema.index({ _id: 1, community: 1, user: 1 });\n\nPostSchema.index({ _id: 1, user: 1 });\nPostSchema.index({ _id: -1, communityId: 1, user: 1 });\n\nPostSchema.index({ communityId: 1, user: 1 });\nPostSchema.index({ postDate: -1, tags: 1 });\nPostSchema.index({ rank: 1, tags: 1 });\nPostSchema.index({ paidOut: 1, payoutTime: 1 });\n\nPostSchema.pre('save', async function save(next) {\n  try {\n    const countQuery = { parentPost: this._id, hidden: false };\n    this.commentCount = await this.model('Post').countDocuments(countQuery);\n    return next();\n  } catch (err) {\n    console.log('error updating post count', err); // eslint-disable-line\n    return next();\n  }\n});\n\nPostSchema.methods.addPostData = async function addPostData(postObject) {\n  const eligibleForReward = !this.parentPost && !this.twitter;\n  const now = new Date();\n  const data = new (this.model('PostData'))({\n    eligibleForReward,\n    hidden: this.hidden,\n    type: this.type,\n    parentPost: this.parentPost,\n    postDate: now, // if we are creating post data object date is new!\n    payoutTime: postObject ? postObject.payoutTime : this.payoutTime,\n    // payoutTime: this.payoutTime,\n    // postDate: this.postDate || this.createdAt,\n    post: this._id,\n    community: postObject ? postObject.community : this.community,\n    communityId: postObject ? postObject.communityId : this.communityId,\n    relevance: this.relevance,\n    rank: this.rank,\n    relevanceNeg: this.relevanceNeg,\n    latestComment: this.latestComment || this.postDate,\n    tags: this.tags\n  });\n\n  await data.save();\n  this.data = data;\n  return this;\n};\n\nPostSchema.methods.updateClient = function updateClient(user) {\n  if (this.user && this.user._id) this.user = this.user._id;\n  const post = this.toObject();\n  // Prevent over-writing post object\n  // TODO - normalize on client instead\n  if (post.parentPost && post.parentPost._id) {\n    post.parentPost = post.parentPost._id;\n  }\n  const postNote = {\n    _id: user ? user._id : null,\n    type: 'UPDATE_POST',\n    payload: post\n  };\n  socketEvent.emit('socketEvent', postNote);\n};\n\nPostSchema.methods.addUserInfo = async function addUserInfo(user) {\n  this.embeddedUser = {\n    id: user._id,\n    _id: user._id,\n    handle: user.handle,\n    name: user.name,\n    image: user.image\n  };\n\n  return this;\n};\n\nasync function updateLatestComment({ post, communityId }) {\n  if (post.parentPost) return post;\n\n  const latestComment = await post\n    .model('Post')\n    .findOne(\n      { parentPost: post._id, communityId, hidden: { $ne: true }, type: 'post' },\n      'postDate'\n    )\n    .sort({ postDate: -1 });\n\n  if (!latestComment) return post;\n\n  post.data.latestComment = latestComment.postDate;\n  post.latestComment = latestComment.postDate;\n\n  return post;\n}\n\n// TODO work on this\nPostSchema.methods.updateRank = async function updateRank({ communityId, updateTime }) {\n  let post = this;\n  try {\n    if (!post.data) {\n      post.data = await post.model('PostData').findOne({ post: post._id, communityId });\n    }\n    const { pagerank } = post.data;\n\n    if (updateTime && !post.parentPost) {\n      post = await updateLatestComment({ post, communityId });\n    }\n\n    // Don't use latestComment to compute post rank!\n    if (!post.data.postDate) post.data.postDate = post.postDate;\n    const { postDate } = post.data;\n\n    let rank =\n      pagerank < 0 ? 0 : postDate.getTime() / TENTH_LIFE + Math.log10(pagerank + 1);\n    rank = Math.round(rank * 1000) / 1000;\n\n    // But if a comment ranks highly - update post rank\n    const topComment = await post\n      .model('PostData')\n      .findOne({ parentPost: post._id, communityId }, 'rank pagerank')\n      .sort({ rank: -1 });\n\n    if (topComment) rank = Math.max(rank, topComment.rank);\n\n    post.data.rank = rank;\n\n    // TODO - deprecate this once we don't use this in the feed\n    // post.rank = rank;\n    // if (post.communityId && post.communityId.toString() === communityId.toString()) {\n    //   post.pagerank = post.data.pagerank;\n    //   // console.log('updating post pagerank', post.pagerank);\n    // }\n\n    await post.data.save();\n    await post.save();\n    return post;\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n    return post;\n  }\n};\n\nPostSchema.statics.newLinkPost = async function newLinkPost({ linkObject, postObject }) {\n  const {\n    tags,\n    postDate,\n    payoutTime,\n    hidden,\n    image,\n    title,\n    url,\n    communityId\n  } = postObject;\n\n  let post = await this.model('Post')\n    .findOne({ url, type: 'link' })\n    .populate({ path: 'data', match: { communityId } });\n\n  if (!post) {\n    const parentObj = {\n      image,\n      title,\n      description: linkObject.description,\n      url,\n      tags,\n      postDate,\n      payoutTime,\n      hidden,\n      type: 'link',\n      latestComment: postDate\n    };\n    post = await new (this.model('Post'))(parentObj);\n  }\n\n  const eligibleForReward = !post.parentPost && !post.twitter;\n\n  if (!post.data) {\n    post = await post.addPostData(postObject);\n  } else if (!post.data.eligibleForReward && eligibleForReward) {\n    post.data.eligibleForReward = eligibleForReward;\n    post.data.postDate = postDate;\n    post.data.payoutTime = payoutTime;\n  }\n\n  const combinedTags = [...new Set([...(post.tags || []), ...(tags || [])])];\n  post.tags = combinedTags;\n  post.data.tags = combinedTags;\n  linkObject.tags = combinedTags;\n\n  // TODO figure out what to do with payoutTime should old post reset?\n  // for now we don't update payout time\n  if (!hidden && post.latestComment < postDate) {\n    post.latestComment = postDate;\n    post.data.latestComment = postDate;\n  }\n\n  if (!hidden) await post.updateRank({ communityId });\n\n  post = await post.upsertMetaPost(post.metaPost, linkObject);\n  post.data = await post.data.save();\n  post = await post.save();\n\n  return post;\n};\n\nPostSchema.methods.upsertLinkParent = async function upsertLinkParent(linkObject) {\n  const post = this;\n\n  const parent = await this.model('Post').newLinkPost({ postObject: post, linkObject });\n  parent.commentCount++;\n\n  post.linkParent = parent;\n  post.parentPost = parent;\n  if (post.data) post.data.parentPost = parent;\n  post.metaPost = parent.metaPost;\n\n  return post;\n};\n\nPostSchema.methods.insertIntoFeed = async function insertIntoFeed(\n  communityId,\n  community\n) {\n  try {\n    const post = this;\n    if (post.parentPost) throw new Error(\"Child comments don't go in the feed\");\n\n    post.data = await this.model('PostData').findOneAndUpdate(\n      { post: post._id, communityId },\n      { isInFeed: true },\n      { new: true }\n    );\n\n    // this.model('CommunityFeed').addToFeed(post, post.data.community);\n\n    const newPostEvent = {\n      type: 'SET_NEW_POSTS_STATUS',\n      payload: { communityId, community }\n    };\n    socketEvent.emit('socketEvent', newPostEvent);\n    return post;\n  } catch (err) {\n    return console.log('insertIntoFeed error', err); // eslint-disable-line\n  }\n};\n\nPostSchema.methods.upsertMetaPost = async function upsertMetaPost(metaId, linkObject) {\n  try {\n    const MetaPost = this.model('MetaPost');\n    let meta;\n    if (metaId) {\n      const _id = metaId._id || metaId;\n      if (_id) meta = await MetaPost.findOne({ _id });\n    }\n    const url = linkObject ? linkObject.url : this.url || this.link;\n    if (url && !meta) meta = await MetaPost.findOne({ url });\n\n    if (!meta) meta = new MetaPost(linkObject);\n    else meta.set(linkObject);\n    meta = await meta.save();\n\n    this.metaPost = meta;\n    return this.save();\n  } catch (err) {\n    console.log('upsertMetaPost error', err); // eslint-disable-line\n    return this;\n  }\n};\n\n// PostSchema.statics.sendOutInvestInfo = async function sendOutInvestInfo(postIds, userId) {\n//   try {\n//     const investments = await this.model('Invest').find({\n//       investor: userId,\n//       post: { $in: postIds }\n//     });\n//     const updatePosts = {\n//       _id: userId,\n//       type: 'UPDATE_POST_INVESTMENTS',\n//       payload: investments\n//     };\n//     socketEvent.emit('socketEvent', updatePosts);\n//   } catch (err) {\n//     console.log('sendOutInvestInfo error', err); // eslint-disable-line\n//   }\n// };\n\nasync function getPostData({ post, communityId }) {\n  if (!post.data) {\n    post.data = await this.model('PostData').findOne({ post: post._id, communityId });\n  }\n  return post;\n}\n\nPostSchema.methods.addTags = async function addTags({ tags, communityId }) {\n  try {\n    let post = this;\n    post = await getPostData({ post, communityId });\n\n    const combinedTags = [...new Set([...(post.tags || []), ...(tags || [])])];\n    post.tags = combinedTags;\n    post.data.tags = combinedTags;\n    await post.data.save();\n    // linkObject.tags = combinedTags;\n    return post.save();\n  } catch (err) {\n    return console.log('error adding tags', err); // eslint-disable-line\n  }\n};\n\nPostSchema.statics.sendOutMentions = async function sendOutMentions(\n  mentions,\n  post,\n  mUser,\n  comment\n) {\n  try {\n    let textParent = comment || post;\n    const promises = mentions.map(async mention => {\n      const type = comment ? 'comment' : 'post';\n\n      mUser = await this.model('User').findOne(\n        { _id: mUser._id || mUser },\n        'blockedBy blocked name role'\n      );\n\n      const blocked =\n        mUser.blockedBy.find(u => u === mention) ||\n        mUser.blocked.find(u => u === mention);\n\n      if (blocked) textParent.mentions = textParent.mentions.filter(m => m !== blocked);\n\n      let query = { handle: mention };\n\n      let group;\n      if (mention === 'everyone') {\n        if (mUser.role !== 'admin') return null;\n        query = {}; // TODO should this this as community\n        group = ['everyone'];\n        createMentionNotification({\n          post,\n          user: { _id: null },\n          mUser,\n          type,\n          Notification: this.model('Notification'),\n          group,\n          mention\n        });\n      }\n\n      const users = await this.model('User').find(\n        query,\n        'deviceTokens email name notificationSettings'\n      );\n\n      users.forEach(async user => {\n        const action = ' mentioned you in a ' + type;\n        let alert = (mUser.name || mUser) + action;\n        if (mention === 'everyone' && post.body) alert = post.body;\n        // TODO batch notifications & emails\n\n        const payload = {\n          fromUser: mUser,\n          toUser: user,\n          post,\n          action,\n          noteType: 'mention'\n        };\n\n        sendNotification(user, alert, payload);\n\n        if (mention === 'everyone') return;\n\n        createMentionNotification({\n          post,\n          user,\n          mUser,\n          type,\n          Notification: this.model('Notification'),\n          group,\n          mention\n        });\n      });\n      return null;\n    });\n\n    await Promise.all(promises);\n    textParent = await textParent.save();\n    textParent.updateClient();\n    return textParent;\n  } catch (err) {\n    return console.log('sendOutMentions error', err); // eslint-disable-line\n  }\n};\n\nasync function createMentionNotification({\n  post,\n  user,\n  mUser,\n  type,\n  Notification,\n  group,\n  mention\n}) {\n  const dbNotificationObj = {\n    post: post._id,\n    forUser: user._id,\n    group,\n    byUser: mUser._id || mUser,\n    amount: null,\n    type: type + 'Mention',\n    personal: true,\n    read: false\n  };\n\n  const newDbNotification = new Notification(dbNotificationObj);\n  const note = await newDbNotification.save();\n\n  const newNotifObj = {\n    _id: group ? null : mention,\n    type: 'ADD_ACTIVITY',\n    payload: note\n  };\n\n  socketEvent.emit('socketEvent', newNotifObj);\n}\n\n// pruneFeed (only for link posts)\nPostSchema.methods.pruneFeed = async function pruneFeed({ communityId }) {\n  const post = this;\n\n  if (!post.data) {\n    post.data = await this.model('PostData').findOne({ post: post._id, communityId });\n  }\n  const { shares } = post.data;\n\n  if (post.type !== 'link') throw new Error('Should not prune anything but links');\n  if (!communityId) throw new Error('missing community');\n\n  // Thread has no children - remove everything\n  const children = await this.model('Post').countDocuments({ parentPost: post._id });\n\n  // there is no way to remove post link\n  // maybe we shouldn't 'invest in links automatically'?\n  if (!children && !shares) {\n    await post.remove();\n    return null;\n  }\n\n  const communityChildren = await this.model('Post').countDocuments({\n    communityId,\n    parentPost: post._id\n  });\n\n  if (communityChildren || shares) return post;\n\n  await this.model('PostData')\n    .deleteOne({ post: post._id, communityId })\n    .exec();\n\n  return post;\n};\n\nasync function updateParentPostOnRemovingChild(post) {\n  const { communityId } = post;\n\n  if (!communityId) {\n    throw new Error('error missing post community id!', post.toObject());\n  }\n  let parent = await post\n    .model('Post')\n    .findOne({ _id: post.linkParent })\n    .populate({ path: 'data', match: { communityId } });\n\n  if (parent) parent = await parent.pruneFeed({ communityId });\n\n  if (!parent) return null;\n  if (post.hidden) return parent;\n\n  // parent.data = await post.model('PostData').findOne({ post: parent._id, communityId });\n  if (!post.data) {\n    post.data = await post.model('PostData').findOne({ post: post._id, communityId });\n  }\n\n  if (!post.data || !parent.data) throw new Error('missing post data');\n\n  // TODO maybe always update the time?\n  const shouldUpdateTime = post.postDate === parent.data.latestComment;\n  const shouldUpdateRank = post.data.rank >= parent.data.rank;\n\n  if (shouldUpdateRank || shouldUpdateTime) {\n    parent = await parent.updateRank({ communityId, shouldUpdateTime });\n  }\n  return parent;\n}\n\n// TODO we should replace post with a dummy post if post has\n// comments or replies so we can preserver\nPostSchema.post('remove', async function postRemove(post, next) {\n  if (post.linkParent && post.type !== 'comment') {\n    await updateParentPostOnRemovingChild(post);\n  }\n\n  // await this.model('CommunityFeed').removeFromAllFeeds(doc);\n  const note = this.model('Notification')\n    .deleteMany({ post: post._id })\n    .exec();\n  const feed = this.model('Feed')\n    .deleteMany({ post: post._id })\n    .exec();\n  const data = this.model('PostData')\n    .deleteMany({ post: post._id })\n    .exec();\n\n  let metaPost;\n  // if (post.type === 'link' && !post.parentParent) {\n  //   metaPost = await this.model('MetaPost')\n  //   .deleteMany({ post: post._id })\n  //   .exec();\n  // }\n\n  let commentNote;\n  // remove notifications\n  if (post.type === 'comment' || post.type === 'repost') {\n    commentNote = this.model('Notification')\n      .deleteMany({ comment: post._id })\n      .exec();\n  }\n\n  await Promise.all([note, feed, data, metaPost, commentNote]);\n  return next();\n});\n\nPostSchema.methods.incrementUnread = async function incrementUnread({\n  communityId,\n  community\n}) {\n  await this.model('CommunityMember').updateMany(\n    { communityId },\n    { $inc: { unread: 1 } }\n  );\n  pubsub.publish(UPDATE_UNREAD, { community, communityId: communityId.toString() });\n};\n\nmodule.exports = mongoose.model('Post', PostSchema);\n"],"file":"post.model.js"}