{"version":3,"sources":["../../../src/api/post/postData.model.js"],"names":["mongoose","require","Schema","PostDataSchema","post","type","Types","ObjectId","ref","community","String","communityId","eligibleForReward","Boolean","default","rank","Number","relevance","pagerank","pagerankRaw","pagerankRawNeg","relevanceNeg","upVotes","downVotes","postDate","Date","index","latestComment","paidOut","payoutTime","payout","payOutShare","expectedPayout","shares","balance","totalShares","latestTweet","isInFeed","repost","parentPost","parentComment","hidden","tags","needsRankUpdate","timestamps","module","exports","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\n\nconst { Schema } = mongoose;\n\n// TODO USE THIS\nconst PostDataSchema = new Schema(\n  {\n    post: { type: Schema.Types.ObjectId, ref: 'Post' },\n    community: String,\n    communityId: { type: Schema.Types.ObjectId, ref: 'Community' },\n\n    eligibleForReward: { type: Boolean, default: false },\n\n    rank: { type: Number, default: 0 },\n    relevance: { type: Number, default: 0 },\n    pagerank: { type: Number, default: 0 },\n    pagerankRaw: { type: Number, default: 0 },\n    pagerankRawNeg: { type: Number, default: 0 },\n\n    relevanceNeg: { type: Number, default: 0 },\n\n    // should we track community comments separately?\n    // commentCount: { type: Number, default: 0 },\n    upVotes: { type: Number, default: 0 },\n    downVotes: { type: Number, default: 0 },\n\n    postDate: { type: Date, index: true },\n    latestComment: { type: Date, index: true },\n\n    paidOut: { type: Boolean, default: false },\n    payoutTime: { type: Date },\n    payout: { type: Number, default: 0 },\n    payOutShare: { type: Number, default: 0 },\n    expectedPayout: { type: Number, default: 0 },\n\n    shares: { type: Number, default: 0 },\n    balance: { type: Number, default: 0 },\n    totalShares: { type: Number, default: 0 }, // track positive and negative here\n\n    latestTweet: { type: Date },\n\n    // NEW\n    isInFeed: { type: Boolean, default: false },\n    repost: { type: Boolean, default: false },\n    type: { type: String, default: 'post' },\n    parentPost: { type: Schema.Types.ObjectId, ref: 'Post' },\n    parentComment: { type: Schema.Types.ObjectId, ref: 'Post' },\n    hidden: { type: Boolean, default: false },\n    tags: [String],\n    needsRankUpdate: Boolean\n  },\n  {\n    timestamps: true\n  }\n);\n\nPostDataSchema.index({ post: 1 });\nPostDataSchema.index({ post: 1, community: 1 });\nPostDataSchema.index({ post: 1, communityId: 1 });\nPostDataSchema.index({ isInFeed: 1 });\n\nPostDataSchema.index({ latestComment: -1, community: 1 });\nPostDataSchema.index({ isInFeed: 1, community: 1, latestComment: -1 });\nPostDataSchema.index({ isInFeed: 1, community: 1, rank: -1 });\n\nPostDataSchema.index({ isInFeed: 1, communityId: 1, rank: -1 });\nPostDataSchema.index({ isInFeed: 1, communityId: 1, latestComment: -1 });\n\nPostDataSchema.index({ post: 1, communityId: 1 });\nPostDataSchema.index({ parentPost: 1, communityId: 1 });\nPostDataSchema.index({ isInFeed: 1, communityId: 1, rank: 1 });\n\nmodule.exports = mongoose.model('PostData', PostDataSchema);\n"],"file":"postData.model.js"}