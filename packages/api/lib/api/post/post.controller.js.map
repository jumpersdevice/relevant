{"version":3,"sources":["../../../src/api/post/post.controller.js"],"names":["promisify","require","requestAsync","request","defaults","maxRedirects","jar","findRelatedPosts","metaId","post","MetaPost","findOne","_id","populate","tagsArr","tags","filter","t","category","map","join","keywords","search","title","replace","posts","find","$text","$search","$ne","score","$meta","sort","limit","err","Error","exports","flagged","req","res","next","community","skip","query","Post","path","match","repost","$exists","$or","hidden","select","parseInt","status","json","topPosts","now","Date","setDate","getDate","PostData","createdAt","$gt","isInFeed","d","toObject","data","sendPostNotification","body","users","User","alert","user","finished","payload","fromUser","toUser","action","noteType","console","log","Notification","createNotification","forUser","byUser","type","Promise","all","success","sendFlagEmail","flaggedUrl","process","env","API_SERVER","from","to","subject","html","flag","userId","postId","findOneAndUpdate","$addToSet","flaggedBy","flaggedTime","new","metaPost","userPosts","cObj","Community","slug","communityId","blocked","blockedBy","author","handle","params","id","sortQuery","u","equals","myVote","investor","preview","urlParts","url","parse","previewUrl","decodeURIComponent","result","previewDataAsync","noReadability","getHeader","uri","fbHeader","relevantHeader","noFb","queryUrl","_url","response","gzip","headers","rejectUnauthorized","timeout","pool","maxSockets","agent","href","processed","proxyHelpers","generatePreview","redirect","resolve","substring","lastIndexOf","domain","extractDomain","readable","article","getReadable","send","content","index","$nin","related","update","communityMember","tag","trim","mentions","newMentions","newTags","newPost","linkObject","prevMentions","prevTags","m","indexOf","link","description","image","articleAuthor","shortText","categories","upsertLinkParent","oldLinkParent","linkParent","pruneFeed","parentPost","length","originalTags","Set","save","pTags","Tag","updateOne","parents","$inc","count","upsert","exec","sendOutMentions","name","embeddedUser","processSubscriptions","subscribers","Subscriptiton","following","promises","subscription","follower","updateFeed","amount","remove","Math","max","feed","Feed","lastFeedNotification","unread","read","$gte","n","updateMany","multi","number","newFeedPost","socketEvent","emit","error","create","banned","channel","postUrl","inputUrl","hasChildComment","payoutTime","getTime","PAYOUT_TIME","NODE_ENV","push","forEach","postObject","relevance","postDate","postString","JSON","stringify","newLinkPost","insertIntoFeed","addPostData","addUserInfo","incrementUnread","updatePostCount","role","newPostEvent","notMe"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,MAAD,CAA7B;;AAEA,IAAMC,YAAY,GAAGF,SAAS,CAACG,gBAAD,CAA9B;;AACAA,iBAAQC,QAAR,CAAiB;AAAEC,EAAAA,YAAY,EAAE,EAAhB;AAAoBC,EAAAA,GAAG,EAAE;AAAzB,CAAjB;;SAEeC,gB;;;;;sDAAf,WAAgCC,MAAhC,EAAwC;AACtC,QAAI;AACF,UAAMC,IAAI,SAASC,cAASC,OAAT,CAAiB;AAAEC,QAAAA,GAAG,EAAEJ;AAAP,OAAjB,EAAkCK,QAAlC,CAA2C,MAA3C,CAAnB;AACA,UAAMC,OAAO,GAAGL,IAAI,CAACM,IAAL,CAAUC,MAAV,CAAiBC,CAAC,IAAI,CAACA,CAAC,CAACC,QAAzB,EAAmCC,GAAnC,CAAuCF,CAAC,IAAIA,CAAC,CAACL,GAA9C,CAAhB;AACA,UAAMG,IAAI,GAAGD,OAAO,CAACM,IAAR,CAAa,GAAb,CAAb;AACA,UAAMC,QAAQ,GAAGZ,IAAI,CAACY,QAAL,CAAcD,IAAd,CAAmB,GAAnB,CAAjB;AACA,UAAME,MAAM,GAAG,UAAGP,IAAH,cAAWM,QAAX,cAAuBZ,IAAI,CAACc,KAA5B,EAAoCC,OAApC,CAA4C,MAA5C,EAAoD,EAApD,CAAf;AAEA,UAAMC,KAAK,SAASf,cAASgB,IAAT,CAClB;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAEN;AAAX,SAAT;AAA8BV,QAAAA,GAAG,EAAE;AAAEiB,UAAAA,GAAG,EAAErB;AAAP;AAAnC,OADkB,EAElB;AAAEsB,QAAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAT,OAFkB,EAIjBC,IAJiB,CAIZ;AAAEF,QAAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAT,OAJY,EAKjBE,KALiB,CAKX,CALW,CAApB;AAMA,aAAOR,KAAP;AACD,KAdD,CAcE,OAAOS,GAAP,EAAY;AACZ,YAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,G;;;;AAEDE,OAAO,CAACC,OAAR;AAAA,6CAAkB,WAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC1C,QAAI;AACF,UAAM;AAAEC,QAAAA,SAAF;AAAaR,QAAAA,KAAb;AAAoBS,QAAAA;AAApB,UAA6BJ,GAAG,CAACK,KAAvC;AAEA,UAAMlB,KAAK,SAASmB,cAAKlB,IAAL,CAAU;AAAEW,QAAAA,OAAO,EAAE;AAAX,OAAV,EACjBxB,QADiB,CACR,CACR;AACEgC,QAAAA,IAAI,EAAE;AADR,OADQ,EAIR;AACEA,QAAAA,IAAI,EAAE,YADR;AAEEhC,QAAAA,QAAQ,EAAE;AAFZ,OAJQ,EAQR;AACEgC,QAAAA,IAAI,EAAE,MADR;AAEEhC,QAAAA,QAAQ,EAAE,CACR;AACEgC,UAAAA,IAAI,EAAE,YADR;AAEEC,UAAAA,KAAK,EAAE;AACLC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX,aADH;AAELC,YAAAA,GAAG,EAAE,CAAC;AAAEC,cAAAA,MAAM,EAAE;AAAErB,gBAAAA,GAAG,EAAE;AAAP;AAAV,aAAD;AAFA;AAFT,SADQ,EAQR;AACEgB,UAAAA,IAAI,EAAE,wBADR;AAEEC,UAAAA,KAAK,EAAE;AAAEL,YAAAA;AAAF,WAFT;AAGEU,UAAAA,MAAM,EAAE;AAHV,SARQ;AAFZ,OARQ,CADQ,EA2BjBT,IA3BiB,CA2BZU,QAAQ,CAACV,IAAD,EAAO,EAAP,CA3BI,EA4BjBT,KA5BiB,CA4BXmB,QAAQ,CAACnB,KAAD,EAAQ,EAAR,CA5BG,EA6BjBD,IA7BiB,CA6BZ,YA7BY,CAApB;AA+BAO,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB7B,KAArB;AACD,KAnCD,CAmCE,OAAOS,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GAvCD;;AAAA;AAAA;AAAA;AAAA;;AAyCAE,OAAO,CAACmB,QAAR;AAAA,8CAAmB,WAAOjB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC3C,QAAI;AACF,UAAIf,KAAJ;AACA,UAAM+B,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,OAAJ,CAAYF,GAAG,CAACG,OAAJ,KAAgB,CAA5B;AACAlC,MAAAA,KAAK,SAASmC,kBAASlC,IAAT,CAAc;AAAEmC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEN;AAAP,SAAb;AAA2BO,QAAAA,QAAQ,EAAE;AAArC,OAAd,EACXlD,QADW,CACF;AACRgC,QAAAA,IAAI,EAAE,MADE;AAERhC,QAAAA,QAAQ,EAAE,CAAC;AAAEgC,UAAAA,IAAI,EAAE;AAAR,SAAD;AAFF,OADE,EAKXb,IALW,CAKN,WALM,EAMXC,KANW,CAML,EANK,CAAd,CAJE,CAYF;;AACAR,MAAAA,KAAK,GAAGA,KAAK,CAACT,MAAN,CAAagD,CAAC,IAAIA,CAAC,CAACvD,IAApB,CAAR;AACAgB,MAAAA,KAAK,GAAGA,KAAK,CAACN,GAAN,CAAU6C,CAAC,oCACdA,CAAC,CAACvD,IAAF,CAAOwD,QAAP,EADc;AAEjBC,QAAAA,IAAI,kCAAOF,CAAC,CAACC,QAAF,EAAP;AAAqBxD,UAAAA,IAAI,EAAE,kBAAIuD,CAAJ,EAAO,UAAP;AAA3B;AAFa,QAAX,CAAR;AAIAzB,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB7B,KAArB;AACD,KAnBD,CAmBE,OAAOS,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GAvBD;;AAAA;AAAA;AAAA;AAAA;;AAyBAE,OAAO,CAAC+B,oBAAR;AAAA,8CAA+B,WAAO7B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACvD;AACA,QAAI;AACF,UAAM/B,IAAI,GAAG6B,GAAG,CAAC8B,IAAjB;AACA,UAAMC,KAAK,SAASC,cAAK5C,IAAL,CAAU,EAAV,CAApB;AAEA,UAAM6C,KAAK,2DAAoD9D,IAAI,CAAC+D,IAAzD,eAAkE/D,IAAI,CAACc,KAAvE,CAAX,CAJE,CAMF;;AACA,UAAMkD,QAAQ,GAAGJ,KAAK,CAAClD,GAAN;AAAA,oDAAU,WAAMqD,IAAN,EAAc;AACvC,cAAI;AACF,gBAAME,OAAO,GAAG;AACdC,cAAAA,QAAQ,EAAE,IADI;AAEdC,cAAAA,MAAM,EAAEJ,IAFM;AAGd/D,cAAAA,IAHc;AAIdoE,cAAAA,MAAM,EAAEN,KAJM;AAKdO,cAAAA,QAAQ,EAAE;AALI,aAAhB;AAOA,kBAAM,qCAAiBN,IAAjB,EAAuBD,KAAvB,EAA8BG,OAA9B,CAAN;AACD,WATD,CASE,OAAOxC,GAAP,EAAY;AACZ;AACA6C,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C9C,GAA5C;AACD;;AACD,iBAAO+C,sBAAaC,kBAAb,CAAgC;AACrCzE,YAAAA,IAAI,EAAEA,IAAI,CAACG,GAD0B;AAErCuE,YAAAA,OAAO,EAAEX,IAAI,CAAC5D,GAFuB;AAGrCwE,YAAAA,MAAM,EAAE3E,IAAI,CAAC+D,IAHwB;AAIrCa,YAAAA,IAAI,EAAE;AAJ+B,WAAhC,CAAP;AAMD,SApBgB;;AAAA;AAAA;AAAA;AAAA,UAAjB;AAqBA,YAAMC,OAAO,CAACC,GAAR,CAAYd,QAAZ,CAAN;AACAlC,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEkC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD,KA9BD,CA8BE,OAAOtD,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GAnCD;;AAAA;AAAA;AAAA;AAAA;;SAqCeuD,a;;;;;mDAAf,aAA+B;AAC7B,QAAMC,UAAU,aAAMC,OAAO,CAACC,GAAR,CAAYC,UAAlB,mBAAhB;AACA,QAAM3B,IAAI,GAAG;AACX4B,MAAAA,IAAI,EAAE,oCADK;AAEXC,MAAAA,EAAE,EAAE,yBAFO;AAGXC,MAAAA,OAAO,EAAE,sBAHE;AAIXC,MAAAA,IAAI,gKAISP,UAJT,kCAIwCA,UAJxC;AAJO,KAAb;AAYA,WAAO,qBAAUxB,IAAV,CAAP;AACD,G;;;;AAED9B,OAAO,CAAC8D,IAAR;AAAA,8CAAe,WAAO5D,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACvC,QAAI;AACF,UAAM2D,MAAM,GAAG7D,GAAG,CAACkC,IAAJ,CAAS5D,GAAxB;AACA,UAAM;AAAEwF,QAAAA;AAAF,UAAa9D,GAAG,CAAC8B,IAAvB;AACA,UAAM3D,IAAI,SAASmC,cAAKyD,gBAAL,CACjB;AAAEzF,QAAAA,GAAG,EAAEwF;AAAP,OADiB,EAEjB;AAAE/D,QAAAA,OAAO,EAAE,IAAX;AAAiBiE,QAAAA,SAAS,EAAE;AAAEC,UAAAA,SAAS,EAAEJ;AAAb,SAA5B;AAAmDK,QAAAA,WAAW,EAAE/C,IAAI,CAACD,GAAL;AAAhE,OAFiB,EAGjB;AAAEiD,QAAAA,GAAG,EAAE;AAAP,OAHiB,CAAnB;AAKA,YAAM/F,cAAS2F,gBAAT,CACJ;AAAEzF,QAAAA,GAAG,EAAEH,IAAI,CAACiG;AAAZ,OADI,EAEJ;AAAErE,QAAAA,OAAO,EAAE,IAAX;AAAiBiE,QAAAA,SAAS,EAAE;AAAEC,UAAAA,SAAS,EAAEJ;AAAb,SAA5B;AAAmDK,QAAAA,WAAW,EAAE/C,IAAI,CAACD,GAAL;AAAhE,OAFI,EAGJ;AAAEiD,QAAAA,GAAG,EAAE;AAAP,OAHI,CAAN;AAKA,YAAMhB,aAAa,EAAnB;AACAlD,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB7C,IAArB;AACD,KAfD,CAeE,OAAOyB,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GAnBD;;AAAA;AAAA;AAAA;AAAA;;AAqBAE,OAAO,CAACuE,SAAR;AAAA,8CAAoB,WAAOrE,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC5C,QAAI;AACF,UAAM;AAAEC,QAAAA;AAAF,UAAgBH,GAAG,CAACK,KAA1B;AAEA,UAAMiE,IAAI,SAASC,mBAAUlG,OAAV,CAAkB;AAAEmG,QAAAA,IAAI,EAAErE;AAAR,OAAlB,EAAuC,KAAvC,CAAnB;AACA,UAAI,CAACmE,IAAL,EAAW,OAAOrE,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAAP;AACX,UAAMyD,WAAW,GAAGH,IAAI,CAAChG,GAAzB;AAEA,UAAM;AAAE4D,QAAAA;AAAF,UAAWlC,GAAjB;AACA,UAAM0E,OAAO,GAAGxC,IAAI,GAAG,CAAC,GAAGA,IAAI,CAACwC,OAAT,EAAkB,GAAGxC,IAAI,CAACyC,SAA1B,CAAH,GAA0C,EAA9D;AAEA,UAAMhF,KAAK,GAAGmB,QAAQ,CAACd,GAAG,CAACK,KAAJ,CAAUV,KAAX,EAAkB,EAAlB,CAAtB;AACA,UAAMS,IAAI,GAAGU,QAAQ,CAACd,GAAG,CAACK,KAAJ,CAAUD,IAAX,EAAiB,EAAjB,CAArB;AAEA,UAAMwE,MAAM,SAAS5C,cAAK3D,OAAL,CAAa;AAAEwG,QAAAA,MAAM,EAAE7E,GAAG,CAAC8E,MAAJ,CAAWC;AAArB,OAAb,EAAwC,KAAxC,CAArB;AACA,UAAI,CAACH,MAAL,EAAa,MAAM,IAAI/E,KAAJ,CAAU,cAAV,CAAN;AAEb,UAAMmF,SAAS,GAAG;AAAE1G,QAAAA,GAAG,EAAE,CAAC;AAAR,OAAlB;AACA,UAAM+B,KAAK,GAAG;AAAE6B,QAAAA,IAAI,EAAE0C,MAAM,CAACtG,GAAf;AAAoBmG,QAAAA;AAApB,OAAd;;AAEA,UAAIC,OAAO,CAACtF,IAAR,CAAa6F,CAAC,IAAIL,MAAM,CAACtG,GAAP,CAAW4G,MAAX,CAAkBD,CAAlB,CAAlB,CAAJ,EAA6C;AAC3C,eAAOhF,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAAP;AACD;;AAED,UAAMmE,MAAM,GAAGjD,IAAI,GACf,CACE;AACE3B,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,KAAK,EAAE;AAAE4E,UAAAA,QAAQ,EAAElD,IAAI,CAAC5D,GAAjB;AAAsBmG,UAAAA;AAAtB;AAFT,OADF,CADe,GAOf,EAPJ;AASA,UAAMtF,KAAK,SAASmB,cAAKlB,IAAL,CAAUiB,KAAV,EACjB9B,QADiB,CACR;AACRgC,QAAAA,IAAI,EAAE,aADE;AAERhC,QAAAA,QAAQ,EAAE,CACR;AACEgC,UAAAA,IAAI,EAAE,wBADR;AAEEM,UAAAA,MAAM,EAAE,UAFV;AAGEL,UAAAA,KAAK,EAAE;AAAEiE,YAAAA;AAAF;AAHT,SADQ,EAMR;AACElE,UAAAA,IAAI,EAAE;AADR,SANQ,EASR;AACEA,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,KAAK,EAAE;AAAEiE,YAAAA;AAAF;AAFT,SATQ;AAFF,OADQ,EAkBjBlG,QAlBiB,CAkBR;AACRgC,QAAAA,IAAI,EAAE,YADE;AAERhC,QAAAA,QAAQ,EAAE,CACR;AACEgC,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,KAAK,EAAE;AAAEiE,YAAAA;AAAF;AAFT,SADQ,EAKR;AAAElE,UAAAA,IAAI,EAAE;AAAR,SALQ,EAMR,GAAG4E,MANK;AAFF,OAlBQ,EA6BjB5G,QA7BiB,CA6BR;AACRgC,QAAAA,IAAI,EAAE,eADE;AAERhC,QAAAA,QAAQ,EAAE,CACR;AACEgC,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,KAAK,EAAE;AAAEiE,YAAAA;AAAF;AAFT,SADQ,EAKR;AAAElE,UAAAA,IAAI,EAAE;AAAR,SALQ,EAMR,GAAG4E,MANK;AAFF,OA7BQ,EAwCjB5G,QAxCiB,CAwCR;AAAEgC,QAAAA,IAAI,EAAE;AAAR,OAxCQ,EAyCjBhC,QAzCiB,CAyCR;AACRgC,QAAAA,IAAI,EAAE,wBADE;AAERM,QAAAA,MAAM,EAAE,UAFA;AAGRL,QAAAA,KAAK,EAAE;AAAEiE,UAAAA;AAAF;AAHC,OAzCQ,EA8CjBlG,QA9CiB,CA8CR,CACR;AACEgC,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,KAAK,EAAE;AAAEiE,UAAAA;AAAF;AAFT,OADQ,EAKR,GAAGU,MALK,CA9CQ,EAqDjBxF,KArDiB,CAqDXA,KArDW,EAsDjBS,IAtDiB,CAsDZA,IAtDY,EAuDjBV,IAvDiB,CAuDZsF,SAvDY,CAApB;AAyDA,aAAO/E,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB7B,KAArB,CAAP;AACD,KA1FD,CA0FE,OAAOS,GAAP,EAAY;AACZ,aAAOM,IAAI,CAACN,GAAD,CAAX;AACD;AACF,GA9FD;;AAAA;AAAA;AAAA;AAAA;;AAgGAE,OAAO,CAACuF,OAAR;AAAA,8CAAkB,WAAOrF,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC1C,QAAI;AACF,UAAMoF,QAAQ,GAAGC,cAAIC,KAAJ,CAAUxF,GAAG,CAACuF,GAAd,EAAmB,KAAnB,CAAjB;;AACA,UAAM;AAAElF,QAAAA;AAAF,UAAYiF,QAAlB;AACA,UAAMG,UAAU,GAAGC,kBAAkB,CAACrF,KAAK,CAACnB,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAD,CAArC;AACA,UAAMyG,MAAM,SAAS7F,OAAO,CAAC8F,gBAAR,CAAyBH,UAAzB,CAArB;AACAxF,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB2E,MAArB;AACD,KAND,CAME,OAAO/F,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GAVD;;AAAA;AAAA;AAAA;AAAA;;AAYAE,OAAO,CAAC8F,gBAAR;AAAA,8CAA2B,WAAOH,UAAP,EAAmBI,aAAnB,EAAqC;AAC9D,QAAI,CAACJ,UAAU,CAACjF,KAAX,CAAiB,YAAjB,CAAD,IAAmC,CAACiF,UAAU,CAACjF,KAAX,CAAiB,aAAjB,CAAxC,EAAyE;AACvEiF,MAAAA,UAAU,GAAG,YAAYA,UAAzB;AACD;;AAED,aAASK,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,UAAMC,QAAQ,GAAG;AACf,sBACE;AAFa,OAAjB;AAIA,UAAMC,cAAc,GAAG;AACrB,sBACE;AAFmB,OAAvB;AAIA,UAAMC,IAAI,GACRH,GAAG,CAACvF,KAAJ,CAAU,YAAV,KACAuF,GAAG,CAACvF,KAAJ,CAAU,eAAV,CADA,IAEAuF,GAAG,CAACvF,KAAJ,CAAU,oBAAV,CAHF;AAKA,UAAI0F,IAAJ,EAAU,OAAOD,cAAP;AACV,aAAOD,QAAP;AACD,KArB6D,CAuB9D;;;AAvB8D,aAwB/CG,QAxB+C;AAAA;AAAA,MAqD9D;;;AArD8D;AAAA,kDAwB9D,WAAwBC,IAAxB,EAA8B;AAC5B,YAAMC,QAAQ,SAASzI,YAAY,CAAC;AAClC2H,UAAAA,GAAG,EAAEa,IAD6B;AAElCrI,UAAAA,YAAY,EAAE,EAFoB;AAGlCC,UAAAA,GAAG,EAAE,IAH6B;AAIlCsI,UAAAA,IAAI,EAAE,IAJ4B;AAKlCC,UAAAA,OAAO,EAAET,SAAS,CAACM,IAAD,CALgB;AAMlCI,UAAAA,kBAAkB,EAAE,KANc;AAOlCC,UAAAA,OAAO,EAAE,KAPyB;AAQlCC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,UAAU,EAAE;AAAd,WAR4B;AASlCC,UAAAA,KAAK,EAAE;AAT2B,SAAD,CAAnC;AAYA,YAAIb,GAAG,GAAGM,QAAQ,CAACxI,OAAT,CAAiBkI,GAAjB,CAAqBc,IAA/B;AACA,YAAMC,SAAS,SAASC,YAAY,CAACC,eAAb,CACtBX,QAAQ,CAACvE,IADa,EAEtBiE,GAFsB,EAGtBK,IAHsB,EAItBP,aAJsB,CAAxB;;AAOA,YAAIiB,SAAS,CAACG,QAAV,IAAsBH,SAAS,CAACf,GAApC,EAAyC;AACvCtD,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBoE,SAAS,CAACf,GAAnC,EADuC,CACE;;AACzCA,UAAAA,GAAG,GAAGe,SAAS,CAACf,GAAhB;AACA,iBAAOI,QAAQ,CAACJ,GAAD,CAAf;AACD;;AACD,eAAO/C,OAAO,CAACkE,OAAR,CAAgBJ,SAAS,CAACnB,MAA1B,CAAP;AACD,OAnD6D;AAAA;AAAA;;AAsD9D,QAAIF,UAAU,CAACjF,KAAX,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B,aAAO;AACL+E,QAAAA,GAAG,EAAEE,UADA;AAELxG,QAAAA,KAAK,EAAEwG,UAAU,CAAC0B,SAAX,CAAqB1B,UAAU,CAAC2B,WAAX,CAAuB,GAAvB,IAA8B,CAAnD,CAFF;AAGLC,QAAAA,MAAM,EAAEN,YAAY,CAACO,aAAb,CAA2B7B,UAA3B;AAHH,OAAP;AAKD;;AAED,WAAOU,QAAQ,CAACV,UAAD,CAAf;AACD,GA/DD;;AAAA;AAAA;AAAA;AAAA;;AAiEA3F,OAAO,CAACyH,QAAR;AAAA,8CAAmB,WAAOvH,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC3C,QAAI;AACF,UAAM;AAAE6F,QAAAA;AAAF,UAAU/F,GAAG,CAACK,KAApB;AACA,UAAMmH,OAAO,SAAST,YAAY,CAACU,WAAb,CAAyB1B,GAAzB,CAAtB,CAFE,CAGF;;AACA9F,MAAAA,GAAG,CAACyH,IAAJ,CAASF,OAAO,CAACG,OAAjB;AACD,KALD,CAKE,OAAO/H,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GATD;;AAAA;AAAA;AAAA;AAAA;;AAWAE,OAAO,CAAC8H,KAAR;AAAA,+CAAgB,WAAM5H,GAAN,EAAa;AAC3B,QAAM;AAAEG,MAAAA;AAAF,QAAgBH,GAAG,CAACK,KAA1B;AAEA,QAAI,CAACF,SAAL,EAAgB,MAAM,IAAIN,KAAJ,CAAU,uCAAV,CAAN;AAChB,QAAM;AAAEkF,MAAAA,EAAE,EAAEjB;AAAN,QAAiB9D,GAAG,CAAC8E,MAA3B;AACA,QAAM;AAAE5C,MAAAA;AAAF,QAAWlC,GAAjB;AAEA,QAAMsE,IAAI,SAASC,mBAAUlG,OAAV,CAAkB;AAAEmG,MAAAA,IAAI,EAAErE;AAAR,KAAlB,EAAuC,KAAvC,CAAnB;AACA,QAAMsE,WAAW,GAAGH,IAAI,CAAChG,GAAzB;AAEA,QAAIoG,OAAO,GAAG,EAAd,CAV2B,CAW3B;;AACA,QAAIxC,IAAJ,EAAUwC,OAAO,GAAG,CAAC,IAAIxC,IAAI,CAACwC,OAAL,IAAgB,EAApB,CAAD,EAA0B,IAAIxC,IAAI,CAACyC,SAAL,IAAkB,EAAtB,CAA1B,CAAV;AAEV,QAAMQ,MAAM,GAAGjD,IAAI,GACf,CACE;AACE3B,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,KAAK,EAAE;AAAE4E,QAAAA,QAAQ,EAAElD,IAAI,CAAC5D,GAAjB;AAAsBmG,QAAAA;AAAtB;AAFT,KADF,CADe,GAOf,EAPJ;AASA,QAAMtG,IAAI,SAASmC,cAAKjC,OAAL,CAAa;AAC9BC,MAAAA,GAAG,EAAEwF,MADyB;AAE9B5B,MAAAA,IAAI,EAAE;AAAE2F,QAAAA,IAAI,EAAEnD;AAAR;AAFwB,KAAb,EAGhBnG,QAHgB,CAGP,CACV,GAAG4G,MADO,EAEV;AACE5E,MAAAA,IAAI,EAAE,wBADR;AAEEM,MAAAA,MAAM,EAAE,UAFV;AAGEL,MAAAA,KAAK,EAAE;AAAEiE,QAAAA;AAAF;AAHT,KAFU,EAOV;AAAElE,MAAAA,IAAI,EAAE;AAAR,KAPU,EAQV;AACEA,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,KAAK,EAAE;AAAEiE,QAAAA;AAAF;AAFT,KARU,CAHO,CAAnB;AAiBA,WAAOtG,IAAP;AACD,GAzCD;;AAAA;AAAA;AAAA;AAAA,I,CA2CA;;;AACA2B,OAAO,CAACgI,OAAR;AAAA,+CAAkB,WAAM9H,GAAN,EAAa;AAC7B,QAAM;AAAE+E,MAAAA;AAAF,QAAS/E,GAAG,CAAC8E,MAAnB;AACA,WAAO7G,gBAAgB,CAAC8G,EAAD,CAAvB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAjF,OAAO,CAACiI,MAAR;AAAA,+CAAiB,WAAO/H,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACzC,QAAI;AACF,UAAM;AAAEuE,QAAAA;AAAF,UAAkBzE,GAAG,CAACgI,eAA5B;AACA,UAAIvJ,IAAI,GAAGuB,GAAG,CAAC8B,IAAJ,CAASrD,IAAT,CAAcC,MAAd,CAAqBuJ,GAAG,IAAIA,GAA5B,CAAX,CAFE,CAIF;;AACAxJ,MAAAA,IAAI,GAAGA,IAAI,CAACI,GAAL,CAASoJ,GAAG,IAAIA,GAAG,CAAC/I,OAAJ,CAAY,eAAZ,EAA6B,EAA7B,EAAiCgJ,IAAjC,EAAhB,CAAP;AAEA,UAAMC,QAAQ,GAAGnI,GAAG,CAAC8B,IAAJ,CAASqG,QAAT,IAAqB,EAAtC;AACA,UAAIC,WAAJ;AACA,UAAIC,OAAJ;AACA,UAAM;AAAEzJ,QAAAA;AAAF,UAAeoB,GAAG,CAAC8B,IAAzB;AACA,UAAIwG,OAAJ;AACA,UAAIC,UAAJ;AAEAD,MAAAA,OAAO,SAAShI,cAAKjC,OAAL,CAAa;AAAEC,QAAAA,GAAG,EAAE0B,GAAG,CAAC8B,IAAJ,CAASxD;AAAhB,OAAb,EAAoCC,QAApC,CAA6C,YAA7C,CAAhB;;AAEA,UAAI,CAACkG,WAAW,CAACS,MAAZ,CAAmBoD,OAAO,CAAC7D,WAA3B,CAAL,EAA8C;AAC5C,cAAM,IAAI5E,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,UAAM2I,YAAY,GAAG,CAAC,GAAGF,OAAO,CAACH,QAAZ,CAArB;AACA,UAAMM,QAAQ,GAAG,CAAC,GAAGH,OAAO,CAACH,QAAZ,CAAjB;AAEAC,MAAAA,WAAW,GAAGD,QAAQ,CAACzJ,MAAT,CAAgBgK,CAAC,IAAIF,YAAY,CAACG,OAAb,CAAqBD,CAArB,IAA0B,CAA/C,CAAd;AACAL,MAAAA,OAAO,GAAG5J,IAAI,CAACC,MAAL,CAAYC,CAAC,IAAI8J,QAAQ,CAACE,OAAT,CAAiBhK,CAAjB,IAAsB,CAAvC,CAAV;AAEA2J,MAAAA,OAAO,CAAC7J,IAAR,GAAeA,IAAf;AACA6J,MAAAA,OAAO,CAACH,QAAR,GAAmBA,QAAnB;AACAG,MAAAA,OAAO,CAACxG,IAAR,GAAe9B,GAAG,CAAC8B,IAAJ,CAASA,IAAxB;;AAEA,UAAIwG,OAAO,CAAC/C,GAAR,KAAgBvF,GAAG,CAAC8B,IAAJ,CAASyD,GAA7B,EAAkC;AAChCgD,QAAAA,UAAU,GAAG;AACXhD,UAAAA,GAAG,EAAEvF,GAAG,CAAC8B,IAAJ,CAAS8G,IADH;AAEX3J,UAAAA,KAAK,EAAEe,GAAG,CAAC8B,IAAJ,CAAS7C,KAAT,IAAkB,IAFd;AAGX4J,UAAAA,WAAW,EAAE7I,GAAG,CAAC8B,IAAJ,CAAS+G,WAAT,IAAwB,IAH1B;AAIXC,UAAAA,KAAK,EAAE9I,GAAG,CAAC8B,IAAJ,CAASgH,KAAT,IAAkB,IAJd;AAKXC,UAAAA,aAAa,EAAE/I,GAAG,CAAC8B,IAAJ,CAASiH,aALb;AAMXC,UAAAA,SAAS,EAAEhJ,GAAG,CAAC8B,IAAJ,CAASkH,SANT;AAOXC,UAAAA,UAAU,EAAE,CAACrK,QAAD,CAPD;AAQXyI,UAAAA,MAAM,EAAErH,GAAG,CAAC8B,IAAJ,CAASuF,MARN;AASX5I,UAAAA;AATW,SAAb,CADgC,CAahC;;AACA6J,QAAAA,OAAO,SAASA,OAAO,CAACY,gBAAR,CAAyBX,UAAzB,CAAhB;AAEA,YAAMY,aAAa,SAAS7I,cAAKjC,OAAL,CAAa;AAAEC,UAAAA,GAAG,EAAEgK,OAAO,CAACc;AAAf,SAAb,CAA5B;AACA,cAAMD,aAAa,CAACE,SAAd,CAAwB;AAAE5E,UAAAA;AAAF,SAAxB,CAAN;AACD;;AAED,UAAI6D,OAAO,CAACgB,UAAR,IAAsB7K,IAAtB,IAA8BA,IAAI,CAAC8K,MAAvC,EAA+C;AAC7C,YAAM;AAAED,UAAAA;AAAF,YAAiBhB,OAAvB;AACA,YAAMkB,YAAY,GAAGF,UAAU,CAAC7K,IAAX,IAAmB,EAAxC;AACA6K,QAAAA,UAAU,CAAC7K,IAAX,GAAkB,CAAC,GAAG,IAAIgL,GAAJ,CAAQ,CAAC,GAAGD,YAAJ,EAAkB,GAAG/K,IAArB,CAAR,CAAJ,CAAlB;AACA,cAAM6J,OAAO,CAACgB,UAAR,CAAmBI,IAAnB,EAAN;AACD;;AAED,YAAMpB,OAAO,CAACoB,IAAR,EAAN;AACAzJ,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBsH,OAArB,EA1DE,CA4DF;;AACAD,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAD,MAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B,CA9DE,CAgEF;;AACA,UAAMuB,KAAK,GAAGtB,OAAO,CAACxJ,GAAR,CAAYoJ,GAAG,IAC3B2B,aAAIC,SAAJ,CACE;AAAEvL,QAAAA,GAAG,EAAE2J;AAAP,OADF,EAEE;AACEjE,QAAAA,SAAS,EAAE;AAAE8F,UAAAA,OAAO,EAAElL;AAAX,SADb;AAEEmL,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFR,CAEqB;;AAFrB,OAFF,EAME;AAAEC,QAAAA,MAAM,EAAE;AAAV,OANF,EAOEC,IAPF,EADY,CAAd;AAWA,YAAM5J,cAAK6J,eAAL,CAAqB/B,WAArB,EAAkCE,OAAlC,EAA2C;AAC/ChK,QAAAA,GAAG,EAAEgK,OAAO,CAACpG,IADkC;AAE/CkI,QAAAA,IAAI,EAAE9B,OAAO,CAAC+B,YAAR,CAAqBD;AAFoB,OAA3C,CAAN;AAKA,mBAAapH,OAAO,CAACC,GAAR,CAAY,CAAC,GAAG0G,KAAJ,CAAZ,CAAb;AACD,KAlFD,CAkFE,OAAO/J,GAAP,EAAY;AACZ,aAAOM,IAAI,CAACN,GAAD,CAAX;AACD;AACF,GAtFD;;AAAA;AAAA;AAAA;AAAA;;SAwFe0K,oB;;;AAmGf;;;;;;0DAnGA,WAAoChC,OAApC,EAA6C7D,WAA7C,EAA0D;AACxD,QAAI;AACF,UAAMG,MAAM,GAAG0D,OAAO,CAAC+B,YAAvB;AACA,UAAME,WAAW,SAASC,sBAAcpL,IAAd,CAAmB;AAC3CqL,QAAAA,SAAS,EAAEnC,OAAO,CAACpG,IADwB;AAE3CuC,QAAAA,WAF2C,CAG3C;;AAH2C,OAAnB,EAIvBlG,QAJuB,CAId,UAJc,EAIF,yDAJE,CAA1B;AAMA,UAAM+F,IAAI,SAASC,mBAAUlG,OAAV,CAAkB;AAAEC,QAAAA,GAAG,EAAEmG;AAAP,OAAlB,EAAwC,MAAxC,CAAnB;AAEA,UAAMiG,QAAQ,GAAGH,WAAW,CAAC1L,GAAZ;AAAA,qDAAgB,WAAM8L,YAAN,EAAsB;AACrD,cAAI,CAACA,YAAY,CAACC,QAAlB,EAA4B,OAAO,IAAP;;AAC5B,cAAI;AACF,gBAAIC,UAAJ;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAI,CAACA,UAAD,IAAeF,YAAY,CAACG,MAAb,GAAsB,CAAzC,EAA4C;AAC1C,qBAAOH,YAAY,CAACI,MAAb,EAAP;AACD;;AAEDJ,YAAAA,YAAY,CAACG,MAAb,IAAuB,CAAvB;AACAH,YAAAA,YAAY,CAACG,MAAb,GAAsBE,IAAI,CAACC,GAAL,CAASN,YAAY,CAACG,MAAtB,EAA8B,CAA9B,CAAtB;AAEAH,YAAAA,YAAY,SAASA,YAAY,CAACjB,IAAb,EAArB;AAEA,gBAAMwB,IAAI,GAAG,IAAIC,aAAJ,CAAS;AACpBtH,cAAAA,MAAM,EAAE8G,YAAY,CAACC,QADD;AAEpBpH,cAAAA,IAAI,EAAE8E,OAAO,CAACpG,IAFM;AAGpB/D,cAAAA,IAAI,EAAEmK,OAAO,CAAChK,GAHM;AAIpBG,cAAAA,IAAI,EAAE6J,OAAO,CAAC7J,IAJM;AAKpB8C,cAAAA,SAAS,EAAE,IAAIJ,IAAJ;AALS,aAAT,CAAb;AAQA,kBAAM+J,IAAI,CAACxB,IAAL,EAAN;AAEA,gBAAMxI,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AAEA,gBAAM;AAAEyJ,cAAAA;AAAF,gBAAeD,YAArB,CAjCE,CAmCF;;AACA,gBAAIzJ,GAAG,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAArB,GAA4B,IAAIC,IAAJ,CAASyJ,QAAQ,CAACQ,oBAAlB,CAAhC,EAAyE;AACvE;AACA,kBAAMC,MAAM,SAASF,cAAK/L,IAAL,CAAU;AAC7ByE,gBAAAA,MAAM,EAAE+G,QAAQ,CAACtM,GADY;AAE7BgN,gBAAAA,IAAI,EAAE,KAFuB;AAG7B/J,gBAAAA,SAAS,EAAE;AAAEgK,kBAAAA,IAAI,EAAErK,GAAG,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe;AAA7B;AAHkB,eAAV,CAArB;AAKA,kBAAMsK,CAAC,GAAGH,MAAM,CAAC9B,MAAjB;AACA,oBAAM4B,cAAKM,UAAL,CACJ;AAAE5H,gBAAAA,MAAM,EAAE+G,QAAQ,CAACtM,GAAnB;AAAwBgN,gBAAAA,IAAI,EAAE;AAA9B,eADI,EAEJ;AAAEA,gBAAAA,IAAI,EAAE;AAAR,eAFI,EAGJ;AAAEI,gBAAAA,KAAK,EAAE;AAAT,eAHI,CAAN;AAKA,kBAAMzJ,KAAK,sCAA+B2C,MAAM,CAACwF,IAAtC,qBAAqD9F,IAAI,CAAC8F,IAA1D,eAAX;AAEA,kBAAMhI,OAAO,GAAG;AACdC,gBAAAA,QAAQ,EAAEuC,MADI;AAEdtC,gBAAAA,MAAM,EAAEqI,YAAY,CAACC,QAFP;AAGdzM,gBAAAA,IAAI,EAAEmK,OAHQ;AAId/F,gBAAAA,MAAM,EAAEN,KAJM;AAKdO,gBAAAA,QAAQ,EAAE,SALI;AAMdmJ,gBAAAA,MAAM,EAAEH,CANM;AAOdrL,gBAAAA,SAAS,EAAEmE,IAAI,CAAC8F;AAPF,eAAhB,CAfuE,CAyBvE;;AACA,mDAAiBQ,QAAjB,EAA2B3I,KAA3B,EAAkCG,OAAlC;AACAwI,cAAAA,QAAQ,CAACQ,oBAAT,GAAgClK,GAAhC;AACA0J,cAAAA,QAAQ,CAAClB,IAAT;AACD;;AAED,gBAAMkC,WAAW,GAAG;AAClBtN,cAAAA,GAAG,EAAEqM,YAAY,CAACC,QAAb,CAAsBtM,GADT;AAElByE,cAAAA,IAAI,EAAE;AAFY,aAApB;;AAIA8I,iCAAYC,IAAZ,CAAiB,aAAjB,EAAgCF,WAAhC;;AACA,mBAAO,IAAP;AACD,WAzED,CAyEE,OAAOhM,GAAP,EAAY;AACZ;AACA6C,YAAAA,OAAO,CAACsJ,KAAR,CAAc,8BAAd,EAA8CnM,GAA9C;AACA,mBAAO,IAAP;AACD;AACF,SAhFgB;;AAAA;AAAA;AAAA;AAAA,UAAjB;AAiFA,YAAMoD,OAAO,CAACC,GAAR,CAAYyH,QAAZ,CAAN;AACD,KA5FD,CA4FE,OAAO9K,GAAP,EAAY;AACZ;AACA6C,MAAAA,OAAO,CAACsJ,KAAR,CAAc,gCAAd,EAAgDnM,GAAhD;AACD;AACF,G;;;;AAKDE,OAAO,CAACkM,MAAR;AAAA,+CAAiB,WAAOhM,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACzC,QAAI;AACF,UAAM;AAAEgC,QAAAA,IAAF;AAAQ8F,QAAAA;AAAR,UAA4BhI,GAAlC;AACA,UAAM;AAAEG,QAAAA,SAAF;AAAasE,QAAAA;AAAb,UAA6BuD,eAAnC;AAEA,UAAI7H,SAAS,KAAK,MAAlB,EACE,MAAM,oCAAmB;AAAE+B,QAAAA,IAAF;AAAQuC,QAAAA,WAAR;AAAqBuD,QAAAA;AAArB,OAAnB,CAAN;;AAEF,UAAI9F,IAAI,CAAC+J,MAAT,EAAiB;AACf,cAAM,IAAIpM,KAAJ,CACJ,+HADI,CAAN;AAGD;;AAED,UAAM;AAAEqM,QAAAA,OAAF;AAAWpK,QAAAA,IAAX;AAAiBqK,QAAAA,OAAO,EAAEC;AAA1B,UAAuCpM,GAAG,CAAC8B,IAAjD,CAbE,CAcF;AACA;;AACA,UAAMuK,eAAe,GAAGvK,IAAI,IAAIA,IAAI,CAACyH,MAArC;AACA,UAAMpB,QAAQ,GAAGnI,GAAG,CAAC8B,IAAJ,CAASqG,QAAT,IAAqB,EAAtC;AACA,UAAI1J,IAAI,GAAG,EAAX;AACA,UAAMM,QAAQ,GAAGiB,GAAG,CAAC8B,IAAJ,CAAS/C,QAAT,IAAqB,EAAtC;AACA,UAAMH,QAAQ,GAAGoB,GAAG,CAAC8B,IAAJ,CAASlD,QAAT,GAAoBoB,GAAG,CAAC8B,IAAJ,CAASlD,QAAT,CAAkBN,GAAtC,GAA4C,IAA7D;AAEA,UAAM6N,OAAO,GAAGnM,GAAG,CAAC8B,IAAJ,CAASyD,GAAT,IAAgBvF,GAAG,CAAC8B,IAAJ,CAAS8G,IAAzC;AACA,UAAM1H,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AAEA,UAAImL,UAAU,GAAG,IAAInL,IAAJ,CAASD,GAAG,CAACqL,OAAJ,KAAgBC,4BAAzB,CAAjB;;AACA,UAAInJ,OAAO,CAACC,GAAR,CAAYmJ,QAAZ,KAAyB,MAAzB,IAAmCzM,GAAG,CAAC8B,IAAJ,CAASwK,UAAhD,EAA4D;AAC1DA,QAAAA,UAAU,GAAGtM,GAAG,CAAC8B,IAAJ,CAASwK,UAAtB;AACD,OA5BC,CA8BF;;;AACA,UAAI1N,QAAJ,EAAcH,IAAI,CAACiO,IAAL,CAAU9N,QAAV,EA/BZ,CAgCF;;AACAoB,MAAAA,GAAG,CAAC8B,IAAJ,CAASrD,IAAT,CAAckO,OAAd,CAAsB1E,GAAG,IAAI;AAC3B,YAAIA,GAAJ,EAAS;AACPxJ,UAAAA,IAAI,CAACiO,IAAL,CAAUzE,GAAG,CAAC/I,OAAJ,CAAY,eAAZ,EAA6B,EAA7B,EAAiCgJ,IAAjC,EAAV;AACD;AACF,OAJD;AAKAzJ,MAAAA,IAAI,GAAG,CAAC,GAAG,IAAIgL,GAAJ,CAAQhL,IAAR,CAAJ,CAAP;AAEA,UAAM8J,UAAU,GAAG;AACjB;AACAhD,QAAAA,GAAG,EAAE4G,OAFY;AAGjBlN,QAAAA,KAAK,EAAEe,GAAG,CAAC8B,IAAJ,CAAS7C,KAAT,GAAiBe,GAAG,CAAC8B,IAAJ,CAAS7C,KAA1B,GAAkC,EAHxB;AAIjB4J,QAAAA,WAAW,EAAE7I,GAAG,CAAC8B,IAAJ,CAAS+G,WAAT,GAAuB7I,GAAG,CAAC8B,IAAJ,CAAS+G,WAAhC,GAA8C,IAJ1C;AAKjBC,QAAAA,KAAK,EAAE9I,GAAG,CAAC8B,IAAJ,CAASgH,KAAT,GAAiB9I,GAAG,CAAC8B,IAAJ,CAASgH,KAA1B,GAAkC,IALxB;AAMjBC,QAAAA,aAAa,EAAE/I,GAAG,CAAC8B,IAAJ,CAASiH,aANP;AAOjBC,QAAAA,SAAS,EAAEhJ,GAAG,CAAC8B,IAAJ,CAASkH,SAPH;AAQjBjK,QAAAA,QARiB;AASjBsI,QAAAA,MAAM,EAAErH,GAAG,CAAC8B,IAAJ,CAASuF,MATA;AAUjB4B,QAAAA,UAAU,EAAE,CAACrK,QAAD,CAVK;AAWjBH,QAAAA;AAXiB,OAAnB;AAcA,UAAMmO,UAAU,GAAG;AACjBrH,QAAAA,GAAG,EAAE4G,OADY;AAEjBC,QAAAA,QAFiB;AAGjBtD,QAAAA,KAAK,EAAE9I,GAAG,CAAC8B,IAAJ,CAASgH,KAAT,GAAiB9I,GAAG,CAAC8B,IAAJ,CAASgH,KAA1B,GAAkC,IAHxB;AAIjB7J,QAAAA,KAAK,EAAEe,GAAG,CAAC8B,IAAJ,CAAS7C,KAAT,GAAiBe,GAAG,CAAC8B,IAAJ,CAAS7C,KAA1B,GAAkC,EAJxB;AAKjB6C,QAAAA,IAAI,EAAEuK,eAAe,GAAGvK,IAAH,GAAU,IALd;AAMjBrD,QAAAA,IANiB;AAOjB0B,QAAAA,SAPiB;AAQjBsE,QAAAA,WARiB;AASjB7F,QAAAA,QATiB;AAUjBiO,QAAAA,SAAS,EAAE,CAVM;AAWjB3K,QAAAA,IAAI,EAAEA,IAAI,CAAC5D,GAXM;AAYjB6J,QAAAA,QAAQ,EAAEnI,GAAG,CAAC8B,IAAJ,CAASqG,QAZF;AAajB2E,QAAAA,QAAQ,EAAE5L,GAbO;AAcjBoL,QAAAA,UAdiB;AAejBzD,QAAAA,WAAW,EAAEqD,OAAO,IAAIG,eAAX,GAA6BvK,IAA7B,GAAoC,IAfhC;AAgBjBoK,QAAAA,OAAO,EAAG,CAACC,OAAD,IAAYD,OAAb,IAAyB;AAhBjB,OAAnB,CAtDE,CAyEF;;AACA,UAAMa,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAAnB;;AACA,UAAIG,UAAU,CAACxD,MAAX,GAAoB,MAAxB,EAAgC;AAC9B,eAAOtJ,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB,CAAP;AACD;;AAED,UAAM4D,MAAM,SAAS5C,cAAK3D,OAAL,CAAa;AAAEC,QAAAA,GAAG,EAAE4D,IAAI,CAAC5D;AAAZ,OAAb,CAArB;AAEA,UAAI8K,UAAJ;;AACA,UAAI+C,OAAJ,EAAa;AACX/C,QAAAA,UAAU,SAAS9I,cAAK4M,WAAL,CAAiB;AAAE3E,UAAAA,UAAF;AAAcqE,UAAAA;AAAd,SAAjB,CAAnB;AACA,cAAMxD,UAAU,CAAC+D,cAAX,CAA0B1I,WAA1B,EAAuCtE,SAAvC,CAAN,CAFW,CAGX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,UAAI,CAACkM,eAAL,EAAsB,OAAOpM,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBoI,UAArB,CAAP;AAEtB,UAAId,OAAO,GAAG,IAAIhI,aAAJ,CAASsM,UAAT,CAAd;AACAtE,MAAAA,OAAO,SAASA,OAAO,CAACoB,IAAR,EAAhB;;AAEA,UAAIN,UAAJ,EAAgB;AACdd,QAAAA,OAAO,CAACc,UAAR,GAAqBA,UAArB;AACAd,QAAAA,OAAO,CAACgB,UAAR,GAAqBF,UAArB;AACAd,QAAAA,OAAO,CAAClE,QAAR,GAAmBgF,UAAU,CAAChF,QAA9B;AACD;;AAEDkE,MAAAA,OAAO,SAASA,OAAO,CAAC8E,WAAR,EAAhB;AACA9E,MAAAA,OAAO,CAAC1G,IAAR,CAAa0H,UAAb,GAA0BF,UAA1B;AAEAd,MAAAA,OAAO,SAASA,OAAO,CAAC+E,WAAR,CAAoBzI,MAApB,CAAhB;AACA0D,MAAAA,OAAO,SAASA,OAAO,CAACoB,IAAR,EAAhB;AAEA,UAAIN,UAAJ,EAAgB,MAAMA,UAAU,CAACM,IAAX,EAAN,CAhHd,CAkHF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAI,CAACyC,OAAD,IAAY,CAACD,OAAjB,EAA0B,MAAM5D,OAAO,CAAC6E,cAAR,CAAuB1I,WAAvB,EAAoCtE,SAApC,CAAN;AAC1B,YAAMmI,OAAO,CAACgF,eAAR,CAAwB;AAAE7I,QAAAA,WAAF;AAAetE,QAAAA;AAAf,OAAxB,CAAN;AAEA,YAAMyE,MAAM,CAAC2I,eAAP,EAAN;AACAtN,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBsH,OAAO,IAAIc,UAAhC;AAEAkB,MAAAA,oBAAoB,CAAChC,OAAD,EAAU7D,WAAV,CAApB;AACA,aAAOnE,cAAK6J,eAAL,CAAqBhC,QAArB,EAA+BG,OAA/B,EAAwC1D,MAAxC,CAAP;AACD,KApID,CAoIE,OAAOhF,GAAP,EAAY;AACZ,aAAOM,IAAI,CAACN,GAAD,CAAX;AACD;AACF,GAxID;;AAAA;AAAA;AAAA;AAAA;;AA0IAE,OAAO,CAACiL,MAAR;AAAA,+CAAiB,WAAO/K,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACzC,QAAI;AACF,UAAM2D,MAAM,GAAG7D,GAAG,CAACkC,IAAJ,CAAS5D,GAAxB;AACA,UAAM;AAAEyG,QAAAA;AAAF,UAAS/E,GAAG,CAAC8E,MAAnB;AACA,UAAIzE,KAAK,GAAG;AAAE/B,QAAAA,GAAG,EAAEyG,EAAP;AAAW7C,QAAAA,IAAI,EAAE2B;AAAjB,OAAZ;;AAEA,UAAI7D,GAAG,CAACkC,IAAJ,CAASsL,IAAT,KAAkB,OAAtB,EAA+B;AAC7BnN,QAAAA,KAAK,GAAG;AAAE/B,UAAAA,GAAG,EAAEyG;AAAP,SAAR;AACD;;AAED,UAAM5G,IAAI,SAASmC,cAAKjC,OAAL,CAAagC,KAAb,CAAnB;AACA,UAAI,CAAClC,IAAL,EAAW,MAAM,IAAI0B,KAAJ,CAAU,eAAV,EAA2BQ,KAA3B,CAAN;AAEX,YAAMlC,IAAI,CAAC4M,MAAL,EAAN;AAEA,UAAM0C,YAAY,GAAG;AACnB1K,QAAAA,IAAI,EAAE,aADa;AAEnB2K,QAAAA,KAAK,EAAE,IAFY;AAGnBtL,QAAAA,OAAO,EAAEjE;AAHU,OAArB;;AAKA0N,2BAAYC,IAAZ,CAAiB,aAAjB,EAAgC2B,YAAhC;;AAEA,YAAMzN,GAAG,CAACkC,IAAJ,CAASqL,eAAT,EAAN;AACAtN,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,SAArB;AACD,KAvBD,CAuBE,OAAOpB,GAAP,EAAY;AACZM,MAAAA,IAAI,CAACN,GAAD,CAAJ;AACD;AACF,GA3BD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import url from 'url';\nimport request from 'request';\nimport get from 'lodash/get';\nimport socketEvent from 'server/socket/socketEvent';\nimport Community from 'server/api/community/community.model';\nimport { sendEmail } from 'server/utils/mail';\nimport { sendNotification } from 'server/notifications';\nimport { checkCommunityAuth } from 'server/api/community/community.auth';\nimport * as proxyHelpers from './html';\nimport MetaPost from './link.model';\nimport Post from './post.model';\nimport User from '../user/user.model';\nimport Subscriptiton from '../subscription/subscription.model';\nimport Feed from '../feed/feed.model';\nimport Tag from '../tag/tag.model';\nimport Notification from '../notification/notification.model';\nimport PostData from './postData.model';\nimport { PAYOUT_TIME } from '../../config/globalConstants';\n\nconst { promisify } = require('util');\n\nconst requestAsync = promisify(request);\nrequest.defaults({ maxRedirects: 22, jar: true });\n\nasync function findRelatedPosts(metaId) {\n  try {\n    const post = await MetaPost.findOne({ _id: metaId }).populate('tags');\n    const tagsArr = post.tags.filter(t => !t.category).map(t => t._id);\n    const tags = tagsArr.join(' ');\n    const keywords = post.keywords.join(' ');\n    const search = `${tags} ${keywords} ${post.title}`.replace(/\"|'/g, '');\n\n    const posts = await MetaPost.find(\n      { $text: { $search: search }, _id: { $ne: metaId } },\n      { score: { $meta: 'textScore' } }\n    )\n      .sort({ score: { $meta: 'textScore' } })\n      .limit(5);\n    return posts;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexports.flagged = async (req, res, next) => {\n  try {\n    const { community, limit, skip } = req.query;\n\n    const posts = await Post.find({ flagged: true })\n      .populate([\n        {\n          path: 'metaPost'\n        },\n        {\n          path: 'parentPost',\n          populate: 'metaPost'\n        },\n        {\n          path: 'post',\n          populate: [\n            {\n              path: 'commentary',\n              match: {\n                repost: { $exists: false },\n                $or: [{ hidden: { $ne: true } }]\n              }\n            },\n            {\n              path: 'embeddedUser.relevance',\n              match: { community },\n              select: 'pagerank'\n            }\n          ]\n        }\n      ])\n      .skip(parseInt(skip, 10))\n      .limit(parseInt(limit, 10))\n      .sort('-createdAt');\n\n    res.status(200).json(posts);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.topPosts = async (req, res, next) => {\n  try {\n    let posts;\n    const now = new Date();\n    now.setDate(now.getDate() - 7);\n    posts = await PostData.find({ createdAt: { $gt: now }, isInFeed: true })\n      .populate({\n        path: 'post',\n        populate: [{ path: 'metaPost' }]\n      })\n      .sort('-pagerank')\n      .limit(20);\n\n    // TODO do this on frontend?\n    posts = posts.filter(d => d.post);\n    posts = posts.map(d => ({\n      ...d.post.toObject(),\n      data: { ...d.toObject(), post: get(d, 'post._id') }\n    }));\n    res.status(200).json(posts);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.sendPostNotification = async (req, res, next) => {\n  // todo: add tweet option\n  try {\n    const post = req.body;\n    const users = await User.find({});\n\n    const alert = `In case you missed this top-ranked post from @${post.user}: ${post.title}`;\n\n    // TODO - optimize this or put in queue so we don't create a bottle neck;\n    const finished = users.map(async user => {\n      try {\n        const payload = {\n          fromUser: null,\n          toUser: user,\n          post,\n          action: alert,\n          noteType: 'general'\n        };\n        await sendNotification(user, alert, payload);\n      } catch (err) {\n        // eslint-disable-next-line\n        console.log('sending notifications error ', err);\n      }\n      return Notification.createNotification({\n        post: post._id,\n        forUser: user._id,\n        byUser: post.user,\n        type: 'topPost'\n      });\n    });\n    await Promise.all(finished);\n    res.status(200).json({ success: true });\n  } catch (err) {\n    next(err);\n  }\n};\n\nasync function sendFlagEmail() {\n  const flaggedUrl = `${process.env.API_SERVER}/admin/flagged`;\n  const data = {\n    from: 'Relevant <info@relevant.community>',\n    to: 'info@relevant.community',\n    subject: 'Inapproprate Content',\n    html: `Someone has flagged a post for inappropriate content\n      <br />\n      <br />\n      You can manage flagged content here:&nbsp;\n      <a href=\"${flaggedUrl}\" target=\"_blank\">${flaggedUrl}</a>\n      <br />\n      <br />`\n  };\n  return sendEmail(data);\n}\n\nexports.flag = async (req, res, next) => {\n  try {\n    const userId = req.user._id;\n    const { postId } = req.body;\n    const post = await Post.findOneAndUpdate(\n      { _id: postId },\n      { flagged: true, $addToSet: { flaggedBy: userId }, flaggedTime: Date.now() },\n      { new: true }\n    );\n    await MetaPost.findOneAndUpdate(\n      { _id: post.metaPost },\n      { flagged: true, $addToSet: { flaggedBy: userId }, flaggedTime: Date.now() },\n      { new: true }\n    );\n    await sendFlagEmail();\n    res.status(200).json(post);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.userPosts = async (req, res, next) => {\n  try {\n    const { community } = req.query;\n\n    const cObj = await Community.findOne({ slug: community }, '_id');\n    if (!cObj) return res.status(200).json({});\n    const communityId = cObj._id;\n\n    const { user } = req;\n    const blocked = user ? [...user.blocked, ...user.blockedBy] : [];\n\n    const limit = parseInt(req.query.limit, 10);\n    const skip = parseInt(req.query.skip, 10);\n\n    const author = await User.findOne({ handle: req.params.id }, '_id');\n    if (!author) throw new Error('Missing user');\n\n    const sortQuery = { _id: -1 };\n    const query = { user: author._id, communityId };\n\n    if (blocked.find(u => author._id.equals(u))) {\n      return res.status(200).json({});\n    }\n\n    const myVote = user\n      ? [\n          {\n            path: 'myVote',\n            match: { investor: user._id, communityId }\n          }\n        ]\n      : [];\n\n    const posts = await Post.find(query)\n      .populate({\n        path: 'repost.post',\n        populate: [\n          {\n            path: 'embeddedUser.relevance',\n            select: 'pagerank',\n            match: { communityId }\n          },\n          {\n            path: 'metaPost'\n          },\n          {\n            path: 'data',\n            match: { communityId }\n          }\n        ]\n      })\n      .populate({\n        path: 'parentPost',\n        populate: [\n          {\n            path: 'data',\n            match: { communityId }\n          },\n          { path: 'metaPost' },\n          ...myVote\n        ]\n      })\n      .populate({\n        path: 'parentComment',\n        populate: [\n          {\n            path: 'data',\n            match: { communityId }\n          },\n          { path: 'metaPost' },\n          ...myVote\n        ]\n      })\n      .populate({ path: 'metaPost ' })\n      .populate({\n        path: 'embeddedUser.relevance',\n        select: 'pagerank',\n        match: { communityId }\n      })\n      .populate([\n        {\n          path: 'data',\n          match: { communityId }\n        },\n        ...myVote\n      ])\n      .limit(limit)\n      .skip(skip)\n      .sort(sortQuery);\n\n    return res.status(200).json(posts);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.preview = async (req, res, next) => {\n  try {\n    const urlParts = url.parse(req.url, false);\n    const { query } = urlParts;\n    const previewUrl = decodeURIComponent(query.replace('url=', ''));\n    const result = await exports.previewDataAsync(previewUrl);\n    res.status(200).json(result);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.previewDataAsync = async (previewUrl, noReadability) => {\n  if (!previewUrl.match(/http:\\/\\//i) && !previewUrl.match(/https:\\/\\//i)) {\n    previewUrl = 'http://' + previewUrl;\n  }\n\n  function getHeader(uri) {\n    const fbHeader = {\n      'User-Agent':\n        'facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php) Facebot'\n    };\n    const relevantHeader = {\n      'User-Agent':\n        'This is a user request for article matadata for Relevant Community (https://relevant.community | info@relevant.community)'\n    };\n    const noFb =\n      uri.match('apple.news') ||\n      uri.match('bloomberg.com') ||\n      uri.match('washingtonpost.com');\n\n    if (noFb) return relevantHeader;\n    return fbHeader;\n  }\n\n  // recursive fuction TODO - max recursive calls check?\n  async function queryUrl(_url) {\n    const response = await requestAsync({\n      url: _url,\n      maxRedirects: 22,\n      jar: true,\n      gzip: true,\n      headers: getHeader(_url),\n      rejectUnauthorized: false,\n      timeout: 20000,\n      pool: { maxSockets: 1000 },\n      agent: false\n    });\n\n    let uri = response.request.uri.href;\n    const processed = await proxyHelpers.generatePreview(\n      response.body,\n      uri,\n      _url,\n      noReadability\n    );\n\n    if (processed.redirect && processed.uri) {\n      console.log('redirect ', processed.uri); // eslint-disable-line\n      uri = processed.uri;\n      return queryUrl(uri);\n    }\n    return Promise.resolve(processed.result);\n  }\n\n  // Its a PDF\n  if (previewUrl.match('.pdf')) {\n    return {\n      url: previewUrl,\n      title: previewUrl.substring(previewUrl.lastIndexOf('/') + 1),\n      domain: proxyHelpers.extractDomain(previewUrl)\n    };\n  }\n\n  return queryUrl(previewUrl);\n};\n\nexports.readable = async (req, res, next) => {\n  try {\n    const { uri } = req.query;\n    const article = await proxyHelpers.getReadable(uri);\n    // let short = proxyHelpers.trimToLength(article.article, 140);\n    res.send(article.content);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexports.index = async req => {\n  const { community } = req.query;\n\n  if (!community) throw new Error('missing the community query parameter');\n  const { id: postId } = req.params;\n  const { user } = req;\n\n  const cObj = await Community.findOne({ slug: community }, '_id');\n  const communityId = cObj._id;\n\n  let blocked = [];\n  // TODO server rendering doesn't run the blocked middleware!\n  if (user) blocked = [...(user.blocked || []), ...(user.blockedBy || [])];\n\n  const myVote = user\n    ? [\n        {\n          path: 'myVote',\n          match: { investor: user._id, communityId }\n        }\n      ]\n    : [];\n\n  const post = await Post.findOne({\n    _id: postId,\n    user: { $nin: blocked }\n  }).populate([\n    ...myVote,\n    {\n      path: 'embeddedUser.relevance',\n      select: 'pagerank',\n      match: { communityId }\n    },\n    { path: 'metaPost' },\n    {\n      path: 'data',\n      match: { communityId }\n    }\n  ]);\n\n  return post;\n};\n\n// NOT USED RN\nexports.related = async req => {\n  const { id } = req.params;\n  return findRelatedPosts(id);\n};\n\nexports.update = async (req, res, next) => {\n  try {\n    const { communityId } = req.communityMember;\n    let tags = req.body.tags.filter(tag => tag);\n\n    // DEPRECATED old mobile\n    tags = tags.map(tag => tag.replace('_category_tag', '').trim());\n\n    const mentions = req.body.mentions || [];\n    let newMentions;\n    let newTags;\n    const { category } = req.body;\n    let newPost;\n    let linkObject;\n\n    newPost = await Post.findOne({ _id: req.body._id }).populate('parentPost');\n\n    if (!communityId.equals(newPost.communityId)) {\n      throw new Error(\"Community doesn't match\");\n    }\n\n    const prevMentions = [...newPost.mentions];\n    const prevTags = [...newPost.mentions];\n\n    newMentions = mentions.filter(m => prevMentions.indexOf(m) < 0);\n    newTags = tags.filter(t => prevTags.indexOf(t) < 0);\n\n    newPost.tags = tags;\n    newPost.mentions = mentions;\n    newPost.body = req.body.body;\n\n    if (newPost.url !== req.body.url) {\n      linkObject = {\n        url: req.body.link,\n        title: req.body.title || null,\n        description: req.body.description || null,\n        image: req.body.image || null,\n        articleAuthor: req.body.articleAuthor,\n        shortText: req.body.shortText,\n        categories: [category],\n        domain: req.body.domain,\n        tags\n      };\n\n      // upsert new parent post\n      newPost = await newPost.upsertLinkParent(linkObject);\n\n      const oldLinkParent = await Post.findOne({ _id: newPost.linkParent });\n      await oldLinkParent.pruneFeed({ communityId });\n    }\n\n    if (newPost.parentPost && tags && tags.length) {\n      const { parentPost } = newPost;\n      const originalTags = parentPost.tags || [];\n      parentPost.tags = [...new Set([...originalTags, ...tags])];\n      await newPost.parentPost.save();\n    }\n\n    await newPost.save();\n    res.status(200).json(newPost);\n\n    // some post processing\n    newTags = newTags || [];\n    newMentions = newMentions || [];\n\n    // TODO redo tag processing stuff\n    const pTags = newTags.map(tag =>\n      Tag.updateOne(\n        { _id: tag },\n        {\n          $addToSet: { parents: category },\n          $inc: { count: 1 } // eslint-disable-line\n        },\n        { upsert: true }\n      ).exec()\n    );\n\n    await Post.sendOutMentions(newMentions, newPost, {\n      _id: newPost.user,\n      name: newPost.embeddedUser.name\n    });\n\n    return await Promise.all([...pTags]);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nasync function processSubscriptions(newPost, communityId) {\n  try {\n    const author = newPost.embeddedUser;\n    const subscribers = await Subscriptiton.find({\n      following: newPost.user,\n      communityId\n      // category: newPostObj.category\n    }).populate('follower', '_id handle name deviceTokens badge lastFeedNotification');\n\n    const cObj = await Community.findOne({ _id: communityId }, 'name');\n\n    const promises = subscribers.map(async subscription => {\n      if (!subscription.follower) return null;\n      try {\n        let updateFeed;\n        /**\n         * In case subscription has expired, but user hasn't seen the articles\n         * remove oldest unread in feed and push new one\n         */\n        // console.log(subscription);\n        // // NO SUBSCRIPTIONS RN\n        // if (subscription.amount < 1) {\n        // check unread here\n        // updateFeed = await Feed.processExpired(subscription.follower._id);\n        // }\n        if (!updateFeed && subscription.amount < 1) {\n          return subscription.remove();\n        }\n\n        subscription.amount -= 1;\n        subscription.amount = Math.max(subscription.amount, 0);\n\n        subscription = await subscription.save();\n\n        const feed = new Feed({\n          userId: subscription.follower,\n          from: newPost.user,\n          post: newPost._id,\n          tags: newPost.tags,\n          createdAt: new Date()\n        });\n\n        await feed.save();\n\n        const now = new Date();\n\n        const { follower } = subscription;\n\n        // TODO put it on a queue, only certain hours of the day\n        if (now - 12 * 60 * 60 * 1000 > new Date(follower.lastFeedNotification)) {\n          // if (true) {\n          const unread = await Feed.find({\n            userId: follower._id,\n            read: false,\n            createdAt: { $gte: now - 24 * 60 * 60 * 1000 }\n          });\n          const n = unread.length;\n          await Feed.updateMany(\n            { userId: follower._id, read: false },\n            { read: true },\n            { multi: true }\n          );\n          const alert = `There is a new post from ${author.name} in the ${cObj.name} community`;\n\n          const payload = {\n            fromUser: author,\n            toUser: subscription.follower,\n            post: newPost,\n            action: alert,\n            noteType: 'newPost',\n            number: n,\n            community: cObj.name\n          };\n\n          // console.log('New post in feed alert', alert);\n          sendNotification(follower, alert, payload);\n          follower.lastFeedNotification = now;\n          follower.save();\n        }\n\n        const newFeedPost = {\n          _id: subscription.follower._id,\n          type: 'INC_FEED_COUNT'\n        };\n        socketEvent.emit('socketEvent', newFeedPost);\n        return null;\n      } catch (err) {\n        // eslint-disable-next-line\n        console.error('error updating subscription ', err);\n        return null;\n      }\n    });\n    await Promise.all(promises);\n  } catch (err) {\n    // eslint-disable-next-line\n    console.error('error processing subscriptions', err);\n  }\n}\n\n/**\n * Creates a new post\n */\nexports.create = async (req, res, next) => {\n  try {\n    const { user, communityMember } = req;\n    const { community, communityId } = communityMember;\n\n    if (community === 'foam')\n      await checkCommunityAuth({ user, communityId, communityMember });\n\n    if (user.banned) {\n      throw new Error(\n        'You are temporarily blocked from making new posts, if you think this is an error, please reach out to info@relevant.community'\n      );\n    }\n\n    const { channel, body, postUrl: inputUrl } = req.body;\n    // TODO rate limiting?\n    // current rate limiting is 5s via invest\n    const hasChildComment = body && body.length;\n    const mentions = req.body.mentions || [];\n    let tags = [];\n    const keywords = req.body.keywords || [];\n    const category = req.body.category ? req.body.category._id : null;\n\n    const postUrl = req.body.url || req.body.link;\n    const now = new Date();\n\n    let payoutTime = new Date(now.getTime() + PAYOUT_TIME);\n    if (process.env.NODE_ENV === 'test' && req.body.payoutTime) {\n      payoutTime = req.body.payoutTime;\n    }\n\n    // TODO clean up tag stuff\n    if (category) tags.push(category);\n    // Deprecate this (old category tag stuff from mobile)\n    req.body.tags.forEach(tag => {\n      if (tag) {\n        tags.push(tag.replace('_category_tag', '').trim());\n      }\n    });\n    tags = [...new Set(tags)];\n\n    const linkObject = {\n      // this is stored in metaPost\n      url: postUrl,\n      title: req.body.title ? req.body.title : '',\n      description: req.body.description ? req.body.description : null,\n      image: req.body.image ? req.body.image : null,\n      articleAuthor: req.body.articleAuthor,\n      shortText: req.body.shortText,\n      keywords,\n      domain: req.body.domain,\n      categories: [category],\n      tags\n    };\n\n    const postObject = {\n      url: postUrl,\n      inputUrl,\n      image: req.body.image ? req.body.image : null,\n      title: req.body.title ? req.body.title : '',\n      body: hasChildComment ? body : null,\n      tags,\n      community,\n      communityId,\n      category,\n      relevance: 0,\n      user: user._id,\n      mentions: req.body.mentions,\n      postDate: now,\n      payoutTime,\n      description: channel && hasChildComment ? body : null,\n      channel: (!postUrl && channel) || false\n    };\n\n    // TODO Work on better length limits\n    const postString = JSON.stringify(postObject);\n    if (postString.length > 100000) {\n      return res.status(500).json('post is too long');\n    }\n\n    const author = await User.findOne({ _id: user._id });\n\n    let linkParent;\n    if (postUrl) {\n      linkParent = await Post.newLinkPost({ linkObject, postObject });\n      await linkParent.insertIntoFeed(communityId, community);\n      // await Invest.createVote({\n      //   post: linkParent,\n      //   user: author,\n      //   amount: 1,\n      //   relevanceToAdd: 0,\n      //   community,\n      //   communityId\n      // });\n    }\n\n    if (!hasChildComment) return res.status(200).json(linkParent);\n\n    let newPost = new Post(postObject);\n    newPost = await newPost.save();\n\n    if (linkParent) {\n      newPost.linkParent = linkParent;\n      newPost.parentPost = linkParent;\n      newPost.metaPost = linkParent.metaPost;\n    }\n\n    newPost = await newPost.addPostData();\n    newPost.data.parentPost = linkParent;\n\n    newPost = await newPost.addUserInfo(author);\n    newPost = await newPost.save();\n\n    if (linkParent) await linkParent.save();\n\n    // TODO should you invest in own comment?\n    // await Invest.createVote({\n    //   post: newPost,\n    //   user: author,\n    //   amount: 1,\n    //   relevanceToAdd: 0,\n    //   community,\n    //   communityId\n    // });\n\n    if (!postUrl && !channel) await newPost.insertIntoFeed(communityId, community);\n    await newPost.incrementUnread({ communityId, community });\n\n    await author.updatePostCount();\n    res.status(200).json(newPost || linkParent);\n\n    processSubscriptions(newPost, communityId);\n    return Post.sendOutMentions(mentions, newPost, author);\n  } catch (err) {\n    return next(err);\n  }\n};\n\nexports.remove = async (req, res, next) => {\n  try {\n    const userId = req.user._id;\n    const { id } = req.params;\n    let query = { _id: id, user: userId };\n\n    if (req.user.role === 'admin') {\n      query = { _id: id };\n    }\n\n    const post = await Post.findOne(query);\n    if (!post) throw new Error('No post found', query);\n\n    await post.remove();\n\n    const newPostEvent = {\n      type: 'REMOVE_POST',\n      notMe: true,\n      payload: post\n    };\n    socketEvent.emit('socketEvent', newPostEvent);\n\n    await req.user.updatePostCount();\n    res.status(200).json('removed');\n  } catch (err) {\n    next(err);\n  }\n};\n"],"file":"post.controller.js"}