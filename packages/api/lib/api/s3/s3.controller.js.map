{"version":3,"sources":["../../../src/api/s3/s3.controller.js"],"names":["aws","require","crypto","AWS_ACCESS_KEY","AWS_SECRET_KEY","S3_BUCKET","process","env","exports","sign","req","res","config","update","accessKeyId","secretAccessKey","s3Policy","expiration","conditions","bucket","acl","success_action_status","stringPolicy","JSON","stringify","base64Policy","Buffer","from","toString","signature","createHmac","digest","s3Credentials","s3Signature","returnData","url","publicUrl","query","s3_object_name","write","end"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAM;AAAEE,EAAAA,cAAF;AAAkBC,EAAAA,cAAlB;AAAkCC,EAAAA;AAAlC,IAAgDC,OAAO,CAACC,GAA9D;;AAEAC,OAAO,CAACC,IAAR,GAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3BX,EAAAA,GAAG,CAACY,MAAJ,CAAWC,MAAX,CAAkB;AAAEC,IAAAA,WAAW,EAAEX,cAAf;AAA+BY,IAAAA,eAAe,EAAEX;AAAhD,GAAlB;AAEA,MAAMY,QAAQ,GAAG;AACfC,IAAAA,UAAU,EAAE,0BADG;AACyB;AACxCC,IAAAA,UAAU,EAAE,CACV,CAAC,aAAD,EAAgB,MAAhB,EAAwB,EAAxB,CADU,EAEV;AAAEC,MAAAA,MAAM,EAAEd;AAAV,KAFU,EAGV;AAAEe,MAAAA,GAAG,EAAE;AAAP,KAHU,EAIV,CAAC,aAAD,EAAgB,eAAhB,EAAiC,EAAjC,CAJU,EAKV;AAAEC,MAAAA,qBAAqB,EAAE;AAAzB,KALU;AAFG,GAAjB,CAH2B,CAc3B;;AACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,SAAL,CAAeR,QAAf,CAArB;AACA,MAAMS,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAA0B,OAA1B,EAAmCM,QAAnC,CAA4C,QAA5C,CAArB,CAhB2B,CAkB3B;;AACA,MAAMC,SAAS,GAAG3B,MAAM,CACrB4B,UADe,CACJ,MADI,EACI1B,cADJ,EAEfS,MAFe,CAERa,MAAM,CAACC,IAAP,CAAYF,YAAZ,EAA0B,OAA1B,CAFQ,EAGfM,MAHe,CAGR,QAHQ,CAAlB,CAnB2B,CAwB3B;;AACA,MAAMC,aAAa,GAAG;AACpBhB,IAAAA,QAAQ,EAAES,YADU;AAEpBQ,IAAAA,WAAW,EAAEJ;AAFO,GAAtB;AAKA,MAAMK,UAAU,GAAG;AACjBL,IAAAA,SAAS,EAAEG,aADM;AAEjBG,IAAAA,GAAG,EAAE,aAAa9B,SAAb,GAAyB,oBAFb;AAGjB+B,IAAAA,SAAS,EAAE,aAAa/B,SAAb,GAAyB,oBAAzB,GAAgDK,GAAG,CAAC2B,KAAJ,CAAUC,cAHpD;AAIjBnC,IAAAA;AAJiB,GAAnB;AAMAQ,EAAAA,GAAG,CAAC4B,KAAJ,CAAUhB,IAAI,CAACC,SAAL,CAAeU,UAAf,CAAV;AACAvB,EAAAA,GAAG,CAAC6B,GAAJ;AACD,CAtCD","sourcesContent":["const aws = require('aws-sdk');\nconst crypto = require('crypto');\n\nconst { AWS_ACCESS_KEY, AWS_SECRET_KEY, S3_BUCKET } = process.env;\n\nexports.sign = (req, res) => {\n  aws.config.update({ accessKeyId: AWS_ACCESS_KEY, secretAccessKey: AWS_SECRET_KEY });\n\n  const s3Policy = {\n    expiration: '2024-12-01T12:00:00.000Z', // hard coded for testing\n    conditions: [\n      ['starts-with', '$key', ''],\n      { bucket: S3_BUCKET },\n      { acl: 'public-read' },\n      ['starts-with', '$Content-Type', ''],\n      { success_action_status: '201' }\n    ]\n  };\n\n  // stringify and encode the policy\n  const stringPolicy = JSON.stringify(s3Policy);\n  const base64Policy = Buffer.from(stringPolicy, 'utf-8').toString('base64');\n\n  // sign the base64 encoded policy\n  const signature = crypto\n    .createHmac('sha1', AWS_SECRET_KEY)\n    .update(Buffer.from(base64Policy, 'utf-8'))\n    .digest('base64');\n\n  // build the results object\n  const s3Credentials = {\n    s3Policy: base64Policy,\n    s3Signature: signature\n  };\n\n  const returnData = {\n    signature: s3Credentials,\n    url: 'https://' + S3_BUCKET + '.s3.amazonaws.com/',\n    publicUrl: 'https://' + S3_BUCKET + '.s3.amazonaws.com/' + req.query.s3_object_name,\n    AWS_ACCESS_KEY\n  };\n  res.write(JSON.stringify(returnData));\n  res.end();\n};\n"],"file":"s3.controller.js"}