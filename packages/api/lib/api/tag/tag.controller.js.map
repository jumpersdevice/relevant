{"version":3,"sources":["../../../src/api/tag/tag.controller.js"],"names":["exports","update","req","res","next","tag","newId","body","oldId","_id","updatedTag","sameIdTag","Tag","findOne","count","parents","Math","max","remove","findOneAndUpdate","$set","new","exec","newTag","toObject","save","Post","category","multi","$addToSet","$pull","err","status","json","create","index","sort","query","sortObj","find","tags","categories","active","undefined","then","catch","search","term","params","$regex","$options","foundTags"],"mappings":"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","sourcesContent":["import Post from '../post/post.model';\nimport Tag from './tag.model';\n\nexports.update = async (req, res, next) => {\n  let tag;\n  const { newId } = req.body;\n  const oldId = req.body._id;\n  let updatedTag = req.body;\n  delete updatedTag.newId;\n  try {\n    if (newId !== oldId) {\n      let sameIdTag = await Tag.findOne({ _id: newId });\n      if (sameIdTag) {\n        updatedTag.count = sameIdTag.count;\n        updatedTag.parents = sameIdTag.parents;\n        updatedTag = Math.max(sameIdTag.count, updatedTag.count);\n        sameIdTag = await sameIdTag.remove();\n      }\n    }\n\n    tag = await Tag.findOneAndUpdate(\n      { _id: oldId },\n      { $set: { ...updatedTag } },\n      { new: true }\n    ).exec();\n\n    if (newId !== oldId) {\n      let newTag = new Tag({ ...tag.toObject(), _id: newId });\n      // console.log('newTag ', newTag);\n      newTag = await newTag.save();\n      await tag.remove();\n      tag = newTag;\n    }\n\n    await Post.update(\n      { category: oldId },\n      { $set: { category: newId } },\n      { multi: true }\n    ).exec();\n\n    await Tag.update(\n      { parents: oldId },\n      { $addToSet: { 'parents.$': newId }, $pull: { 'parents.$': oldId } },\n      { multi: true }\n    ).exec();\n  } catch (err) {\n    return next(err);\n  }\n  return res.status(200).json(tag);\n};\n\nexports.create = (req, res, next) => {\n  const newTag = new Tag(req.body);\n  newTag.save((err, tag) => {\n    if (err) return next(err);\n    return res.status(200).json(tag);\n  });\n};\n\nexports.index = (req, res, next) => {\n  const { sort } = req.query;\n  let sortObj = null;\n\n  if (sort === 'count') sortObj = { count: -1 };\n\n  Tag.find()\n    .sort(sortObj)\n    .exec((err, tags) => {\n      if (err) return next(err);\n      return res.json(200, tags);\n    });\n};\n\nexports.categories = (req, res, next) => {\n  const { active } = req.query;\n  let query = { category: true };\n  if (active !== undefined) query = { category: true, active: true };\n\n  Tag.find(query)\n    .sort({ count: -1 })\n    .then(categories => res.status(200).json(categories))\n    .catch(next);\n};\n\nexports.search = (req, res, next) => {\n  const { term } = req.params;\n  Tag.find({\n    _id: {\n      $regex: term,\n      $options: 'i'\n    }\n  })\n    .then(foundTags => res.json(200, foundTags))\n    .catch(next);\n};\n"],"file":"tag.controller.js"}