{"version":3,"sources":["../../../src/api/invest/createVote.js"],"names":["NODE_ENV","process","env","create","req","res","next","community","communityId","communityMember","communityInstance","Community","findOne","_id","userId","user","postId","body","post","amount","Math","max","min","author","queryDb","unhideTwitterComments","ratelimitVotes","relevance","ensurePagerank","vote","getExistingVote","undoInvest","isManualBet","stakedTokens","Error","removeVote","Invest","createVote","adjustVotes","data","upVotes","downVotes","save","authorPagerank","pagerank","initialPostRank","updatePageRank","rankChange","updateRank","expectedPayout","parentPost","subscription","updateSubscriptions","status","json","investment","success","updateClient","Earnings","updateEarnings","voteCount","countDocuments","investor","$gt","getSubscriptions","processNotifications","err","type","now","Date","oneWeek","postDate","getTime","equals","timeElapsed","createdAt","payoutTime","Subscription","follower","following","inc","sendAuthorNotification","Notification","deleteOne","forUser","byUser","exec","createNotification","action","payload","fromUser","toUser","noteType","alert","name","console","log","params","children","Post","find","parentComment","$exists","populate","authors","map","child","notes","u","Promise","all","pageRankChange","elapsedTime","lastVote","hidden","insertIntoFeed","join","path","match","User"],"mappings":"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","sourcesContent":["import Earnings from 'server/api/earnings/earnings.model';\nimport { sendNotification as sendPushNotification } from 'server/notifications';\nimport computeApproxPageRank from 'server/pagerank/computeApproxPageRank';\nimport { computePostPayout } from 'app/utils/rewards';\nimport Community from 'server/api/community/community.model';\nimport Post from 'server/api/post/post.model';\nimport User from 'server/api/user/user.model';\nimport Subscription from 'server/api/subscription/subscription.model';\nimport Notification from 'server/api/notification/notification.model';\nimport Invest from 'server/api/invest/invest.model';\n\nconst { NODE_ENV } = process.env;\n\n// General problem: a user with some reputation who hasn't upvoted anyone\n// adds much more weight to the first few posts he/she upvotes\n// TODO: Solution — only start counting weights after N upvotes?\n\n// Rate-limit vote weights?\n\n// Weight allocation attack:\n// Above also solves this possible attack...\n// 1. Build up some degree of relevance (takes time)\n// 2. Create N sibyls ahead of time and upvote each one\n// 3. Wait until right before the a given post's payout time\n// 4. Each sybil upvotes the post and effectively transferring all of the rep weight to the post\n// 5. After, delete the sybils, and to restore original weights\n// This is mitigated by not deleting links to sybil nodes upon their deletion :)\n// Partial solution: prevent undoing vote after payout\nexport const create = async (req, res, next) => {\n  try {\n    const { community, communityId } = req.communityMember;\n    const communityInstance = await Community.findOne({ _id: communityId });\n\n    const userId = req.user._id;\n    const postId = req.body.post;\n    let { amount } = req.body;\n\n    // amount should be on a scale of -1 to 1 to prevent abuse;\n    amount = Math.max(-1, amount);\n    amount = Math.min(1, amount);\n\n    let { post, user, author } = await queryDb({ userId, postId, communityId });\n\n    post = await unhideTwitterComments({ amount, post, communityId, community });\n    // TODO create twitter user authors!\n\n    ratelimitVotes({ user });\n    if (author) {\n      author.relevance = await ensurePagerank({ user: author, communityInstance });\n    }\n    if (user) {\n      user.relevance = await ensurePagerank({ user, communityInstance });\n    }\n\n    let vote = await getExistingVote({ user, post, amount, communityId });\n    const undoInvest = !!vote;\n\n    if (undoInvest && vote.isManualBet && vote.stakedTokens) {\n      throw new Error('You cannot undo a vote once after you bet on a post.');\n    }\n\n    vote = undoInvest\n      ? await vote.removeVote({ post, user })\n      : await Invest.createVote({\n          post,\n          community,\n          communityId,\n          communityInstance,\n          amount,\n          user\n        });\n\n    const adjustVotes = undoInvest ? -1 : 1;\n    post.data.upVotes += amount > 0 ? adjustVotes : 0;\n    post.data.downVotes += amount < 0 ? adjustVotes : 0;\n    post.data = await post.data.save();\n\n    const authorPagerank = author && (author.relevance.pagerank || 0);\n    const initialPostRank = post.data.pagerank || 0;\n\n    const updatePageRank = await computeApproxPageRank({\n      communityId,\n      author,\n      post,\n      vote,\n      user,\n      undoInvest\n    });\n    if (updatePageRank) ({ author, post } = updatePageRank);\n\n    if (vote && !undoInvest) {\n      vote.rankChange = post.data.pagerank - initialPostRank;\n      await vote.save();\n    }\n\n    await post.updateRank({ communityId });\n    post.data.expectedPayout = computePostPayout(post.data, communityInstance);\n\n    post = await post.save();\n\n    if (post.parentPost) {\n      await post.parentPost.updateRank({ communityId });\n      await post.parentPost.save();\n    }\n\n    const subscription = await updateSubscriptions({\n      post,\n      user,\n      amount,\n      communityId,\n      community,\n      undoInvest\n    });\n\n    res.status(200).json({\n      investment: vote,\n      success: true,\n      subscription,\n      undoInvest,\n      rankChange: post.data.pagerank - initialPostRank\n    });\n\n    // TODO - put the rest into queue on worker?\n    post.updateClient();\n\n    Earnings.updateEarnings({ post, communityId });\n\n    // updates user votes\n    user.voteCount = await Invest.countDocuments({\n      investor: user._id,\n      amount: { $gt: 0 }\n    });\n\n    // updates follow & follower counts - deprecated?\n    user = await user.getSubscriptions();\n    user = await user.save();\n\n    user.updateClient();\n\n    // updates author reputation and send notificaitons\n    await processNotifications({\n      author,\n      community,\n      post,\n      user,\n      amount,\n      authorPagerank,\n      undoInvest,\n      communityId\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\nasync function getExistingVote({ user, post, amount, communityId }) {\n  const type = amount < 0 ? 'dowvote' : 'upvote';\n\n  // Don't let users downvote posts older than one week\n  const now = new Date();\n  const oneWeek = 1000 * 60 * 60 * 24 * 7;\n  if (\n    type === 'downvote' &&\n    post.data.postDate < now.getTime() - oneWeek &&\n    NODE_ENV === 'production'\n  ) {\n    throw new Error('you cannot downvote posts older than one week');\n  }\n\n  if (user._id.equals(post.user)) {\n    throw new Error('You can not ' + type + ' your own comment');\n  }\n\n  const vote = await Invest.findOne({\n    investor: user._id,\n    post: post._id,\n    communityId\n  });\n\n  if (!vote) return null;\n\n  // TODO undo invest\n  const timeElapsed = now.getTime() - new Date(vote.createdAt).getTime();\n  // TODO 15m to update post is this fine?\n  if (timeElapsed > 15 * 60 * 1000 && NODE_ENV === 'production') {\n    throw new Error('You cannot change your vote after 15m');\n  }\n\n  if (\n    new Date(post.data.payoutTime).getTime() < now.getTime() &&\n    NODE_ENV === 'production'\n  ) {\n    throw new Error('you cannot change your vote after post payout');\n  }\n  return vote;\n}\n\nasync function updateSubscriptions({\n  post,\n  user,\n  amount,\n  undoInvest,\n  communityId,\n  community\n}) {\n  if (amount < 0) return null;\n  let subscription = await Subscription.findOne({\n    follower: user._id,\n    following: post.user,\n    communityId\n  });\n  if (!subscription && undoInvest) return null;\n  if (!subscription) {\n    subscription = new Subscription({\n      follower: user._id,\n      following: post.user,\n      communityId,\n      community,\n      amount: 0\n    });\n  }\n  const inc = undoInvest ? Math.max(-3, -subscription.amount) : 3;\n  subscription.amount = Math.min(subscription.amount + inc, 20);\n  return subscription.save();\n}\n\nasync function sendAuthorNotification({ author, user, post, type, undoInvest, amount }) {\n  if (!author) return null;\n  // Remove notification if undo;\n  if (undoInvest) {\n    await Notification.deleteOne({\n      type,\n      post: post._id,\n      forUser: author._id,\n      byUser: user._id\n    }).exec();\n    return null;\n  }\n\n  await Notification.createNotification({\n    post: post._id,\n    forUser: author._id,\n    byUser: user._id,\n    amount,\n    type\n  });\n\n  const action =\n    type === 'upvote' ? ' thinks your comment is relevant' : ' upvoted a link you shared';\n\n  const payload = {\n    fromUser: user,\n    toUser: author,\n    post,\n    action,\n    noteType: type\n  };\n  const alert = user.name + action;\n\n  try {\n    sendPushNotification(author, alert, payload);\n  } catch (err) {\n    console.log(err); // eslint-disable-line\n  }\n  return null;\n}\n\nasync function processNotifications(params) {\n  const { post, user, amount, authorPagerank, undoInvest } = params;\n  let { author } = params;\n\n  if (!author) {\n    if (amount < 0) return null;\n    const children = await Post.find({\n      parentPost: post._id,\n      parentComment: { $exists: false }\n    }).populate('user');\n\n    const authors = children.map(child => child.user);\n    const notes = authors.map(u =>\n      sendAuthorNotification({ author: u, user, post, undoInvest, type: 'upvoteParent' })\n    );\n    return Promise.all(notes);\n  }\n\n  const pageRankChange = author.relevance\n    ? author.relevance.pagerank - authorPagerank\n    : 0;\n  const type = 'upvote';\n\n  author = await author.save();\n  author.updateClient(user);\n\n  if (amount < 0) return null;\n\n  await sendAuthorNotification({\n    author,\n    user,\n    post,\n    undoInvest,\n    amount: pageRankChange,\n    type\n  });\n  return author;\n}\n\nfunction ratelimitVotes({ user }) {\n  const now = new Date();\n  const elapsedTime = new Date(now).getTime() - new Date(user.lastVote || 0).getTime();\n  if (elapsedTime < 5 * 1000 && NODE_ENV === 'production') {\n    throw new Error('you cannot up-vote posts more often than 5s');\n  }\n}\n\nasync function unhideTwitterComments({ amount, post, communityId, community }) {\n  if (!post) return null;\n  if (amount > 0 && post.hidden && post.parentPost) {\n    await post.parentPost.insertIntoFeed(communityId, community);\n    post.hidden = false;\n  }\n  post.hidden = false;\n  return post;\n}\n\nasync function ensurePagerank({ user, communityInstance }) {\n  if (!user) return null;\n  if (user.relevance) return user.relevance;\n  return communityInstance.join(user._id);\n}\n\nasync function queryDb({ userId, postId, communityId }) {\n  const post = await Post.findOne({ _id: postId })\n    .populate({ path: 'parentPost' })\n    .populate({ path: 'data', match: { communityId } });\n\n  const user = await User.findOne(\n    { _id: userId },\n    'name balance ethAddress image lastVote votePower handle tokenBalance lockedTokens notificationSettings'\n  ).populate({\n    path: 'relevance',\n    match: { communityId }\n  });\n\n  const author = await User.findOne(\n    { _id: post.user },\n    'name handle image balance deviceTokens badge'\n  ).populate({\n    path: 'relevance',\n    match: { communityId }\n  });\n  return { user, author, post };\n}\n"],"file":"createVote.js"}